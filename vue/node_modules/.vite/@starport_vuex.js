import {
  require_crypto_js
} from "./chunk-CSI3VDWP.js";
import {
  require_build as require_build3
} from "./chunk-B3PL6DRP.js";
import {
  require_build3 as require_build2,
  require_events
} from "./chunk-BZWUMTES.js";
import "./chunk-RGPDPUJZ.js";
import "./chunk-IPASDQIS.js";
import {
  require_build
} from "./chunk-2INCKEC4.js";
import {
  require_buffer
} from "./chunk-KSJOMXEL.js";
import "./chunk-6TVM5C6I.js";
import "./chunk-AIGMFZXJ.js";
import "./chunk-A5VHLTBN.js";
import "./chunk-V2MD6W3N.js";
import {
  __commonJS,
  __spreadValues,
  __toModule,
  init_define_global
} from "./chunk-LLTQ3AVL.js";

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/utils.js"(exports, module) {
    init_define_global();
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          message: this.message,
          name: this.name,
          description: this.description,
          number: this.number,
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/createError.js"(exports, module) {
    init_define_global();
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/settle.js"(exports, module) {
    init_define_global();
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
      }
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    init_define_global();
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    init_define_global();
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/defaults.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/transformData.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
      config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
      utils.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/env/data.js"(exports, module) {
    init_define_global();
    module.exports = {
      "version": "0.22.0"
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    init_define_global();
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/core/Axios.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    init_define_global();
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    init_define_global();
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/@starport/vuex/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/lib/axios.js"(exports, module) {
    init_define_global();
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios3 = createInstance(defaults);
    axios3.Axios = Axios;
    axios3.Cancel = require_Cancel();
    axios3.CancelToken = require_CancelToken();
    axios3.isCancel = require_isCancel();
    axios3.VERSION = require_data().version;
    axios3.all = function all(promises) {
      return Promise.all(promises);
    };
    axios3.spread = require_spread();
    axios3.isAxiosError = require_isAxiosError();
    module.exports = axios3;
    module.exports.default = axios3;
  }
});

// node_modules/@starport/vuex/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@starport/vuex/node_modules/axios/index.js"(exports, module) {
    init_define_global();
    module.exports = require_axios();
  }
});

// dep:@starport_vuex
init_define_global();

// node_modules/@starport/vuex/src/index.js
init_define_global();

// node_modules/@starport/vuex/src/modules/common/blocks/index.js
init_define_global();

// node_modules/@starport/vuex/src/modules/common/blocks/blocks.js
init_define_global();
var import_crypto = __toModule(require_build2());
var import_encoding = __toModule(require_build());
var import_axios = __toModule(require_axios2());
function formatTx({
  txHash = "",
  messages = [],
  memo = "",
  signer_infos = [],
  fee = {},
  gas_used = null,
  gas_wanted = null,
  height = null,
  code = 0,
  log = null
}) {
  return {
    txHash,
    body: {
      messages,
      memo
    },
    auth_info: {
      signer_infos,
      fee
    },
    meta: {
      gas_used,
      gas_wanted,
      height,
      code,
      log
    }
  };
}
async function getTx(apiCosmos, apiTendermint, encodedTx) {
  const txHash = (0, import_crypto.sha256)((0, import_encoding.fromBase64)(encodedTx));
  try {
    const rpcRes = await import_axios.default.get(apiTendermint + "/tx?hash=0x" + (0, import_encoding.toHex)(txHash));
    const apiRes = await import_axios.default.get(apiCosmos + "/cosmos/tx/v1beta1/txs/" + (0, import_encoding.toHex)(txHash));
    return { rpcRes, apiRes, txHash: (0, import_encoding.toHex)(txHash).toUpperCase() };
  } catch (e) {
    throw "Error fetching TX data";
  }
}
async function decodeTx(apiCosmos, apiTendermint, encodedTx) {
  let fullTx;
  let retries = 0;
  while (!fullTx && retries < 5) {
    try {
      fullTx = await getTx(apiCosmos, apiTendermint, encodedTx);
    } catch (e) {
      retries++;
      await new Promise((resolve) => {
        setTimeout(resolve, 2e3);
      });
    }
  }
  const { data } = fullTx.rpcRes;
  const { height, tx_result } = data.result;
  const { code, log, gas_used, gas_wanted } = tx_result;
  const { body, auth_info } = fullTx.apiRes.data.tx;
  const { messages, memo } = body;
  return formatTx({
    txHash: fullTx.txHash,
    messages,
    memo,
    signer_infos: auth_info.signer_infos,
    fee: auth_info.fee,
    gas_used,
    gas_wanted,
    height,
    code,
    log
  });
}
var blocks_default = {
  namespaced: true,
  state() {
    return {
      blocks: [],
      size: 20
    };
  },
  getters: {
    getBlocks: (state) => (howmany) => {
      return [...state.blocks].sort((a, b) => b.height - a.height).slice(0, howmany);
    },
    getBlockByHeight: (state) => (height) => {
      return state.blocks.find((x) => x.height == height) || {};
    }
  },
  mutations: {
    ADD_BLOCK(state, block) {
      state.blocks.push(block);
      if (state.blocks.length > state.size) {
        state.blocks.shift();
      }
    },
    RESET_STATE(state) {
      state.blocks = [];
    },
    SET_SIZE(state, size) {
      state.size = size;
    }
  },
  actions: {
    init({ dispatch, rootGetters }) {
      if (rootGetters["common/env/client"]) {
        rootGetters["common/env/client"].on("newblock", (data) => {
          dispatch("addBlock", data);
        });
      }
    },
    async getShiftedBlock({ rootGetters }, blockHeight) {
      try {
        const blockDetails = await import_axios.default.get(rootGetters["common/env/apiTendermint"] + "/block?height=" + blockHeight);
        const txDecoded = blockDetails.data.result.block.data.txs.map(async (tx) => {
          const dec = await decodeTx(rootGetters["common/env/apiCosmos"], rootGetters["common/env/apiTendermint"], tx);
          return dec;
        });
        const txs = await Promise.all(txDecoded);
        const block = {
          height: blockDetails.data.result.block.header.height,
          timestamp: blockDetails.data.result.block.header.time,
          hash: blockDetails.data.result.block_id.hash,
          details: blockDetails.data.result.block,
          txDecoded: txs
        };
        return block;
      } catch (e) {
        throw new Error("Blocks:AddBlock Could not retrieve block. RPC node unavailable");
      }
    },
    async addBlock({ commit, rootGetters }, blockData) {
      try {
        const blockDetails = await import_axios.default.get(rootGetters["common/env/apiTendermint"] + "/block?height=" + blockData.data.value.block.header.height);
        const txDecoded = blockData.data.value.block.data.txs.map(async (tx) => {
          const dec = await decodeTx(rootGetters["common/env/apiCosmos"], rootGetters["common/env/apiTendermint"], tx);
          return dec;
        });
        const txs = await Promise.all(txDecoded);
        const block = {
          height: blockData.data.value.block.header.height,
          timestamp: blockData.data.value.block.header.time,
          hash: blockDetails.data.result.block_id.hash,
          details: blockData.data.value.block,
          txDecoded: txs
        };
        commit("ADD_BLOCK", block);
      } catch (e) {
        throw new Error("Blocks:AddBlock Could not add block. RPC node unavailable");
      }
    },
    resetState({ commit }) {
      commit("RESET_STATE");
    }
  }
};

// node_modules/@starport/vuex/src/modules/common/blocks/index.js
function init(store) {
  if (!store.hasModule(["common"])) {
    store.registerModule(["common"], { namespaced: true });
  }
  store.registerModule(["common", "blocks"], blocks_default);
  store.subscribe((mutation) => {
    if (mutation.type == "common/env/INITIALIZE_WS_COMPLETE") {
      store.dispatch("common/blocks/init", null, { root: true });
    }
  });
}

// node_modules/@starport/vuex/src/modules/common/env/index.js
init_define_global();

// node_modules/@starport/vuex/src/modules/common/env/env.js
init_define_global();

// node_modules/@starport/vuex/src/client/SPClient.ts
init_define_global();
var import_stargate = __toModule(require_build3());
var import_axios2 = __toModule(require_axios2());
var import_events = __toModule(require_events());

// node_modules/reconnecting-websocket/dist/reconnecting-websocket-mjs.js
init_define_global();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
  if (m)
    return m.call(o);
  return {
    next: function() {
      if (o && i >= o.length)
        o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
var Event = function() {
  function Event2(type, target) {
    this.target = target;
    this.type = type;
  }
  return Event2;
}();
var ErrorEvent = function(_super) {
  __extends(ErrorEvent2, _super);
  function ErrorEvent2(error, target) {
    var _this = _super.call(this, "error", target) || this;
    _this.message = error.message;
    _this.error = error;
    return _this;
  }
  return ErrorEvent2;
}(Event);
var CloseEvent = function(_super) {
  __extends(CloseEvent2, _super);
  function CloseEvent2(code, reason, target) {
    if (code === void 0) {
      code = 1e3;
    }
    if (reason === void 0) {
      reason = "";
    }
    var _this = _super.call(this, "close", target) || this;
    _this.wasClean = true;
    _this.code = code;
    _this.reason = reason;
    return _this;
  }
  return CloseEvent2;
}(Event);
var getGlobalWebSocket = function() {
  if (typeof WebSocket !== "undefined") {
    return WebSocket;
  }
};
var isWebSocket = function(w) {
  return typeof w !== "undefined" && !!w && w.CLOSING === 2;
};
var DEFAULT = {
  maxReconnectionDelay: 1e4,
  minReconnectionDelay: 1e3 + Math.random() * 4e3,
  minUptime: 5e3,
  reconnectionDelayGrowFactor: 1.3,
  connectionTimeout: 4e3,
  maxRetries: Infinity,
  maxEnqueuedMessages: Infinity,
  startClosed: false,
  debug: false
};
var ReconnectingWebSocket = function() {
  function ReconnectingWebSocket2(url, protocols, options) {
    var _this = this;
    if (options === void 0) {
      options = {};
    }
    this._listeners = {
      error: [],
      message: [],
      open: [],
      close: []
    };
    this._retryCount = -1;
    this._shouldReconnect = true;
    this._connectLock = false;
    this._binaryType = "blob";
    this._closeCalled = false;
    this._messageQueue = [];
    this.onclose = null;
    this.onerror = null;
    this.onmessage = null;
    this.onopen = null;
    this._handleOpen = function(event) {
      _this._debug("open event");
      var _a = _this._options.minUptime, minUptime = _a === void 0 ? DEFAULT.minUptime : _a;
      clearTimeout(_this._connectTimeout);
      _this._uptimeTimeout = setTimeout(function() {
        return _this._acceptOpen();
      }, minUptime);
      _this._ws.binaryType = _this._binaryType;
      _this._messageQueue.forEach(function(message) {
        return _this._ws.send(message);
      });
      _this._messageQueue = [];
      if (_this.onopen) {
        _this.onopen(event);
      }
      _this._listeners.open.forEach(function(listener) {
        return _this._callEventListener(event, listener);
      });
    };
    this._handleMessage = function(event) {
      _this._debug("message event");
      if (_this.onmessage) {
        _this.onmessage(event);
      }
      _this._listeners.message.forEach(function(listener) {
        return _this._callEventListener(event, listener);
      });
    };
    this._handleError = function(event) {
      _this._debug("error event", event.message);
      _this._disconnect(void 0, event.message === "TIMEOUT" ? "timeout" : void 0);
      if (_this.onerror) {
        _this.onerror(event);
      }
      _this._debug("exec error listeners");
      _this._listeners.error.forEach(function(listener) {
        return _this._callEventListener(event, listener);
      });
      _this._connect();
    };
    this._handleClose = function(event) {
      _this._debug("close event");
      _this._clearTimeouts();
      if (_this._shouldReconnect) {
        _this._connect();
      }
      if (_this.onclose) {
        _this.onclose(event);
      }
      _this._listeners.close.forEach(function(listener) {
        return _this._callEventListener(event, listener);
      });
    };
    this._url = url;
    this._protocols = protocols;
    this._options = options;
    if (this._options.startClosed) {
      this._shouldReconnect = false;
    }
    this._connect();
  }
  Object.defineProperty(ReconnectingWebSocket2, "CONNECTING", {
    get: function() {
      return 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2, "OPEN", {
    get: function() {
      return 1;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2, "CLOSING", {
    get: function() {
      return 2;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2, "CLOSED", {
    get: function() {
      return 3;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "CONNECTING", {
    get: function() {
      return ReconnectingWebSocket2.CONNECTING;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "OPEN", {
    get: function() {
      return ReconnectingWebSocket2.OPEN;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "CLOSING", {
    get: function() {
      return ReconnectingWebSocket2.CLOSING;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "CLOSED", {
    get: function() {
      return ReconnectingWebSocket2.CLOSED;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "binaryType", {
    get: function() {
      return this._ws ? this._ws.binaryType : this._binaryType;
    },
    set: function(value) {
      this._binaryType = value;
      if (this._ws) {
        this._ws.binaryType = value;
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "retryCount", {
    get: function() {
      return Math.max(this._retryCount, 0);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "bufferedAmount", {
    get: function() {
      var bytes = this._messageQueue.reduce(function(acc, message) {
        if (typeof message === "string") {
          acc += message.length;
        } else if (message instanceof Blob) {
          acc += message.size;
        } else {
          acc += message.byteLength;
        }
        return acc;
      }, 0);
      return bytes + (this._ws ? this._ws.bufferedAmount : 0);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "extensions", {
    get: function() {
      return this._ws ? this._ws.extensions : "";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "protocol", {
    get: function() {
      return this._ws ? this._ws.protocol : "";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "readyState", {
    get: function() {
      if (this._ws) {
        return this._ws.readyState;
      }
      return this._options.startClosed ? ReconnectingWebSocket2.CLOSED : ReconnectingWebSocket2.CONNECTING;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(ReconnectingWebSocket2.prototype, "url", {
    get: function() {
      return this._ws ? this._ws.url : "";
    },
    enumerable: true,
    configurable: true
  });
  ReconnectingWebSocket2.prototype.close = function(code, reason) {
    if (code === void 0) {
      code = 1e3;
    }
    this._closeCalled = true;
    this._shouldReconnect = false;
    this._clearTimeouts();
    if (!this._ws) {
      this._debug("close enqueued: no ws instance");
      return;
    }
    if (this._ws.readyState === this.CLOSED) {
      this._debug("close: already closed");
      return;
    }
    this._ws.close(code, reason);
  };
  ReconnectingWebSocket2.prototype.reconnect = function(code, reason) {
    this._shouldReconnect = true;
    this._closeCalled = false;
    this._retryCount = -1;
    if (!this._ws || this._ws.readyState === this.CLOSED) {
      this._connect();
    } else {
      this._disconnect(code, reason);
      this._connect();
    }
  };
  ReconnectingWebSocket2.prototype.send = function(data) {
    if (this._ws && this._ws.readyState === this.OPEN) {
      this._debug("send", data);
      this._ws.send(data);
    } else {
      var _a = this._options.maxEnqueuedMessages, maxEnqueuedMessages = _a === void 0 ? DEFAULT.maxEnqueuedMessages : _a;
      if (this._messageQueue.length < maxEnqueuedMessages) {
        this._debug("enqueue", data);
        this._messageQueue.push(data);
      }
    }
  };
  ReconnectingWebSocket2.prototype.addEventListener = function(type, listener) {
    if (this._listeners[type]) {
      this._listeners[type].push(listener);
    }
  };
  ReconnectingWebSocket2.prototype.dispatchEvent = function(event) {
    var e_1, _a;
    var listeners = this._listeners[event.type];
    if (listeners) {
      try {
        for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
          var listener = listeners_1_1.value;
          this._callEventListener(event, listener);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return))
            _a.call(listeners_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
    return true;
  };
  ReconnectingWebSocket2.prototype.removeEventListener = function(type, listener) {
    if (this._listeners[type]) {
      this._listeners[type] = this._listeners[type].filter(function(l) {
        return l !== listener;
      });
    }
  };
  ReconnectingWebSocket2.prototype._debug = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (this._options.debug) {
      console.log.apply(console, __spread(["RWS>"], args));
    }
  };
  ReconnectingWebSocket2.prototype._getNextDelay = function() {
    var _a = this._options, _b = _a.reconnectionDelayGrowFactor, reconnectionDelayGrowFactor = _b === void 0 ? DEFAULT.reconnectionDelayGrowFactor : _b, _c = _a.minReconnectionDelay, minReconnectionDelay = _c === void 0 ? DEFAULT.minReconnectionDelay : _c, _d = _a.maxReconnectionDelay, maxReconnectionDelay = _d === void 0 ? DEFAULT.maxReconnectionDelay : _d;
    var delay = 0;
    if (this._retryCount > 0) {
      delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);
      if (delay > maxReconnectionDelay) {
        delay = maxReconnectionDelay;
      }
    }
    this._debug("next delay", delay);
    return delay;
  };
  ReconnectingWebSocket2.prototype._wait = function() {
    var _this = this;
    return new Promise(function(resolve) {
      setTimeout(resolve, _this._getNextDelay());
    });
  };
  ReconnectingWebSocket2.prototype._getNextUrl = function(urlProvider) {
    if (typeof urlProvider === "string") {
      return Promise.resolve(urlProvider);
    }
    if (typeof urlProvider === "function") {
      var url = urlProvider();
      if (typeof url === "string") {
        return Promise.resolve(url);
      }
      if (!!url.then) {
        return url;
      }
    }
    throw Error("Invalid URL");
  };
  ReconnectingWebSocket2.prototype._connect = function() {
    var _this = this;
    if (this._connectLock || !this._shouldReconnect) {
      return;
    }
    this._connectLock = true;
    var _a = this._options, _b = _a.maxRetries, maxRetries = _b === void 0 ? DEFAULT.maxRetries : _b, _c = _a.connectionTimeout, connectionTimeout = _c === void 0 ? DEFAULT.connectionTimeout : _c, _d = _a.WebSocket, WebSocket2 = _d === void 0 ? getGlobalWebSocket() : _d;
    if (this._retryCount >= maxRetries) {
      this._debug("max retries reached", this._retryCount, ">=", maxRetries);
      return;
    }
    this._retryCount++;
    this._debug("connect", this._retryCount);
    this._removeListeners();
    if (!isWebSocket(WebSocket2)) {
      throw Error("No valid WebSocket class provided");
    }
    this._wait().then(function() {
      return _this._getNextUrl(_this._url);
    }).then(function(url) {
      if (_this._closeCalled) {
        return;
      }
      _this._debug("connect", { url, protocols: _this._protocols });
      _this._ws = _this._protocols ? new WebSocket2(url, _this._protocols) : new WebSocket2(url);
      _this._ws.binaryType = _this._binaryType;
      _this._connectLock = false;
      _this._addListeners();
      _this._connectTimeout = setTimeout(function() {
        return _this._handleTimeout();
      }, connectionTimeout);
    });
  };
  ReconnectingWebSocket2.prototype._handleTimeout = function() {
    this._debug("timeout event");
    this._handleError(new ErrorEvent(Error("TIMEOUT"), this));
  };
  ReconnectingWebSocket2.prototype._disconnect = function(code, reason) {
    if (code === void 0) {
      code = 1e3;
    }
    this._clearTimeouts();
    if (!this._ws) {
      return;
    }
    this._removeListeners();
    try {
      this._ws.close(code, reason);
      this._handleClose(new CloseEvent(code, reason, this));
    } catch (error) {
    }
  };
  ReconnectingWebSocket2.prototype._acceptOpen = function() {
    this._debug("accept open");
    this._retryCount = 0;
  };
  ReconnectingWebSocket2.prototype._callEventListener = function(event, listener) {
    if ("handleEvent" in listener) {
      listener.handleEvent(event);
    } else {
      listener(event);
    }
  };
  ReconnectingWebSocket2.prototype._removeListeners = function() {
    if (!this._ws) {
      return;
    }
    this._debug("removeListeners");
    this._ws.removeEventListener("open", this._handleOpen);
    this._ws.removeEventListener("close", this._handleClose);
    this._ws.removeEventListener("message", this._handleMessage);
    this._ws.removeEventListener("error", this._handleError);
  };
  ReconnectingWebSocket2.prototype._addListeners = function() {
    if (!this._ws) {
      return;
    }
    this._debug("addListeners");
    this._ws.addEventListener("open", this._handleOpen);
    this._ws.addEventListener("close", this._handleClose);
    this._ws.addEventListener("message", this._handleMessage);
    this._ws.addEventListener("error", this._handleError);
  };
  ReconnectingWebSocket2.prototype._clearTimeouts = function() {
    clearTimeout(this._connectTimeout);
    clearTimeout(this._uptimeTimeout);
  };
  return ReconnectingWebSocket2;
}();
var reconnecting_websocket_mjs_default = ReconnectingWebSocket;

// node_modules/@starport/vuex/src/client/SPClient.ts
var SPClient = class extends import_events.EventEmitter {
  constructor({ apiAddr, rpcAddr, wsAddr, refresh, offline }) {
    super();
    this.apiAddr = apiAddr;
    this.rpcAddr = rpcAddr;
    this.wsAddr = wsAddr;
    this.offline = offline;
    this.refresh = refresh;
    const poll = this.connectivityTest.bind(this);
    this.timer = setInterval(poll, this.refresh);
    this.connectivityTest();
    if (this.wsAddr) {
      this.connectWS();
    }
  }
  async useSigner(signer) {
    this.signingClient = await import_stargate.SigningStargateClient.connectWithSigner(this.rpcAddr, signer);
    this.signer = signer;
  }
  switchAPI(apiAddr) {
    this.apiAddr = apiAddr;
  }
  switchWS(wsAddr) {
    this.emit("ws-status", false);
    this.wsAddr = wsAddr;
    this.socket.close();
    this.connectWS();
  }
  connectWS() {
    this.socket = new reconnecting_websocket_mjs_default(this.wsAddr);
    this.socket.onopen = this.onOpenWS.bind(this);
    this.socket.onmessage = this.onMessageWS.bind(this);
    this.socket.onerror = this.onErrorWS.bind(this);
    this.socket.onclose = this.onCloseWS.bind(this);
  }
  async switchRPC(rpcAddr) {
    this.rpcAddr = rpcAddr;
    if (this.signingClient) {
      const registry = __spreadValues({}, this.signingClient.registry);
      this.signingClient = await import_stargate.SigningStargateClient.connectWithSigner(this.rpcAddr, this.signer, { registry });
    }
  }
  async connectivityTest() {
    if (this.offline) {
      this.emit("newblock", { dummy: true });
    }
    if (this.apiAddr) {
      try {
        const status = await import_axios2.default.get(this.apiAddr + "/cosmos/base/tendermint/v1beta1/node_info");
        this.emit("chain-id", status.data.default_node_info.network);
        status.data.application_version.name ? this.emit("chain-name", status.data.application_version.name) : this.emit("chain-name", status.data.default_node_info.network);
        this.emit("api-status", true);
      } catch (error) {
        if (!error.response) {
          this.emit("api-status", false);
          console.error(new Error("Client-js:API API Node unavailable"));
        } else {
          this.emit("api-status", true);
        }
      }
    }
    if (this.rpcAddr) {
      try {
        await import_axios2.default.get(this.rpcAddr);
        this.emit("rpc-status", true);
      } catch (error) {
        if (!error.response) {
          console.error(new Error("Client-js:API RPC Node unavailable"));
          this.emit("rpc-status", false);
        } else {
          this.emit("rpc-status", true);
        }
      }
    }
  }
  onErrorWS() {
    console.error(new Error("Client-js:WS Could not connect to websocket."));
  }
  onCloseWS() {
    this.emit("ws-status", false);
  }
  onOpenWS() {
    this.emit("ws-status", true);
    this.socket.send(JSON.stringify({
      jsonrpc: "2.0",
      method: "subscribe",
      id: "1",
      params: ["tm.event = 'NewBlock'"]
    }));
  }
  onMessageWS(msg) {
    const result = JSON.parse(msg.data).result;
    if (result.data && result.data.type === "tendermint/event/NewBlock") {
      this.emit("newblock", JSON.parse(msg.data).result);
    }
  }
  async query(url, params = "") {
    try {
      const response = await import_axios2.default.get(this.apiAddr + url + params);
      return response.data;
    } catch (e) {
      console.error(new Error("Client-js:API Could not access API: " + url));
    }
  }
  addQueryParam(query, key) {
    const value = query[key];
    return encodeURIComponent(key) + "=" + encodeURIComponent(Array.isArray(value) ? value.join(",") : typeof value === "number" ? value : `${value}`);
  }
  toQueryString(rawQuery) {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => typeof query[key] !== "undefined");
    return keys.map((key) => typeof query[key] === "object" && !Array.isArray(query[key]) ? this.toQueryString(query[key]) : this.addQueryParam(query, key)).join("&");
  }
  addQueryParams(rawQuery) {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }
  async request({
    body,
    path,
    query,
    method
  }) {
    const url = this.apiAddr + path + this.addQueryParams(query);
    try {
      const response = (0, import_axios2.default)({
        url,
        method,
        data: body,
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json;charset=UTF-8"
        }
      });
      const data = await response;
      return data;
    } catch (e) {
      console.error(new Error("Client-js:API Could not access API: " + url));
    }
  }
};

// node_modules/@starport/vuex/src/modules/common/env/env.js
var import_meta = {};
var apiNode = import_meta.env && import_meta.env.VITE_API_COSMOS && import_meta.env.VITE_API_COSMOS.replace("0.0.0.0", "localhost") || process.env.VUE_APP_API_COSMOS && process.env.VUE_APP_API_COSMOS.replace("0.0.0.0", "localhost") || "http://localhost:1317";
var rpcNode = import_meta.env && import_meta.env.VITE_API_TENDERMINT && import_meta.env.VITE_API_TENDERMINT.replace("0.0.0.0", "localhost") || process.env.VUE_APP_API_TENDERMINT && process.env.VUE_APP_API_TENDERMINT.replace("0.0.0.0", "localhost") || "http://localhost:26657";
var wsNode = import_meta.env && import_meta.env.VITE_WS_TENDERMINT && import_meta.env.VITE_WS_TENDERMINT.replace("0.0.0.0", "localhost") || process.env.VUE_APP_WS_TENDERMINT && process.env.VUE_APP_WS_TENDERMINT.replace("0.0.0.0", "localhost") || "ws://localhost:26657/websocket";
var addrPrefix = import_meta.env ? import_meta.env.VITE_ADDRESS_PREFIX || "cosmos" : process.env.VUE_APP_ADDRESS_PREFIX || "cosmos";
var env_default = {
  namespaced: true,
  state() {
    return {
      chainId: "",
      addrPrefix,
      sdkVersion: "Stargate",
      apiNode,
      rpcNode,
      wsNode,
      client: null,
      chainName: "",
      apiConnected: false,
      rpcConnected: false,
      wsConnected: false,
      getTXApi: "",
      initialized: false
    };
  },
  getters: {
    client: (state) => state.client,
    signingClient: (state) => state.client.signingClient,
    chainId: (state) => state.chainId,
    chainName: (state) => state.chainName,
    addrPrefix: (state) => state.addrPrefix,
    apiTendermint: (state) => state.rpcNode,
    apiCosmos: (state) => state.apiNode,
    apiWS: (state) => state.wsNode,
    sdkVersion: (state) => state.sdkVersion,
    apiConnected: (state) => state.apiConnected,
    rpcConnected: (state) => state.rpcConnected,
    wsConnected: (state) => state.wsConnected,
    getEnv: (state) => ({
      chainID: state.chainId,
      chainName: state.chainName,
      apiURL: state.apiNode,
      rpcURL: state.rpcNode,
      wsURL: state.wsNode,
      prefix: state.addrPrefix,
      status: {
        apiConnected: state.apiConnected,
        rpcConnected: state.rpcConnected,
        wsConnected: state.wsConnected
      }
    })
  },
  mutations: {
    SET_CONFIG(state, config) {
      state.apiNode = config.apiNode;
      if (config.rpcNode || config.offline) {
        state.rpcNode = config.rpcNode;
      }
      if (config.wsNode || config.offline) {
        state.wsNode = config.wsNode;
      }
      if (config.chainId || config.offline) {
        state.chainId = config.chainId;
      }
      if (config.addrPrefix || config.offline) {
        state.addrPrefix = config.addrPrefix;
      }
      if (config.sdkVersion || config.offline) {
        state.sdkVersion = config.sdkVersion;
      }
      if (config.getTXApi || config.offline) {
        state.getTXApi = config.getTXApi;
      }
    },
    CONNECT(state, { client }) {
      state.client = client;
    },
    INITIALIZE_WS_COMPLETE(state) {
      state.initialized = true;
    },
    SET_CHAIN_ID(state, chainId) {
      state.chainId = chainId;
    },
    SET_CHAIN_NAME(state, chainName) {
      state.chainName = chainName;
    },
    SET_WS_STATUS(state, status) {
      state.wsConnected = status;
    },
    SET_API_STATUS(state, status) {
      state.apiConnected = status;
    },
    SET_RPC_STATUS(state, status) {
      state.rpcConnected = status;
    },
    SET_TX_API(state, txapi) {
      state.getTXApi = txapi;
    }
  },
  actions: {
    async init({ dispatch }, config = {
      starportUrl: "http://localhost:12345",
      apiNode,
      rpcNode,
      wsNode,
      chainId: "",
      addrPrefix,
      chainName: "",
      sdkVersion: "Stargate",
      getTXApi: rpcNode + "/tx?hash=0x",
      offline: false,
      refresh: 5e3
    }) {
      try {
        await dispatch("config", config);
        console.log("Vuex module: common.env initialized!");
      } catch (e) {
        throw new Error("Env:Config Could not configure environment");
      }
    },
    setTxAPI({ commit }, payload) {
      commit("SET_TX_API", payload);
    },
    async setConnectivity({ commit }, payload) {
      switch (payload.connection) {
        case "ws":
          commit("SET_WS_STATUS", payload.status);
          break;
        case "api":
          commit("SET_API_STATUS", payload.status);
          break;
        case "rpc":
          commit("SET_RPC_STATUS", payload.status);
          break;
      }
    },
    async signIn({ state }, signer) {
      try {
        await state.client.useSigner(signer);
      } catch (e) {
        throw new Error("Env:Client:Wallet Could not create signing client with signer: " + signer);
      }
    },
    async config({ commit, state, dispatch }, config = {
      apiNode: "http://localhost:1317",
      rpcNode: "http://localhost:26657",
      wsNode: "ws://localhost:26657/websocket",
      chainName: "",
      chainId: "",
      addrPrefix: "",
      sdkVersion: "Stargate",
      offline: false,
      refresh: 5e3,
      getTXApi: "http://localhost:26657/tx?hash=0x"
    }) {
      try {
        let client;
        if (!state.client) {
          client = new SPClient({
            apiAddr: config.apiNode,
            rpcAddr: config.rpcNode,
            wsAddr: config.wsNode,
            offline: config.offline,
            refresh: config.refresh
          });
          client.setMaxListeners(0);
          client.on("chain-id", (id) => {
            if (id) {
              commit("SET_CHAIN_ID", id);
            }
          });
          client.on("chain-name", (name) => {
            if (name) {
              commit("SET_CHAIN_NAME", name);
            }
          });
          client.on("ws-status", (status) => dispatch("setConnectivity", { connection: "ws", status }));
          client.on("api-status", (status) => dispatch("setConnectivity", { connection: "api", status }));
          client.on("rpc-status", (status) => dispatch("setConnectivity", { connection: "rpc", status }));
          commit("SET_CONFIG", config);
          await dispatch("cosmos.staking.v1beta1/QueryParams", {
            options: { subscribe: false, all: false },
            params: {},
            query: null
          }, { root: true });
          await dispatch("cosmos.bank.v1beta1/QueryTotalSupply", {
            options: { subscribe: false, all: false },
            params: {},
            query: null
          }, { root: true });
          commit("CONNECT", { client });
          commit("INITIALIZE_WS_COMPLETE");
        } else {
          client = state.client;
          let reconnectWS = false;
          let reconnectSigningClient = false;
          let reconnectClient = false;
          if (config.wsNode != state.wsNode) {
            reconnectWS = true;
          }
          if (config.rpcNode != state.rpcNode) {
            reconnectSigningClient = true;
          }
          if (config.apiNode != state.apiNode) {
            reconnectClient = true;
          }
          commit("SET_CONFIG", config);
          if (reconnectWS && config.wsNode) {
            try {
              await client.switchWS(config.wsNode);
            } catch (e) {
              throw new Error("Env:Client:Websocket Could not switch to websocket node:" + config.wsNode);
            }
          }
          if (reconnectClient && config.apiNode) {
            client.switchAPI(config.apiNode);
          }
          if (reconnectSigningClient && config.rpcNode) {
            try {
              await client.switchRPC(config.rpcNode);
            } catch (e) {
              throw new Error("Env:Client:TendermintRPC Could not switch to Tendermint RPC node:" + config.rpcNode);
            }
          }
        }
      } catch (e) {
        console.error(e);
      }
    }
  }
};

// node_modules/@starport/vuex/src/modules/common/env/index.js
function init2(store) {
  if (!store.hasModule(["common"])) {
    store.registerModule(["common"], { namespaced: true });
  }
  store.registerModule(["common", "env"], env_default);
}

// node_modules/@starport/vuex/src/modules/common/wallet/index.js
init_define_global();

// node_modules/@starport/vuex/src/modules/common/wallet/wallet.js
init_define_global();
var import_crypto_js = __toModule(require_crypto_js());
var wallet_default = {
  namespaced: true,
  state() {
    return {
      wallets: JSON.parse(window.localStorage.getItem("wallets")) || [],
      activeWallet: null,
      activeClient: null,
      selectedAddress: "",
      authorized: false,
      gasPrice: "0.0000025token"
    };
  },
  getters: {
    client: (state) => state.activeClient,
    gasPrice: (state) => state.gasPrice,
    wallet: (state) => state.activeWallet,
    address: (state) => state.selectedAddress,
    getPath: (state) => {
      var _a, _b;
      return ((_a = state.activeWallet) == null ? void 0 : _a.HDpath) + ((_b = state.activeWallet) == null ? void 0 : _b.accounts.find((x) => x.address == state.selectedAddress).pathIncrement);
    },
    nameAvailable: (state) => (name) => {
      return state.wallets.findIndex((x) => x.name == name) == -1;
    },
    lastWallet: (state) => {
      if (state.activeWallet) {
        return state.activeWallet.name;
      } else {
        return window.localStorage.getItem("lastWallet");
      }
    },
    loggedIn: (state) => state.activeClient !== null,
    signer: (state) => {
      if (state.activeClient) {
        return state.activeClient.signer;
      } else {
        return null;
      }
    }
  },
  mutations: {
    SET_ACTIVE_WALLET(state, wallet) {
      state.activeWallet = wallet;
      window.localStorage.setItem("lastWallet", wallet.name);
    },
    SET_ACTIVE_CLIENT(state, client) {
      state.activeClient = client;
      state.authorized = true;
    },
    ADD_WALLET(state, wallet) {
      state.activeWallet = wallet;
      window.localStorage.setItem("lastWallet", wallet.name);
      if (state.activeWallet.name && state.activeWallet.password) {
        state.wallets.push({
          name: state.activeWallet.name,
          wallet: import_crypto_js.default.AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString()
        });
      }
      if (state.activeWallet.name == "Keplr Integration" && !state.activeWallet.password) {
        state.wallets.push({
          name: state.activeWallet.name,
          wallet: JSON.stringify(state.activeWallet)
        });
      }
    },
    PATH_INCREMENT(state) {
      state.activeWallet.pathIncrement = state.activeWallet.pathIncrement + 1;
    },
    ADD_ACCOUNT(state, account) {
      state.activeWallet.accounts.push(account);
      if (state.activeWallet.name && state.activeWallet.password) {
        state.wallets[state.wallets.findIndex((x) => x.name === state.activeWallet.name)].wallet = import_crypto_js.default.AES.encrypt(JSON.stringify(state.activeWallet), state.activeWallet.password).toString();
      }
    },
    SET_SELECTED_ADDRESS(state, address) {
      state.selectedAddress = address;
    },
    SET_BACKUP_STATE(state, backupState) {
      state.backupState = backupState;
    },
    ADD_MESSAGE_TYPE(state, { typeUrl, type }) {
      state.activeClient.registry.register(typeUrl, type);
    },
    SIGN_OUT(state) {
      state.selectedAddress = "";
      state.activeClient = null;
      state.activeWallet = null;
      state.authorized = false;
    }
  },
  actions: {
    signOut({ commit }) {
      commit("SIGN_OUT");
    },
    async connectWithKeplr({ commit, dispatch, rootGetters }, accountSigner) {
      await dispatch("common/env/signIn", accountSigner, {
        root: true
      });
      const wallet = {
        name: "Keplr Integration",
        mnemonic: null,
        HDpath: null,
        password: null,
        prefix: rootGetters["common/env/addrPrefix"],
        pathIncrement: null,
        accounts: []
      };
      const [account] = await accountSigner.getAccounts();
      wallet.accounts.push({ address: account.address, pathIncrement: null });
      commit("ADD_WALLET", wallet);
      try {
        await dispatch("common/env/signIn", accountSigner, { root: true });
        let client = rootGetters["common/env/signingClient"];
        commit("SET_ACTIVE_CLIENT", client);
        commit("SET_SELECTED_ADDRESS", account.address);
      } catch (e) {
        console.log(e);
      }
      dispatch("storeWallets");
    },
    storeWallets({ commit, state }) {
      window.localStorage.setItem("wallets", JSON.stringify(state.wallets));
      commit("SET_BACKUP_STATE", false);
    }
  }
};

// node_modules/@starport/vuex/src/modules/common/wallet/index.js
function init3(store) {
  if (!store.hasModule(["common"])) {
    store.registerModule(["common"], { namespaced: true });
  }
  store.registerModule(["common", "wallet"], wallet_default);
}

// node_modules/@starport/vuex/src/index.js
var import_buffer = __toModule(require_buffer());
globalThis["Buffer"] = import_buffer.Buffer;
export {
  init as blocks,
  init2 as env,
  init3 as wallet
};
/*!
 * Reconnecting WebSocket
 * by Pedro Ladaria <pedro.ladaria@gmail.com>
 * https://github.com/pladaria/reconnecting-websocket
 * License MIT
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
//# sourceMappingURL=@starport_vuex.js.map
