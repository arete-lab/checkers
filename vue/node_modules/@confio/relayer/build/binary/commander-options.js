"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpOptions = exports.addLoggerOptionsTo = exports.destPort = exports.srcPort = exports.destConnection = exports.srcConnection = exports.destTrust = exports.srcTrust = exports.chainOption = exports.destOption = exports.srcOption = exports.interactiveOption = exports.mnemonicOption = exports.keyFileOption = exports.homeOption = void 0;
const commander_1 = require("commander");
const create_logger_1 = require("./create-logger");
exports.homeOption = new commander_1.Option('--home <path>', "Path to relayer's home (default: $HOME/.ibc-setup)");
const keyFileOption = (type) => new commander_1.Option('--key-file <path>', `Path to file to ${type === 'read' ? 'read mnemonic from' : 'write mnemonic to'}`);
exports.keyFileOption = keyFileOption;
exports.mnemonicOption = new commander_1.Option('--mnemonic <mnemonic>', 'BIP39 mnemonic');
exports.interactiveOption = new commander_1.Option('-i, --interactive', 'Read mnemonic from stdin');
exports.srcOption = new commander_1.Option('--src <chain>', 'Source chain from the registry');
exports.destOption = new commander_1.Option('--dest <chain>', 'Destination chain from the registry');
exports.chainOption = new commander_1.Option('--chain <chain>', 'Chain to run query against');
exports.srcTrust = new commander_1.Option('--src-trust <seconds>', 'Trusting period for source connection');
exports.destTrust = new commander_1.Option('--dest-trust <seconds>', 'Trusting period for destination connection');
exports.srcConnection = new commander_1.Option('--src-connection <connection>', 'Source connection id');
exports.destConnection = new commander_1.Option('--dest-connection <connection>', 'Destination connection id');
const srcPort = (descriptionPostfix = '') => new commander_1.Option('--src-port <port>', `Source port to create channel${descriptionPostfix}`);
exports.srcPort = srcPort;
const destPort = (descriptionPostfix = '') => new commander_1.Option('--dest-port <port>', `Destination port to create channel${descriptionPostfix}`);
exports.destPort = destPort;
const addLoggerOptionsTo = (command) => {
    return command
        .addOption(new commander_1.Option('--log-level <level>', `Set log level (default: ${create_logger_1.defaultLevel})`).choices(Object.keys(create_logger_1.levels)))
        .option('-v, --verbose', 'Alias for "--log-level verbose (default: false)"')
        .option('-q, --quiet', 'Alias for "--log-level error (default: false)"')
        .option('--log-file <path>', 'Path to file to write logs to')
        .option('--stack-trace', 'Print stack trace along with log messages (default: false)');
};
exports.addLoggerOptionsTo = addLoggerOptionsTo;
exports.helpOptions = ['-h, --help', 'Display help command'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZGVyLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmluYXJ5L2NvbW1hbmRlci1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUE4QztBQUU5QyxtREFBdUQ7QUFFMUMsUUFBQSxVQUFVLEdBQUcsSUFBSSxrQkFBTSxDQUNsQyxlQUFlLEVBQ2Ysb0RBQW9ELENBQ3JELENBQUM7QUFDSyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQXNCLEVBQUUsRUFBRSxDQUN0RCxJQUFJLGtCQUFNLENBQ1IsbUJBQW1CLEVBQ25CLG1CQUNFLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxtQkFDM0MsRUFBRSxDQUNILENBQUM7QUFOUyxRQUFBLGFBQWEsaUJBTXRCO0FBQ1MsUUFBQSxjQUFjLEdBQUcsSUFBSSxrQkFBTSxDQUN0Qyx1QkFBdUIsRUFDdkIsZ0JBQWdCLENBQ2pCLENBQUM7QUFDVyxRQUFBLGlCQUFpQixHQUFHLElBQUksa0JBQU0sQ0FDekMsbUJBQW1CLEVBQ25CLDBCQUEwQixDQUMzQixDQUFDO0FBQ1csUUFBQSxTQUFTLEdBQUcsSUFBSSxrQkFBTSxDQUNqQyxlQUFlLEVBQ2YsZ0NBQWdDLENBQ2pDLENBQUM7QUFDVyxRQUFBLFVBQVUsR0FBRyxJQUFJLGtCQUFNLENBQ2xDLGdCQUFnQixFQUNoQixxQ0FBcUMsQ0FDdEMsQ0FBQztBQUNXLFFBQUEsV0FBVyxHQUFHLElBQUksa0JBQU0sQ0FDbkMsaUJBQWlCLEVBQ2pCLDRCQUE0QixDQUM3QixDQUFDO0FBQ1csUUFBQSxRQUFRLEdBQUcsSUFBSSxrQkFBTSxDQUNoQyx1QkFBdUIsRUFDdkIsdUNBQXVDLENBQ3hDLENBQUM7QUFDVyxRQUFBLFNBQVMsR0FBRyxJQUFJLGtCQUFNLENBQ2pDLHdCQUF3QixFQUN4Qiw0Q0FBNEMsQ0FDN0MsQ0FBQztBQUNXLFFBQUEsYUFBYSxHQUFHLElBQUksa0JBQU0sQ0FDckMsK0JBQStCLEVBQy9CLHNCQUFzQixDQUN2QixDQUFDO0FBQ1csUUFBQSxjQUFjLEdBQUcsSUFBSSxrQkFBTSxDQUN0QyxnQ0FBZ0MsRUFDaEMsMkJBQTJCLENBQzVCLENBQUM7QUFDSyxNQUFNLE9BQU8sR0FBRyxDQUFDLGtCQUFrQixHQUFHLEVBQUUsRUFBRSxFQUFFLENBQ2pELElBQUksa0JBQU0sQ0FDUixtQkFBbUIsRUFDbkIsZ0NBQWdDLGtCQUFrQixFQUFFLENBQ3JELENBQUM7QUFKUyxRQUFBLE9BQU8sV0FJaEI7QUFDRyxNQUFNLFFBQVEsR0FBRyxDQUFDLGtCQUFrQixHQUFHLEVBQUUsRUFBRSxFQUFFLENBQ2xELElBQUksa0JBQU0sQ0FDUixvQkFBb0IsRUFDcEIscUNBQXFDLGtCQUFrQixFQUFFLENBQzFELENBQUM7QUFKUyxRQUFBLFFBQVEsWUFJakI7QUFFRyxNQUFNLGtCQUFrQixHQUFHLENBQUMsT0FBMEIsRUFBRSxFQUFFO0lBQy9ELE9BQU8sT0FBTztTQUNYLFNBQVMsQ0FDUixJQUFJLGtCQUFNLENBQ1IscUJBQXFCLEVBQ3JCLDJCQUEyQiw0QkFBWSxHQUFHLENBQzNDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQU0sQ0FBQyxDQUFDLENBQy9CO1NBQ0EsTUFBTSxDQUFDLGVBQWUsRUFBRSxrREFBa0QsQ0FBQztTQUMzRSxNQUFNLENBQUMsYUFBYSxFQUFFLGdEQUFnRCxDQUFDO1NBQ3ZFLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSwrQkFBK0IsQ0FBQztTQUM1RCxNQUFNLENBQ0wsZUFBZSxFQUNmLDREQUE0RCxDQUM3RCxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBZlcsUUFBQSxrQkFBa0Isc0JBZTdCO0FBRVcsUUFBQSxXQUFXLEdBQUcsQ0FBQyxZQUFZLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyJ9