"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.defaults = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@cosmjs/utils");
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const InvalidOptionError_1 = require("../../exceptions/InvalidOptionError");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
const setup_prometheus_1 = require("../setup-prometheus");
function resolveHeights({ scanFromSrc, scanFromDest, home }, logger) {
    if (!scanFromSrc && scanFromDest) {
        throw new InvalidOptionError_1.InvalidOptionError(`You have defined "scanFromDest" but no "scanFromSrc". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && !scanFromDest) {
        throw new InvalidOptionError_1.InvalidOptionError(`You have defined "scanFromSrc" but no "scanFromDest". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && scanFromDest) {
        logger.info('Use heights from the command line arguments.');
        return {
            packetHeightA: scanFromSrc,
            ackHeightA: scanFromSrc,
            packetHeightB: scanFromDest,
            ackHeightB: scanFromDest,
        };
    }
    const lastQueriedHeightsFilePath = path_1.default.join(home, constants_1.lastQueriedHeightsFile);
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const heights = require(lastQueriedHeightsFilePath);
        logger.info(`Use last queried heights from ${lastQueriedHeightsFilePath} file.`);
        return heights;
    }
    catch (_a) {
        logger.info('Scanning the entire history for packets... This may take some time.');
    }
    return null;
}
exports.defaults = {
    // check once per minute
    poll: 60,
    // once per day: 86400s
    maxAgeSrc: 86400,
    maxAgeDest: 86400,
    metricsPort: 8080,
};
function start(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            keyFile,
            app,
        });
        const src = resolve_option_1.resolveOption('src', { required: true })(flags.src, app === null || app === void 0 ? void 0 : app.src, process.env.RELAYER_SRC);
        const dest = resolve_option_1.resolveOption('dest', { required: true })(flags.dest, app === null || app === void 0 ? void 0 : app.dest, process.env.RELAYER_DEST);
        const srcConnection = resolve_option_1.resolveOption('srcConnection', { required: true })(flags.srcConnection, app === null || app === void 0 ? void 0 : app.srcConnection, process.env.RELAYER_SRC_CONNECTION);
        const destConnection = resolve_option_1.resolveOption('destConnection', { required: true })(flags.destConnection, app === null || app === void 0 ? void 0 : app.destConnection, process.env.RELAYER_DEST_CONNECTION);
        // TODO: add this in app.yaml, process.env
        const poll = resolve_option_1.resolveOption('poll', { required: true, integer: true })(flags.poll, exports.defaults.poll);
        const maxAgeSrc = resolve_option_1.resolveOption('maxAgeSrc', {
            required: true,
            integer: true,
        })(flags.maxAgeSrc, exports.defaults.maxAgeSrc);
        const maxAgeDest = resolve_option_1.resolveOption('maxAgeB', {
            required: true,
            integer: true,
        })(flags.maxAgeDest, exports.defaults.maxAgeDest);
        const scanFromSrc = resolve_option_1.resolveOption('scanFromSrc', { integer: true })(flags.scanFromSrc, process.env.RELAYER_SCAN_FROM_SRC);
        const scanFromDest = resolve_option_1.resolveOption('scanFromDest', { integer: true })(flags.scanFromDest, process.env.RELAYER_SCAN_FROM_DEST);
        const enableMetrics = flags.enableMetrics ||
            Boolean(process.env.RELAYER_ENABLE_METRICS) ||
            (app === null || app === void 0 ? void 0 : app.enableMetrics) ||
            false;
        const metricsPort = resolve_option_1.resolveOption('metricsPort', {
            integer: true,
            required: true,
        })(flags.metricsPort, process.env.RELAYER_METRICS_PORT, app === null || app === void 0 ? void 0 : app.metricsPort, exports.defaults.metricsPort);
        const heights = resolveHeights({ scanFromSrc, scanFromDest, home }, logger);
        // FIXME: any env variable for this?
        const once = flags.once;
        const options = {
            src,
            dest,
            home,
            mnemonic,
            srcConnection,
            destConnection,
            poll,
            maxAgeSrc,
            maxAgeDest,
            once,
            heights,
            enableMetrics,
            metricsPort,
        };
        yield run(options, logger);
    });
}
exports.start = start;
function run(options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const metrics = setup_prometheus_1.setupPrometheus({
            enabled: options.enableMetrics,
            port: options.metricsPort,
            logger,
        });
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const { chains } = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const srcChain = chains[options.src];
        if (!srcChain) {
            throw new Error('src chain not found in registry');
        }
        const destChain = chains[options.dest];
        if (!destChain) {
            throw new Error('dest chain not found in registry');
        }
        const nodeA = yield signing_client_1.signingClient(srcChain, options.mnemonic, logger.child({ label: srcChain.chain_id }));
        const nodeB = yield signing_client_1.signingClient(destChain, options.mnemonic, logger.child({ label: destChain.chain_id }));
        const link = yield link_1.Link.createWithExistingConnections(nodeA, nodeB, options.srcConnection, options.destConnection, logger);
        yield relayerLoop(link, options, logger, metrics);
    });
}
function relayerLoop(link, options, logger, metrics) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let nextRelay = (_a = options.heights) !== null && _a !== void 0 ? _a : {};
        const lastQueriedHeightsFilePath = path_1.default.join(options.home, constants_1.lastQueriedHeightsFile);
        const done = false;
        while (!done) {
            try {
                // TODO: make timeout windows more configurable
                nextRelay = yield link.checkAndRelayPacketsAndAcks(nextRelay, 2, 6);
                fs_1.default.writeFileSync(lastQueriedHeightsFilePath, JSON.stringify(nextRelay, null, 2));
                // ensure the headers are up to date (only submits if old and we didn't just update them above)
                logger.info('Ensuring clients are not stale');
                yield link.updateClientIfStale('A', options.maxAgeDest);
                yield link.updateClientIfStale('B', options.maxAgeSrc);
            }
            catch (e) {
                logger.error(`Caught error: `, e);
            }
            if (options.once) {
                logger.info('Quitting after one run (--once set)');
                return;
            }
            // sleep until the next step
            logger.info(`Sleeping ${options.poll} seconds...`);
            yield utils_1.sleep(options.poll * 1000);
            logger.info('... waking up and checking for packets!');
            (_b = metrics === null || metrics === void 0 ? void 0 : metrics.loopTotal) === null || _b === void 0 ? void 0 : _b.inc();
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2NvbW1hbmRzL3N0YXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQixnREFBd0I7QUFFeEIseUNBQXNDO0FBRXRDLDRDQUF5QztBQUV6QywrQ0FBdUU7QUFFdkUsNEVBQXlFO0FBRXpFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQUMzRCwwREFBK0Q7QUFRL0QsU0FBUyxjQUFjLENBQ3JCLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQXdCLEVBQ3pELE1BQWM7SUFFZCxJQUFJLENBQUMsV0FBVyxJQUFJLFlBQVksRUFBRTtRQUNoQyxNQUFNLElBQUksdUNBQWtCLENBQzFCLHNIQUFzSCxDQUN2SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLFdBQVcsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNoQyxNQUFNLElBQUksdUNBQWtCLENBQzFCLHNIQUFzSCxDQUN2SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLFdBQVcsSUFBSSxZQUFZLEVBQUU7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBQzVELE9BQU87WUFDTCxhQUFhLEVBQUUsV0FBVztZQUMxQixVQUFVLEVBQUUsV0FBVztZQUN2QixhQUFhLEVBQUUsWUFBWTtZQUMzQixVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDO0tBQ0g7SUFFRCxNQUFNLDBCQUEwQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGtDQUFzQixDQUFDLENBQUM7SUFDM0UsSUFBSTtRQUNGLDhEQUE4RDtRQUM5RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQztR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