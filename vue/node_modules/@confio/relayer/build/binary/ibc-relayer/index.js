#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const commander_options_1 = require("../commander-options");
const logger_with_error_boundary_1 = require("../utils/logger-with-error-boundary");
const start_1 = require("./commands/start");
const program = new commander_1.Command();
program.helpOption(...commander_options_1.helpOptions);
program.addHelpCommand(false);
program.description('Typescript implementation of an IBC relayer');
const startCommand = program
    .command('start')
    .description('Relay all packets over all channels on pre-configured connection')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.srcOption)
    .addOption(commander_options_1.destOption)
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.keyFileOption('read'))
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.srcConnection)
    .addOption(commander_options_1.destConnection)
    .option('--enable-metrics', 'Enable Prometheus metrics collection and GET /metrics endpoint')
    .option(`--metrics-port <port>', 'Specify port for GET /metrics http server (default: ${start_1.defaults.metricsPort})`)
    .option('--poll <frequency>', `How many seconds we sleep between checking for packets (default: ${start_1.defaults.poll})`)
    .option('--max-age-src <seconds>', `How old can the client on src chain be, before we update it (default: ${start_1.defaults.maxAgeSrc})`)
    .option('--max-age-dest <seconds>', `How old can the client on dest chain be, before we update it (default: ${start_1.defaults.maxAgeDest})`)
    .option('--scan-from-src <height>')
    .option('--scan-from-dest <height>')
    // note: once is designed for debugging and unit tests
    .option('--once', 'Relay pending packets and quit, no polling')
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(start_1.start));
commander_options_1.addLoggerOptionsTo(startCommand);
program.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHlDQUFvQztBQUVwQyw0REFXOEI7QUFDOUIsb0ZBQThFO0FBRTlFLDRDQUFvRTtBQUVwRSxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFPLEVBQUUsQ0FBQztBQUU5QixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsK0JBQVcsQ0FBQyxDQUFDO0FBQ25DLE9BQU8sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFOUIsT0FBTyxDQUFDLFdBQVcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0FBRW5FLE1BQU0sWUFBWSxHQUFHLE9BQU87S0FDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQztLQUNoQixXQUFXLENBQ1Ysa0VBQWtFLENBQ25FO0tBQ0EsU0FBUyxDQUFDLDhCQUFVLENBQUM7S0FDckIsU0FBUyxDQUFDLDZCQUFTLENBQUM7S0FDcEIsU0FBUyxDQUFDLDhCQUFVLENBQUM7S0FDckIsU0FBUyxDQUFDLHFDQUFpQixDQUFDO0tBQzVCLFNBQVMsQ0FBQyxpQ0FBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2hDLFNBQVMsQ0FBQyxrQ0FBYyxDQUFDO0tBQ3pCLFNBQVMsQ0FBQyxpQ0FBYSxDQUFDO0tBQ3hCLFNBQVMsQ0FBQyxrQ0FBYyxDQUFDO0tBQ3pCLE1BQU0sQ0FDTCxrQkFBa0IsRUFDbEIsZ0VBQWdFLENBQ2pFO0tBQ0EsTUFBTSxDQUNMLGdGQUFnRixnQkFBYSxDQUFDLFdBQVcsR0FBRyxDQUM3RztLQUNBLE1BQU0sQ0FDTCxvQkFBb0IsRUFDcEIsb0VBQW9FLGdCQUFhLENBQUMsSUFBSSxHQUFHLENBQzFGO0tBQ0EsTUFBTSxDQUNMLHlCQUF5QixFQUN6Qix5RUFBeUUsZ0JBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FDcEc7S0FDQSxNQUFNLENBQ0wsMEJBQTBCLEVBQzFCLDBFQUEwRSxnQkFBYSxDQUFDLFVBQVUsR0FBRyxDQUN0RztLQUNBLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztLQUNsQyxNQUFNLENBQUMsMkJBQTJCLENBQUM7SUFDcEMsc0RBQXNEO0tBQ3JELE1BQU0sQ0FBQyxRQUFRLEVBQUUsNENBQTRDLENBQUM7S0FDOUQsTUFBTSxDQUFDLG9EQUF1QixDQUFDLGFBQUssQ0FBQyxDQUFDLENBQUM7QUFFMUMsc0NBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMifQ==