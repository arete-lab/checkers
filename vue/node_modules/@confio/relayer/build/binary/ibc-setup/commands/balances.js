"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.balances = void 0;
const path_1 = __importDefault(require("path"));
const stargate_1 = require("@cosmjs/stargate");
const constants_1 = require("../../constants");
const borderless_table_1 = require("../../utils/borderless-table");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
const keys_list_1 = require("./keys-list");
function balances(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        });
        const options = {
            home,
            mnemonic,
        };
        yield run(options, logger);
    });
}
exports.balances = balances;
function run(options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const addresses = yield keys_list_1.getAddresses(registry.chains, options.mnemonic);
        const balances = (yield Promise.allSettled(addresses.map(([chain, data, address]) => __awaiter(this, void 0, void 0, function* () {
            const client = yield signing_client_1.signingClient(data, options.mnemonic, logger.child({ label: chain }));
            const gasPrice = stargate_1.GasPrice.fromString(data.gas_price);
            const coin = yield client.query.bank.balance(address, gasPrice.denom);
            return [chain, coin];
        }))))
            .filter((result) => {
            if (result.status === 'rejected') {
                logger.error(result.reason);
                return false;
            }
            return true;
        })
            .map((result) => result.value)
            .filter(([, coin]) => coin.amount !== '0')
            .map(([chain, coin]) => [chain, `${coin.amount}${coin.denom}`]);
        if (!balances.length) {
            console.log('No funds found for default denomination on any chain.');
            return;
        }
        console.log(borderless_table_1.borderlessTable([['CHAIN', 'AMOUNT'], ...balances]));
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9iYWxhbmNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsK0NBQTRDO0FBRzVDLCtDQUErQztBQUUvQyxtRUFBK0Q7QUFDL0QsNkVBQXVFO0FBQ3ZFLHVGQUFpRjtBQUNqRix3RkFBbUY7QUFDbkYsZ0dBQTBGO0FBQzFGLGdHQUEyRjtBQUMzRiwrREFBMkQ7QUFFM0QsMkNBQTJEO0FBRTNELFNBQXNCLFFBQVEsQ0FBQyxLQUFZLEVBQUUsTUFBYzs7UUFDekQsTUFBTSxJQUFJLEdBQUcsdUNBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsTUFBTSxHQUFHLEdBQUcsMENBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxPQUFPLEdBQUcsOENBQW9CLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLE1BQU0sUUFBUSxHQUFHLE1BQU0sK0NBQXFCLENBQUM7WUFDM0MsZUFBZSxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQ2xDLFlBQVksRUFBRSxLQUFLLENBQUMsUUFBUTtZQUM1QixPQUFPO1lBQ1AsR0FBRztTQUNKLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxHQUFZO1lBQ3ZCLElBQUk7WUFDSixRQUFRO1NBQ1QsQ0FBQztRQUVGLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQUE7QUFqQkQsNEJBaUJDO0FBRUQsU0FBc0IsR0FBRyxDQUFDLE9BQWdCLEVBQUUsTUFBYzs7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsd0JBQVksQ0FBQyxDQUFDO1FBQy9ELE1BQU0sUUFBUSxHQUFHLG9EQUF1QixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFM0QsTUFBTSxTQUFTLEdBQUcsTUFBTSx3QkFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhFLE1BQU0sUUFBUSxHQUFHLENBQ2YsTUFBTSxPQUFPLENBQUMsVUFBVSxDQUN0QixTQUFTLENBQUMsR0FBRyxDQUFDLENBQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUU7WUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSw4QkFBYSxDQUNoQyxJQUFJLEVBQ0osT0FBTyxDQUFDLFFBQVEsRUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUMvQixDQUFDO1lBQ0YsTUFBTSxRQUFRLEdBQUcsbUJBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEUsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUEsQ0FBQyxDQUNILENBQ0Y7YUFDRSxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQW9ELEVBQUU7WUFDbkUsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtnQkFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzVCLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQzthQUNELEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUM3QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDO2FBQ3pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVsRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7WUFDckUsT0FBTztTQUNSO1FBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBZSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztDQUFBO0FBdENELGtCQXNDQyJ9