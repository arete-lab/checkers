"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.channel = exports.defaults = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const channel_1 = require("../../../codec/ibc/core/channel/v1/channel");
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const indent_1 = require("../../utils/indent");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
exports.defaults = {
    version: 'ics20-1',
};
function channel(flags, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        if (!app) {
            throw new Error(`${constants_1.appFile} not found at ${home}`);
        }
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        });
        const src = resolve_option_1.resolveOption('src', { required: true })(app.src);
        const dest = resolve_option_1.resolveOption('dest', { required: true })(app.dest);
        const srcConnection = resolve_option_1.resolveOption('srcConnection', { required: true })(flags.srcConnection, app.srcConnection, process.env.RELAYER_SRC_CONNECTION);
        const destConnection = resolve_option_1.resolveOption('destConnection', { required: true })(flags.destConnection, app.destConnection, process.env.RELAYER_DEST_CONNECTION);
        const srcPort = resolve_option_1.resolveOption('srcPort', { required: true })(flags.srcPort, process.env.RELAYER_SRC_PORT);
        const destPort = resolve_option_1.resolveOption('destPort', { required: true })(flags.destPort, process.env.RELAYER_DEST_PORT);
        const version = (_a = resolve_option_1.resolveOption('version')(flags.version, process.env.RELAYER_VERSION)) !== null && _a !== void 0 ? _a : exports.defaults.version;
        const options = {
            home,
            mnemonic,
            src,
            dest,
            srcConnection,
            destConnection,
            srcPort,
            destPort,
            version,
            ordered: flags.ordered,
        };
        yield run(options, logger);
    });
}
exports.channel = channel;
function run(options, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const srcChain = registry.chains[options.src];
        if (!srcChain) {
            throw new Error(`src channel "${options.src}" not found in registry`);
        }
        const destChain = registry.chains[options.dest];
        if (!destChain) {
            throw new Error(`dest channel "${options.dest}" not found in registry`);
        }
        const nodeA = yield signing_client_1.signingClient(srcChain, options.mnemonic, logger.child({ label: srcChain.chain_id }));
        const nodeB = yield signing_client_1.signingClient(destChain, options.mnemonic, logger.child({ label: destChain.chain_id }));
        const link = yield link_1.Link.createWithExistingConnections(nodeA, nodeB, options.srcConnection, options.destConnection, logger);
        const ordering = options.ordered
            ? channel_1.Order.ORDER_ORDERED
            : channel_1.Order.ORDER_UNORDERED;
        const channel = yield link.createChannel('A', options.srcPort, options.destPort, ordering, options.version);
        const output = [
            'Created channel:',
            ...indent_1.indent([
                `${srcChain.chain_id}: ${channel.src.portId}/${channel.src.channelId} (${link.endA.connectionID})`,
                `${destChain.chain_id}: ${channel.dest.portId}/${channel.dest.channelId} (${link.endB.connectionID})`,
            ]),
        ].join(os_1.default.EOL);
        console.log(output);
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2NoYW5uZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4Qix3RUFBbUU7QUFDbkUsNENBQXlDO0FBQ3pDLCtDQUF3RDtBQUV4RCwrQ0FBNEM7QUFDNUMsNkVBQXVFO0FBQ3ZFLHVGQUFpRjtBQUNqRix1RUFBbUU7QUFDbkUsd0ZBQW1GO0FBQ25GLGdHQUEwRjtBQUMxRixnR0FBMkY7QUFDM0YsK0RBQTJEO0FBNEI5QyxRQUFBLFFBQVEsR0FBRztJQUN0QixPQUFPLEVBQUUsU0FBUztDQUNuQixDQUFDO0FBRUYsU0FBc0IsT0FBTyxDQUFDLEtBQVksRUFBRSxNQUFjOzs7UUFDeEQsTUFBTSxJQUFJLEdBQUcsdUNBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsTUFBTSxHQUFHLEdBQUcsMENBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxtQkFBTyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtRQUVELE1BQU0sT0FBTyxHQUFHLDhDQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRSxNQUFNLFFBQVEsR0FBRyxNQUFNLCtDQUFxQixDQUFDO1lBQzNDLGVBQWUsRUFBRSxLQUFLLENBQUMsV0FBVztZQUNsQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDNUIsT0FBTztZQUNQLEdBQUc7U0FDSixDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyw4QkFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5RCxNQUFNLElBQUksR0FBRyw4QkFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRSxNQUFNLGFBQWEsR0FBRyw4QkFBYSxDQUFDLGVBQWUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUN0RSxLQUFLLENBQUMsYUFBYSxFQUNuQixHQUFHLENBQUMsYUFBYSxFQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUNuQyxDQUFDO1FBQ0YsTUFBTSxjQUFjLEdBQUcsOEJBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUN4RSxLQUFLLENBQUMsY0FBYyxFQUNwQixHQUFHLENBQUMsY0FBYyxFQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUNwQyxDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsOEJBQWEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDMUQsS0FBSyxDQUFDLE9BQU8sRUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUM3QixDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsOEJBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDNUQsS0FBSyxDQUFDLFFBQVEsRUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUM5QixDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQ1gsTUFBQSw4QkFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsbUNBQ3BFLGdCQUFRLENBQUMsT0FBTyxDQUFDO1FBRW5CLE1BQU0sT0FBTyxHQUFZO1lBQ3ZCLElBQUk7WUFDSixRQUFRO1lBQ1IsR0FBRztZQUNILElBQUk7WUFDSixhQUFhO1lBQ2IsY0FBYztZQUNkLE9BQU87WUFDUCxRQUFRO1lBQ1IsT0FBTztZQUNQLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztTQUN2QixDQUFDO1FBRUYsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDOztDQUM1QjtBQXBERCwwQkFvREM7QUFFRCxTQUFzQixHQUFHLENBQUMsT0FBZ0IsRUFBRSxNQUFjOztRQUN4RCxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSx3QkFBWSxDQUFDLENBQUM7UUFDL0QsTUFBTSxRQUFRLEdBQUcsb0RBQXVCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsT0FBTyxDQUFDLEdBQUcseUJBQXlCLENBQUMsQ0FBQztTQUN2RTtRQUNELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixPQUFPLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSw4QkFBYSxDQUMvQixRQUFRLEVBQ1IsT0FBTyxDQUFDLFFBQVEsRUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FDM0MsQ0FBQztRQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sOEJBQWEsQ0FDL0IsU0FBUyxFQUNULE9BQU8sQ0FBQyxRQUFRLEVBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQzVDLENBQUM7UUFFRixNQUFNLElBQUksR0FBRyxNQUFNLFdBQUksQ0FBQyw2QkFBNkIsQ0FDbkQsS0FBSyxFQUNMLEtBQUssRUFDTCxPQUFPLENBQUMsYUFBYSxFQUNyQixPQUFPLENBQUMsY0FBYyxFQUN0QixNQUFNLENBQ1AsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPO1lBQzlCLENBQUMsQ0FBQyxlQUFLLENBQUMsYUFBYTtZQUNyQixDQUFDLENBQUMsZUFBSyxDQUFDLGVBQWUsQ0FBQztRQUUxQixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQ3RDLEdBQUcsRUFDSCxPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxRQUFRLEVBQ2hCLFFBQVEsRUFDUixPQUFPLENBQUMsT0FBTyxDQUNoQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUc7WUFDYixrQkFBa0I7WUFDbEIsR0FBRyxlQUFNLENBQUM7Z0JBQ1IsR0FBRyxRQUFRLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHO2dCQUNsRyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUc7YUFDdEcsQ0FBQztTQUNILENBQUMsSUFBSSxDQUFDLFlBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVmLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUFBO0FBcERELGtCQW9EQyJ9