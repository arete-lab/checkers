"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.channelStateAsText = exports.channels = void 0;
const path_1 = __importDefault(require("path"));
const channel_1 = require("../../../codec/ibc/core/channel/v1/channel");
const constants_1 = require("../../constants");
const borderless_table_1 = require("../../utils/borderless-table");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
function channels(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const chain = resolve_option_1.resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
        const port = resolve_option_1.resolveOption('port')(flags.port, process.env.RELAYER_PORT);
        const connection = resolve_option_1.resolveOption('connection')(flags.connection, process.env.RELAYER_CONNECTION);
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        }, true // mnemonic is optional
        );
        const options = {
            home,
            chain,
            mnemonic,
            port,
            connection,
        };
        yield run(options, logger);
    });
}
exports.channels = channels;
function channelStateAsText(state) {
    switch (state) {
        case channel_1.State.STATE_CLOSED:
            return 'Closed';
        case channel_1.State.STATE_INIT:
            return 'Init';
        case channel_1.State.STATE_OPEN:
            return 'Open';
        case channel_1.State.STATE_TRYOPEN:
            return 'Tryopen';
        case channel_1.State.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case channel_1.State.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
exports.channelStateAsText = channelStateAsText;
function run(options, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const chain = registry.chains[options.chain];
        if (!chain) {
            throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
        }
        const mnemonic = (_a = options.mnemonic) !== null && _a !== void 0 ? _a : generate_mnemonic_1.generateMnemonic();
        const client = yield signing_client_1.signingClient(chain, mnemonic, logger);
        const { channels: allChannels } = yield client.query.ibc.channel.allChannels();
        const channels = allChannels
            .filter((channel) => (options.port ? channel.portId === options.port : true) // don't filter if port is not specified
        )
            .filter((channel) => options.connection
            ? channel.connectionHops.includes(options.connection)
            : true // don't filter if connection is not specified
        )
            .map((channel) => [
            channel.channelId,
            channel.portId,
            channel.connectionHops.join(', '),
            channelStateAsText(channel.state),
        ]);
        if (!channels.length) {
            const conditionalPortInfo = options.port
                ? ` on port "${options.port}"`
                : '';
            const conditionalConnectionInfo = options.connection
                ? ` with connection "${options.connection}"`
                : '';
            console.log(`No channels found for chain "${options.chain}"${conditionalPortInfo}${conditionalConnectionInfo}.`);
            return;
        }
        const output = borderless_table_1.borderlessTable([
            ['CHANNEL_ID', 'PORT', 'CONNECTION(S)', 'STATE'],
            ...channels,
        ]);
        console.log(output);
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsd0VBQW1GO0FBQ25GLCtDQUErQztBQUUvQyxtRUFBK0Q7QUFDL0QscUVBQWlFO0FBQ2pFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQW9CM0QsU0FBc0IsUUFBUSxDQUFDLEtBQVksRUFBRSxNQUFjOztRQUN6RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxNQUFNLE9BQU8sR0FBRyw4Q0FBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUUsTUFBTSxLQUFLLEdBQUcsOEJBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdEQsS0FBSyxDQUFDLEtBQUssRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztRQUNGLE1BQU0sSUFBSSxHQUFHLDhCQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sVUFBVSxHQUFHLDhCQUFhLENBQUMsWUFBWSxDQUFDLENBQzVDLEtBQUssQ0FBQyxVQUFVLEVBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQy9C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