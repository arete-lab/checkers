"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.connect = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
function connect(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        if (!app) {
            throw new Error(`${constants_1.appFile} not found at ${home}`);
        }
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        });
        const src = resolve_option_1.resolveOption('src', { required: true })(app.src);
        const dest = resolve_option_1.resolveOption('dest', { required: true })(app.dest);
        const srcTrust = resolve_option_1.resolveOption('srcTrust', { integer: true })(flags.srcTrust, process.env.RELAYER_SRC_TRUST);
        const destTrust = resolve_option_1.resolveOption('destTrust', { integer: true })(flags.destTrust, process.env.RELAYER_DEST_TRUST);
        const options = {
            home,
            mnemonic,
            src,
            dest,
            srcTrust,
            destTrust,
        };
        yield run(options, app, logger);
    });
}
exports.connect = connect;
function run(options, app, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const srcChain = registry.chains[options.src];
        if (!srcChain) {
            throw new Error(`src channel  "${options.src}" not found in registry`);
        }
        const destChain = registry.chains[options.dest];
        if (!destChain) {
            throw new Error(`dest channel  "${options.dest}" not found in registry`);
        }
        const nodeA = yield signing_client_1.signingClient(srcChain, options.mnemonic, logger);
        const nodeB = yield signing_client_1.signingClient(destChain, options.mnemonic, logger);
        const link = yield link_1.Link.createWithNewConnections(nodeA, nodeB, logger, options.srcTrust, options.destTrust);
        const appYaml = js_yaml_1.default.dump(Object.assign(Object.assign({}, app), { srcConnection: link.endA.connectionID, destConnection: link.endB.connectionID }), {
            lineWidth: 1000,
        });
        fs_1.default.writeFileSync(path_1.default.join(options.home, constants_1.appFile), appYaml, {
            encoding: 'utf-8',
        });
        console.log(`Created connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2Nvbm5lY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4QixzREFBMkI7QUFFM0IsNENBQXlDO0FBQ3pDLCtDQUF3RDtBQUd4RCw2RUFBdUU7QUFDdkUsdUZBQWlGO0FBQ2pGLHVFQUFtRTtBQUNuRSx3RkFBbUY7QUFDbkYsZ0dBQTBGO0FBQzFGLGdHQUEyRjtBQUMzRiwrREFBMkQ7QUFvQjNELFNBQXNCLE9BQU8sQ0FBQyxLQUFZLEVBQUUsTUFBYzs7UUFDeEQsTUFBTSxJQUFJLEdBQUcsdUNBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDekQsTUFBTSxHQUFHLEdBQUcsMENBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxtQkFBTyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtRQUVELE1BQU0sT0FBTyxHQUFHLDhDQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRSxNQUFNLFFBQVEsR0FBRyxNQUFNLCtDQUFxQixDQUFDO1lBQzNDLGVBQWUsRUFBRSxLQUFLLENBQUMsV0FBVztZQUNsQyxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVE7WUFDNUIsT0FBTztZQUNQLEdBQUc7U0FDSixDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsR0FBRyw4QkFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5RCxN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