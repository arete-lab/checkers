"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.connections = void 0;
const path_1 = __importDefault(require("path"));
const connection_1 = require("../../../codec/ibc/core/connection/v1/connection");
const constants_1 = require("../../constants");
const borderless_table_1 = require("../../utils/borderless-table");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
function connections(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const chain = resolve_option_1.resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        }, true // mnemonic is optional
        );
        const options = {
            home,
            chain,
            mnemonic,
        };
        yield run(options, logger);
    });
}
exports.connections = connections;
function connectionStateAsText(state) {
    switch (state) {
        case connection_1.State.STATE_INIT:
            return 'Init';
        case connection_1.State.STATE_OPEN:
            return 'Open';
        case connection_1.State.STATE_TRYOPEN:
            return 'Tryopen';
        case connection_1.State.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case connection_1.State.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
function run(options, logger) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const chain = registry.chains[options.chain];
        if (!chain) {
            throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
        }
        const mnemonic = (_a = options.mnemonic) !== null && _a !== void 0 ? _a : generate_mnemonic_1.generateMnemonic();
        const client = yield signing_client_1.signingClient(chain, mnemonic, logger);
        const { connections: allConnections } = yield client.query.ibc.connection.allConnections();
        const connections = allConnections.map((connection) => [
            connection.id,
            connection.clientId,
            connection.delayPeriod.toString(10),
            connectionStateAsText(connection.state),
        ]);
        if (!connections.length) {
            console.log(`No connections found for chain "${options.chain}".`);
            return;
        }
        const output = borderless_table_1.borderlessTable([
            ['CONNECTION_ID', 'CLIENT_ID', 'DELAY', 'STATE'],
            ...connections,
        ]);
        console.log(output);
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jb25uZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxnREFBd0I7QUFFeEIsaUZBQTRGO0FBRTVGLCtDQUErQztBQUUvQyxtRUFBK0Q7QUFDL0QscUVBQWlFO0FBQ2pFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQWdCM0QsU0FBc0IsV0FBVyxDQUFDLEtBQVksRUFBRSxNQUFjOztRQUM1RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxNQUFNLE9BQU8sR0FBRyw4Q0FBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUUsTUFBTSxLQUFLLEdBQUcsOEJBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdEQsS0FBSyxDQUFDLEtBQUssRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sK0NBQXFCLENBQzFDO1lBQ0UsZUFBZSxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQ2xDLFlBQVksRUFBRSxLQUFLLENBQUMsUUFBUTtZQUM1QixPQUFPO1lBQ1AsR0FBRztTQUNKLEVBQ0QsSUFBSSxDQUFDLHVCQUF1QjtTQUM3QixDQUFDO1FBRUYsTUFBTSxPQUFPLEdBQVk7WUFDdkIsSUFBSTtZQUNKLEtBQUs7WUFDTCxRQUFRO1NBQ1QsQ0FBQztRQUVGLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQUE7QUExQkQsa0NBMEJDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxLQUFzQjtJQUNuRCxRQUFRLEtBQUssRUFBRTtRQUNiLEtBQUssa0JBQWUsQ0FBQyxVQUFVO1lBQzdCLE9BQU8sTUFBTSxDQUFDO1FBRWhCLEtBQUssa0JBQWUsQ0FBQyxVQUFVO1lBQzdCLE9BQU8sTUFBTSxDQUFDO1FBRWhCLEtBQUssa0JBQWUsQ0FBQyxhQUFhO1lBQ2hDLE9BQU8sU0FBUyxDQUFDO1FBRW5CLEtBQUssa0JBQWUsQ0FBQywrQkFBK0I7WUFDbEQsT0FBTywwQkFBMEIsQ0FBQztRQUVwQyxLQUFLLGtCQUFlLENBQUMsWUFBWSxDQUFDO1FBQ2xDO1lBQ0UsT0FBTyxjQUFjLENBQUM7S0FDekI7QUFDSCxDQUFDO0FBRUQsU0FBc0IsR0FBRyxDQUFDLE9BQWdCLEVBQUUsTUFBYzs7O1FBQ3hELE1BQU0sZ0JBQWdCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLHdCQUFZLENBQUMsQ0FBQztRQUMvRCxNQUFNLFFBQVEsR0FBRyxvREFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTNELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLFNBQVMsT0FBTyxDQUFDLEtBQUssaUJBQWlCLGdCQUFnQixHQUFHLENBQUMsQ0FBQztTQUM3RTtRQUVELE1BQU0sUUFBUSxHQUFHLE1BQUEsT0FBTyxDQUFDLFFBQVEsbUNBQUksb0NBQWdCLEVBQUUsQ0FBQztRQUV4RCxNQUFNLE1BQU0sR0FBRyxNQUFNLDhCQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU1RCxNQUFNLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxHQUNuQyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVyRCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBZ0MsRUFBRSxFQUFFLENBQUM7WUFDM0UsVUFBVSxDQUFDLEVBQUU7WUFDYixVQUFVLENBQUMsUUFBUTtZQUNuQixVQUFVLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDbkMscUJBQXFCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztTQUN4QyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLG1DQUFtQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUVsRSxPQUFPO1NBQ1I7UUFFRCxNQUFNLE1BQU0sR0FBRyxrQ0FBZSxDQUFDO1lBQzdCLENBQUMsZUFBZSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDO1lBQ2hELEdBQUcsV0FBVztTQUNmLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7O0NBQ3JCO0FBbkNELGtCQW1DQyJ9