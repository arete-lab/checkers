"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.ics20 = exports.defaults = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const channel_1 = require("../../../codec/ibc/core/channel/v1/channel");
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const indent_1 = require("../../utils/indent");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
exports.defaults = {
    port: 'transfer',
};
function resolveConnections({ srcConnection, destConnection, }) {
    if (!srcConnection && destConnection) {
        throw new Error(`You have defined "destConnection" but no "srcConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && !destConnection) {
        throw new Error(`You have defined "srcConnection" but no "destConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && destConnection) {
        return {
            src: srcConnection,
            dest: destConnection,
        };
    }
    return null;
}
function ics20(flags, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
        const app = load_and_validate_app_1.loadAndValidateApp(home);
        if (!app) {
            throw new Error(`${constants_1.appFile} not found at ${home}`);
        }
        const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
        const mnemonic = yield resolve_mnemonic_option_1.resolveMnemonicOption({
            interactiveFlag: flags.interactive,
            mnemonicFlag: flags.mnemonic,
            keyFile,
            app,
        });
        const src = resolve_option_1.resolveOption('src', { required: true })(app.src);
        const dest = resolve_option_1.resolveOption('dest', { required: true })(app.dest);
        // we apply default ports later, once we have the registry
        const srcPort = resolve_option_1.resolveOption('srcPort')(flags.srcPort, process.env.RELAYER_SRC_PORT);
        const destPort = resolve_option_1.resolveOption('destPort')(flags.destPort, process.env.RELAYER_DEST_PORT);
        const srcTrust = resolve_option_1.resolveOption('srcTrust', { integer: true })(flags.srcTrust, process.env.RELAYER_SRC_TRUST);
        const destTrust = resolve_option_1.resolveOption('destTrust', { integer: true })(flags.destTrust, process.env.RELAYER_DEST_TRUST);
        const connections = resolveConnections(app);
        yield run({
            src,
            dest,
            home,
            mnemonic,
            srcPort,
            destPort,
            connections,
            srcTrust,
            destTrust,
        }, app, logger);
    });
}
exports.ics20 = ics20;
function resolveLink(nodeA, nodeB, { connections, srcTrust, destTrust }, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        if (connections) {
            const link = yield link_1.Link.createWithExistingConnections(nodeA, nodeB, connections.src, connections.dest, logger);
            console.log(`Used existing connections [${link.endA.chainId()}, ${link.endA.connectionID}, ${link.endA.clientID}] <=> [${link.endB.chainId()}, ${link.endB.connectionID}, ${link.endB.clientID}]`);
            return link;
        }
        const link = yield link_1.Link.createWithNewConnections(nodeA, nodeB, logger, srcTrust, destTrust);
        console.log(`Created connections [${link.endA.chainId()}, ${link.endA.connectionID}, ${link.endA.clientID}] <=> [${link.endB.chainId()}, ${link.endB.connectionID}, ${link.endB.clientID}]`);
        return link;
    });
}
function run(options, app, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        const { chains } = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const srcChain = chains[options.src];
        if (!srcChain) {
            throw new Error('src chain not found in registry');
        }
        const destChain = chains[options.dest];
        if (!destChain) {
            throw new Error('dest chain not found in registry');
        }
        const ordering = channel_1.Order.ORDER_UNORDERED;
        const version = 'ics20-1';
        const nodeA = yield signing_client_1.signingClient(srcChain, options.mnemonic, logger);
        const nodeB = yield signing_client_1.signingClient(destChain, options.mnemonic, logger);
        const link = yield resolveLink(nodeA, nodeB, options, logger);
        const srcConnection = link.endA.connectionID;
        const destConnection = link.endB.connectionID;
        const appFilePath = path_1.default.join(options.home, constants_1.appFile);
        const appYaml = js_yaml_1.default.dump(Object.assign(Object.assign({}, app), { srcConnection,
            destConnection }), {
            lineWidth: 1000,
        });
        fs_1.default.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
        // provide default port, either from registry or global default
        const srcPort = resolve_option_1.resolveOption('src-port', { required: true })(options.srcPort, srcChain.ics20_port, exports.defaults.port);
        const destPort = resolve_option_1.resolveOption('dest-port', { required: true })(options.destPort, destChain.ics20_port, exports.defaults.port);
        const channel = yield link.createChannel('A', srcPort, destPort, ordering, version);
        const output = [
            'Created channel:',
            ...indent_1.indent([
                `${srcChain.chain_id}: ${channel.src.portId}/${channel.src.channelId} (${link.endA.connectionID})`,
                `${destChain.chain_id}: ${channel.dest.portId}/${channel.dest.channelId} (${link.endB.connectionID})`,
            ]),
        ].join(os_1.default.EOL);
        console.log(output);
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzMjAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9pY3MyMC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4QixzREFBMkI7QUFFM0Isd0VBQW1FO0FBRW5FLDRDQUF5QztBQUN6QywrQ0FBd0Q7QUFHeEQsK0NBQTRDO0FBQzVDLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQThCOUMsUUFBQSxRQUFRLEdBQUc7SUFDdEIsSUFBSSxFQUFFLFVBQVU7Q0FDakIsQ0FBQztBQUVGLFNBQVMsa0JBQWtCLENBQUMsRUFDMUIsYUFBYSxFQUNiLGNBQWMsR0FDSjtJQUNWLElBQUksQ0FBQyxhQUFhLElBQUksY0FBYyxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0hBQXNILENBQ3ZILENBQUM7S0FDSDtJQUVELElBQUksYUFBYSxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0hBQXNILENBQ3ZILENBQUM7S0FDSDtJQUVELElBQUksYUFBYSxJQUFJLGNBQWMsRUFBRTtRQUNuQyxPQUFPO1lBQ0wsR0FBRyxFQUFFLGFBQWE7WUFDbEIsSUFBSSxFQUFFLGNBQWM7U0FDckIsQ0FBQztLQUNIO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsU0FBc0IsS0FBSyxDQUFDLEtBQVksRUFBRSxNQUFjOztRQUN0RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMs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