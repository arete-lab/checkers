"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.init = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const faucet_client_1 = require("@cosmjs/faucet-client");
const axios_1 = __importDefault(require("axios"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const constants_1 = require("../../constants");
const types_1 = require("../../types");
const derive_address_1 = require("../../utils/derive-address");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
function copyRegistryFile(from, to) {
    try {
        fs_1.default.copyFileSync(from, to);
        console.log(`Copied existing registry from ${from} to ${to}.`);
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            throw new Error(`No such file: ${from}. Make sure that "--registry-from" points at existing relayer's home dir.`);
        }
        else {
            throw error;
        }
    }
}
function pullRegistryFromRemote(writeTo) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const registryFromRemote = yield axios_1.default.get('https://raw.githubusercontent.com/confio/ts-relayer/main/demo/registry.yaml');
            fs_1.default.writeFileSync(writeTo, registryFromRemote.data);
            console.log(`Pulled default ${constants_1.registryFile} from remote.`);
        }
        catch (error) {
            throw new Error(`Cannot fetch ${constants_1.registryFile} from remote. ${error}`);
        }
    });
}
function init(flags, _logger) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = {
            src: resolve_option_1.resolveOption('src')(flags.src, process.env.RELAYER_SRC),
            dest: resolve_option_1.resolveOption('dest')(flags.dest, process.env.RELAYER_DEST),
            home: resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home }),
            registryFrom: resolve_option_1.resolveOption('registryFrom')(flags.registryFrom, process.env.RELAYER_REGISTRY_FROM),
        };
        yield run(options);
    });
}
exports.init = init;
function run(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const appFilePath = path_1.default.join(options.home, constants_1.appFile);
        if (fs_1.default.existsSync(appFilePath)) {
            console.log(`The ${constants_1.appFile} is already initialized at ${options.home}.`);
            return;
        }
        if (!fs_1.default.existsSync(options.home)) {
            fs_1.default.mkdirSync(options.home, { recursive: true });
            console.log(`Initialized home directory at ${options.home}`);
        }
        else if (!fs_1.default.lstatSync(options.home).isDirectory()) {
            throw new Error(`${options.home} must be a directory.`);
        }
        const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
        if (!fs_1.default.existsSync(registryFilePath)) {
            if (options.registryFrom) {
                copyRegistryFile(path_1.default.join(options.registryFrom, constants_1.registryFile), registryFilePath);
            }
            else {
                yield pullRegistryFromRemote(registryFilePath);
            }
        }
        else if (!fs_1.default.lstatSync(registryFilePath).isFile()) {
            throw new Error(`${registryFilePath} must be a file.`);
        }
        if (!options.src || !options.dest) {
            console.log(`Exited early. Registry file downloaded to ${registryFilePath}. Please edit that file and add any chains you wish. Then complete the initialization by running ibc-setup init --src <chain-1> --dest <chain-2>.`);
            return;
        }
        const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
        const [chainSrc, chainDest] = [options.src, options.dest].map((chain) => {
            const chainData = registry.chains[chain];
            if (!chainData) {
                throw new Error(`Chain ${chain} is missing in the registry, either check the spelling or add the chain definition to ${registryFilePath}.`);
            }
            return chainData;
        });
        const mnemonic = generate_mnemonic_1.generateMnemonic();
        const appYaml = js_yaml_1.default.dump({
            src: options.src,
            dest: options.dest,
            mnemonic,
        }, {
            lineWidth: 1000, // to ensure mnemonic is not split on multiple lines
        });
        fs_1.default.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
        console.log(`Saved configuration to ${appFilePath}`);
        const [addressSrc, addressDest] = yield Promise.all([
            derive_address_1.deriveAddress(mnemonic, chainSrc.prefix, chainSrc.hd_path),
            derive_address_1.deriveAddress(mnemonic, chainDest.prefix, chainDest.hd_path),
        ]);
        console.log(`Source address: ${addressSrc}`);
        console.log(`Destination address: ${addressDest}`);
        // if there are faucets, ask for tokens
        if (chainSrc.faucet) {
            const srcDenom = types_1.feeDenom(chainSrc);
            console.log(`Requesting ${srcDenom} for ${chainSrc.chain_id}...`);
            yield new faucet_client_1.FaucetClient(chainSrc.faucet).credit(addressSrc, srcDenom);
        }
        if (chainDest.faucet) {
            const destDenom = types_1.feeDenom(chainDest);
            console.log(`Requesting ${destDenom} for ${chainDest.chain_id}...`);
            yield new faucet_client_1.FaucetClient(chainDest.faucet).credit(addressDest, destDenom);
        }
    });
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4Qix5REFBcUQ7QUFDckQsa0RBQTBCO0FBQzFCLHNEQUEyQjtBQUUzQiwrQ0FBd0Q7QUFFeEQsdUNBQXVDO0FBQ3ZDLCtEQUEyRDtBQUMzRCxxRUFBaUU7QUFDakUsdUZBQWlGO0FBQ2pGLHVFQUFtRTtBQUNuRSx3RkFBbUY7QUFnQm5GLFNBQVMsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLEVBQVU7SUFDaEQsSUFBSTtRQUNGLFlBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLElBQUksT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ2hFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQ2IsaUJBQWlCLElBQUksMkVBQTJFLENBQ2pHLENBQUM7U0FDSDthQUFNO1lBQ0wsTUFBTSxLQUFLLENBQUM7U0FDYjtLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQWUsc0JBQXNCLENBQUMsT0FBZTs7UUFDbkQsSUFBSTtZQUNGLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUN4Qyw2RUFBNkUsQ0FDOUUsQ0FBQztZQUNGLFlBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLHdCQUFZLGVBQWUsQ0FBQyxDQUFDO1NBQzVEO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxNQUFNLElBQUks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