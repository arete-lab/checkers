#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = void 0;
const commander_1 = require("commander");
const commander_options_1 = require("../commander-options");
const logger_with_error_boundary_1 = require("../utils/logger-with-error-boundary");
const balances_1 = require("./commands/balances");
const channel_1 = require("./commands/channel");
const channels_1 = require("./commands/channels");
const connect_1 = require("./commands/connect");
const connections_1 = require("./commands/connections");
const ics20_1 = require("./commands/ics20");
const init_1 = require("./commands/init");
const keys_generate_1 = require("./commands/keys-generate");
const keys_list_1 = require("./commands/keys-list");
exports.program = new commander_1.Command();
exports.program.helpOption(...commander_options_1.helpOptions);
exports.program.addHelpCommand(false);
exports.program.description('Collection of commands to quickly setup a relayer');
const initCommand = exports.program
    .command('init')
    .description("Initialize relayer's home directory with registry.yaml and app.yaml configuration files")
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.srcOption)
    .addOption(commander_options_1.destOption)
    .option('--registry-from <path>', 'Copy existing relayer registry from given home directory')
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(init_1.init));
commander_options_1.addLoggerOptionsTo(initCommand);
const ics20Command = exports.program
    .command('ics20')
    .description('Create new unordered channel (ics20-1) for given chains, ports, and connections')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.srcTrust)
    .addOption(commander_options_1.destTrust)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.srcPort(` (default: ${ics20_1.defaults.port})`))
    .addOption(commander_options_1.destPort(` (default: ${ics20_1.defaults.port})`))
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(ics20_1.ics20));
commander_options_1.addLoggerOptionsTo(ics20Command);
const keys = exports.program.command('keys').description('Manage application keys');
const keysGenerateCommand = keys
    .command('generate')
    .description('Generate 12 words length mnemonic')
    .addOption(commander_options_1.keyFileOption('write'))
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(keys_generate_1.keysGenerate));
commander_options_1.addLoggerOptionsTo(keysGenerateCommand);
const keysListCommand = keys
    .command('list')
    .description('Print addresses for registry chains')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.keyFileOption('read'))
    .addOption(commander_options_1.interactiveOption)
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(keys_list_1.keysList));
commander_options_1.addLoggerOptionsTo(keysListCommand);
const balancesCommand = exports.program
    .command('balances')
    .description('Query balances for registry chains with non-zero amount')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.keyFileOption('read'))
    .addOption(commander_options_1.interactiveOption)
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(balances_1.balances));
commander_options_1.addLoggerOptionsTo(balancesCommand);
const connectCommand = exports.program
    .command('connect')
    .description('Create and store new connections for given chains')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.keyFileOption('read'))
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.srcTrust)
    .addOption(commander_options_1.destTrust)
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(connect_1.connect));
commander_options_1.addLoggerOptionsTo(connectCommand);
const channelsCommand = exports.program
    .command('channels')
    .description('Query channels on given chain and optionally filter by port')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.chainOption)
    .option('--connection <connection-id>', 'Filter channels by connection id')
    .option('--port <port>', 'Filter channels by port')
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(channels_1.channels));
commander_options_1.addLoggerOptionsTo(channelsCommand);
const channelCommand = exports.program
    .command('channel')
    .description('Create new channel for given options')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.keyFileOption('read'))
    .addOption(commander_options_1.srcConnection)
    .addOption(commander_options_1.destConnection)
    .addOption(commander_options_1.srcPort())
    .addOption(commander_options_1.destPort())
    .option('--ordered')
    .option('--version <version>', `(default: ${channel_1.defaults.version})`)
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(channel_1.channel));
commander_options_1.addLoggerOptionsTo(channelCommand);
const connectionsCommand = exports.program
    .command('connections')
    .description('Query connections for given chain')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.mnemonicOption)
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.chainOption)
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(connections_1.connections));
commander_options_1.addLoggerOptionsTo(connectionsCommand);
exports.program.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseUNBQW9DO0FBRXBDLDREQWdCOEI7QUFDOUIsb0ZBQThFO0FBRTlFLGtEQUErQztBQUMvQyxnREFBMEU7QUFDMUUsa0RBQStDO0FBQy9DLGdEQUE2QztBQUM3Qyx3REFBcUQ7QUFDckQsNENBQW9FO0FBQ3BFLDBDQUF1QztBQUN2Qyw0REFBd0Q7QUFDeEQsb0RBQWdEO0FBRW5DLFFBQUEsT0FBTyxHQUFHLElBQUksbUJBQU8sRUFBRSxDQUFDO0FBRXJDLGVBQU8sQ0FBQyxVQUFVLENBQUMsR0FBRywrQkFBVyxDQUFDLENBQUM7QUFDbkMsZUFBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU5QixlQUFPLENBQUMsV0FBVyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFFekUsTUFBTSxXQUFXLEdBQUcsZUFBTztLQUN4QixPQUFPLENBQUMsTUFBTSxDQUFDO0tBQ2YsV0FBVyxDQUNWLHlGQUF5RixDQUMxRjtLQUNBLFNBQVMsQ0FBQyw4QkFBVSxDQUFDO0tBQ3JCLFNBQVMsQ0FBQyw2QkFBUyxDQUFDO0tBQ3BCLFNBQVMsQ0FBQyw4QkFBVSxDQUFDO0tBQ3JCLE1BQU0sQ0FDTCx3QkFBd0IsRUFDeEIsMERBQTBELENBQzNEO0tBQ0EsTUFBTSxDQUFDLG9EQUF1QixDQUFDLFdBQUksQ0FBQyxDQUFDLENBQUM7QUFDekMsc0NBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFaEMsTUFBTSxZQUFZLEdBQUcsZUFBTztLQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2hCLFdBQVcsQ0FDVixpRkFBaUYsQ0FDbEY7S0FDQSxTQUFTLENBQUMsOEJBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsNEJBQVEsQ0FBQztLQUNuQixTQUFTLENBQUMsNkJBQVMsQ0FBQztL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