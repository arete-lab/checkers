"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveMnemonicOption = void 0;
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
const resolve_option_1 = require("../resolve-option");
function readMnemonicFromStdin(interactive) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!interactive) {
            return null;
        }
        const readlineInterface = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        const mnemonic = yield new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timeout for entering mnemonic exceeded.'));
            }, 60 * 1000);
            readlineInterface.question('enter mnemonic phrase: ', (stdin) => {
                readlineInterface.close();
                clearTimeout(timeout);
                resolve(stdin);
            });
        });
        return mnemonic;
    });
}
function readMnemonicFromFile(keyFile) {
    if (!keyFile) {
        return null;
    }
    return () => {
        return fs_1.default.readFileSync(keyFile, 'utf-8').trim();
    };
}
function resolveMnemonicOption({ interactiveFlag, keyFile, mnemonicFlag, app }, optional = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const args = [
            yield readMnemonicFromStdin(interactiveFlag),
            mnemonicFlag,
            process.env.RELAYER_MNEMONIC,
            app === null || app === void 0 ? void 0 : app.mnemonic,
            readMnemonicFromFile(keyFile),
        ];
        if (!optional) {
            return resolve_option_1.resolveOption('mnemonic', { required: true })(...args);
        }
        return resolve_option_1.resolveOption('mnemonic')(...args);
    });
}
exports.resolveMnemonicOption = resolveMnemonicOption;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS1tbmVtb25pYy1vcHRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L3V0aWxzL29wdGlvbnMvc2hhcmVkL3Jlc29sdmUtbW5lbW9uaWMtb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQix3REFBZ0M7QUFHaEMsc0RBQWtEO0FBRWxELFNBQWUscUJBQXFCLENBQUMsV0FBb0I7O1FBQ3ZELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0saUJBQWlCLEdBQUcsa0JBQVEsQ0FBQyxlQUFlLENBQUM7WUFDakQsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1lBQ3BCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtTQUN2QixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzdELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQzlCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7WUFDL0QsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUVkLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUM5RCxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDMUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FBQTtBQUVELFNBQVMsb0JBQW9CLENBQUMsT0FBc0I7SUFDbEQsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sWUFBRSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQW1CRCxTQUFzQixxQkFBcUIsQ0FDekMsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxHQUFHLEVBQVUsRUFDdkQsUUFBUSxHQUFHLEtBQUs7O1FBRWhCLE1BQU0sSUFBSSxHQUFHO1lBQ1gsTUFBTSxxQkFBcUIsQ0FBQyxlQUFlLENBQUM7WUFDNUMsWUFBWTtZQUNaLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCO1lBQzVCLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxRQUFRO1lBQ2Isb0JBQW9CLENBQUMsT0FBTyxDQUFDO1NBQzlCLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsT0FBTyw4QkFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDL0Q7UUFFRCxPQUFPLDhCQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQUE7QUFqQkQsc0RBaUJDIn0=