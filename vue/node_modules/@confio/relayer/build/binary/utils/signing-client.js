"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signingClient = void 0;
const crypto_1 = require("@cosmjs/crypto");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const ibcclient_1 = require("../../lib/ibcclient");
function signingClient(chain, mnemonic, logger) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return __awaiter(this, void 0, void 0, function* () {
        const hdPathsToSpread = chain.hd_path
            ? { hdPaths: [crypto_1.stringToPath(chain.hd_path)] }
            : {};
        const signer = yield proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, Object.assign({ prefix: chain.prefix }, hdPathsToSpread));
        const { address } = (yield signer.getAccounts())[0];
        // This is test timing to let us handle 250ms blocks without huge delays
        const extras = process.env.NODE_ENV == 'test'
            ? {
                broadcastPollIntervalMs: 300,
                broadcastTimeoutMs: 2000,
            }
            : {};
        const options = Object.assign({ prefix: chain.prefix, gasPrice: stargate_1.GasPrice.fromString(chain.gas_price), gasLimits: {
                initClient: (_a = chain.gas_limits) === null || _a === void 0 ? void 0 : _a.init_client,
                updateClient: (_b = chain.gas_limits) === null || _b === void 0 ? void 0 : _b.update_client,
                initConnection: (_c = chain.gas_limits) === null || _c === void 0 ? void 0 : _c.init_connection,
                connectionHandshake: (_d = chain.gas_limits) === null || _d === void 0 ? void 0 : _d.connection_handshake,
                initChannel: (_e = chain.gas_limits) === null || _e === void 0 ? void 0 : _e.init_channel,
                channelHandshake: (_f = chain.gas_limits) === null || _f === void 0 ? void 0 : _f.channel_handshake,
                receivePacket: (_g = chain.gas_limits) === null || _g === void 0 ? void 0 : _g.receive_packet,
                ackPacket: (_h = chain.gas_limits) === null || _h === void 0 ? void 0 : _h.ack_packet,
                timeoutPacket: (_j = chain.gas_limits) === null || _j === void 0 ? void 0 : _j.ack_packet,
                transfer: (_k = chain.gas_limits) === null || _k === void 0 ? void 0 : _k.transfer,
            }, logger }, extras);
        const client = yield ibcclient_1.IbcClient.connectWithSigner(chain.rpc[0], signer, address, options);
        return client;
    });
}
exports.signingClient = signingClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmluZy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmluYXJ5L3V0aWxzL3NpZ25pbmctY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE4QztBQUM5Qyx5REFBZ0U7QUFDaEUsK0NBQTRDO0FBRTVDLG1EQUFrRTtBQUlsRSxTQUFzQixhQUFhLENBQ2pDLEtBQVksRUFDWixRQUFnQixFQUNoQixNQUFlOzs7UUFFZixNQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsT0FBTztZQUNuQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQzVDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDUCxNQUFNLE1BQU0sR0FBRyxNQUFNLHVDQUF1QixDQUFDLFlBQVksQ0FBQyxRQUFRLGtCQUNoRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sSUFDakIsZUFBZSxFQUNsQixDQUFDO1FBQ0gsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsTUFBTSxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRCx3RUFBd0U7UUFDeEUsTUFBTSxNQUFNLEdBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksTUFBTTtZQUM1QixDQUFDLENBQUM7Z0JBQ0UsdUJBQXVCLEVBQUUsR0FBRztnQkFDNUIsa0JBQWtCLEVBQUUsSUFBSTthQUN6QjtZQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDVCxNQUFNLE9BQU8sbUJBQ1gsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQ3BCLFFBQVEsRUFBRSxtQkFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQzlDLFNBQVMsRUFBRTtnQkFDVCxVQUFVLEVBQUUsTUFBQSxLQUFLLENBQUMsVUFBVSwwQ0FBRSxXQUFXO2dCQUN6QyxZQUFZLEVBQUUsTUFBQSxLQUFLLENBQUMsVUFBVSwwQ0FBRSxhQUFhO2dCQUM3QyxjQUFjLEVBQUUsTUFBQSxLQUFLLENBQUMsVUFBVSwwQ0FBRSxlQUFlO2dCQUNqRCxtQkFBbUIsRUFBRSxNQUFBLEtBQUssQ0FBQyxVQUFVLDBDQUFFLG9CQUFvQjtnQkFDM0QsV0FBVyxFQUFFLE1BQUEsS0FBSyxDQUFDLFVBQVUsMENBQUUsWUFBWTtnQkFDM0MsZ0JBQWdCLEVBQUUsTUFBQSxLQUFLLENBQUMsVUFBVSwwQ0FBRSxpQkFBaUI7Z0JBQ3JELGFBQWEsRUFBRSxNQUFBLEtBQUssQ0FBQyxVQUFVLDBDQUFFLGNBQWM7Z0JBQy9DLFNBQVMsRUFBRSxNQUFBLEtBQUssQ0FBQyxVQUFVLDBDQUFFLFVBQVU7Z0JBQ3ZDLGFBQWEsRUFBRSxNQUFBLEtBQUssQ0FBQyxVQUFVLDBDQUFFLFVBQVU7Z0JBQzNDLFFBQVEsRUFBRSxNQUFBLEtBQUssQ0FBQyxVQUFVLDBDQUFFLFFBQVE7YUFDckMsRUFDRCxNQUFNLElBQ0gsTUFBTSxDQUNWLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLHFCQUFTLENBQUMsaUJBQWlCLENBQzlDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ1osTUFBTSxFQUNOLE9BQU8sRUFDUCxPQUFPLENBQ1IsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDOztDQUNmO0FBOUNELHNDQThDQyJ9