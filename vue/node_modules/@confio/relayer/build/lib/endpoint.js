"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = void 0;
const encoding_1 = require("@cosmjs/encoding");
const stargate_1 = require("@cosmjs/stargate");
const utils_1 = require("./utils");
/**
 * Endpoint is a wrapper around SigningStargateClient as well as ClientID
 * and ConnectionID. Two Endpoints compose a Link and this should expose all the
 * methods you need to work on one half of an IBC Connection, the higher-level
 * orchestration is handled in Link.
 */
class Endpoint {
    constructor(client, clientID, connectionID) {
        this.client = client;
        this.clientID = clientID;
        this.connectionID = connectionID;
    }
    chainId() {
        return this.client.chainId;
    }
    getLatestCommit() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.getCommit();
        });
    }
    getPacketsFromBlockEvents({ minHeight, maxHeight, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = `send_packet.packet_connection='${this.connectionID}'`;
            if (minHeight) {
                query = `${query} AND block.height>=${minHeight}`;
            }
            if (maxHeight) {
                query = `${query} AND block.height<=${maxHeight}`;
            }
            const search = yield this.client.tm.blockSearchAll({ query });
            const resultsNested = yield Promise.all(search.blocks.map(({ block }) => __awaiter(this, void 0, void 0, function* () {
                const height = block.header.height;
                const result = yield this.client.tm.blockResults(height);
                return utils_1.parsePacketsFromBlockResult(result).map((packet) => ({
                    packet,
                    height,
                    sender: '',
                }));
            })));
            return [].concat(...resultsNested);
        });
    }
    getPacketsFromTxs({ minHeight, maxHeight, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = `send_packet.packet_connection='${this.connectionID}'`;
            if (minHeight) {
                query = `${query} AND tx.height>=${minHeight}`;
            }
            if (maxHeight) {
                query = `${query} AND tx.height<=${maxHeight}`;
            }
            const search = yield this.client.tm.txSearchAll({ query });
            const resultsNested = search.txs.map(({ hash, height, result }) => {
                const parsedLogs = stargate_1.logs.parseRawLog(result.log);
                // we accept message.sender (cosmos-sdk) and message.signer (x/wasm)
                let sender = '';
                try {
                    sender = stargate_1.logs.findAttribute(parsedLogs, 'message', 'sender').value;
                }
                catch (_a) {
                    try {
                        sender = stargate_1.logs.findAttribute(parsedLogs, 'message', 'signer').value;
                    }
                    catch (_b) {
                        this.client.logger.warn(`No message.sender nor message.signer in tx ${encoding_1.toHex(hash)}`);
                    }
                }
                return utils_1.parsePacketsFromLogs(parsedLogs).map((packet) => ({
                    packet,
                    height,
                    sender,
                }));
            });
            return [].concat(...resultsNested);
        });
    }
    // returns all packets (auto-paginates, so be careful about not setting a minHeight)
    querySentPackets({ minHeight, maxHeight, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const txsPackets = yield this.getPacketsFromTxs({ minHeight, maxHeight });
            const eventsPackets = yield this.getPacketsFromBlockEvents({
                minHeight,
                maxHeight,
            });
            return []
                .concat(...txsPackets)
                .concat(...eventsPackets);
        });
    }
    // returns all acks (auto-paginates, so be careful about not setting a minHeight)
    queryWrittenAcks({ minHeight, maxHeight, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let query = `write_acknowledgement.packet_connection='${this.connectionID}'`;
            if (minHeight) {
                query = `${query} AND tx.height>=${minHeight}`;
            }
            if (maxHeight) {
                query = `${query} AND tx.height<=${maxHeight}`;
            }
            const search = yield this.client.tm.txSearchAll({ query });
            const resultsNested = search.txs.map(({ height, result }) => {
                const parsedLogs = stargate_1.logs.parseRawLog(result.log);
                // const sender = logs.findAttribute(parsedLogs, 'message', 'sender').value;
                return utils_1.parseAcksFromLogs(parsedLogs).map((ack) => (Object.assign({ height }, ack)));
            });
            return [].concat(...resultsNested);
        });
    }
}
exports.Endpoint = Endpoint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2VuZHBvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLCtDQUF5QztBQUN6QywrQ0FBd0M7QUFNeEMsbUNBS2lCO0FBb0JqQjs7Ozs7R0FLRztBQUNILE1BQWEsUUFBUTtJQUtuQixZQUNFLE1BQWlCLEVBQ2pCLFFBQWdCLEVBQ2hCLFlBQW9CO1FBRXBCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRVksZUFBZTs7WUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVhLHlCQUF5QixDQUFDLEVBQ3RDLFNBQVMsRUFDVCxTQUFTLE1BQ0ksRUFBRTs7WUFDZixJQUFJLEtBQUssR0FBRyxrQ0FBa0MsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDO1lBQ25FLElBQUksU0FBUyxFQUFFO2dCQUNiLEtBQUssR0FBRyxHQUFHLEtBQUssc0JBQXNCLFNBQVMsRUFBRSxDQUFDO2FBQ25EO1lBQ0QsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsS0FBSyxHQUFHLEdBQUcsS0FBSyxzQkFBc0IsU0FBUyxFQUFFLENBQUM7YUFDbkQ7WUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDOUQsTUFBTSxhQUFhLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcs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