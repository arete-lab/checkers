"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Link = exports.otherSide = void 0;
const utils_1 = require("@cosmjs/utils");
const channel_1 = require("../codec/ibc/core/channel/v1/channel");
const endpoint_1 = require("./endpoint");
const ibcclient_1 = require("./ibcclient");
const logger_1 = require("./logger");
const utils_2 = require("./utils");
function otherSide(side) {
    if (side === 'A') {
        return 'B';
    }
    else {
        return 'A';
    }
}
exports.otherSide = otherSide;
/**
 * Link represents a Connection between a pair of blockchains (Nodes).
 * An initialized Link requires a both sides to have a Client for the remote side
 * as well as an established Connection using those Clients. Channels can be added
 * and removed to a Link. There are constructors to find/create the basic requirements
 * if you don't know the client/connection IDs a priori.
 */
class Link {
    // you can use this if you already have the info out of bounds
    // FIXME: check the validity of that data?
    constructor(endA, endB, logger) {
        this.endA = endA;
        this.endB = endB;
        this.logger = logger !== null && logger !== void 0 ? logger : new logger_1.NoopLogger();
        this.chainA = endA.client.chainId;
        this.chainB = endB.client.chainId;
    }
    chain(side) {
        if (side === 'A') {
            return this.chainA;
        }
        else {
            return this.chainB;
        }
    }
    otherChain(side) {
        if (side === 'A') {
            return this.chainB;
        }
        else {
            return this.chainA;
        }
    }
    /**
     * findConnection attempts to reuse an existing Client/Connection.
     * If none exists, then it returns an error.
     *
     * @param nodeA
     * @param nodeB
     */
    static createWithExistingConnections(nodeA, nodeB, connA, connB, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            const [chainA, chainB] = [nodeA.chainId, nodeB.chainId];
            const [{ connection: connectionA }, { connection: connectionB }] = yield Promise.all([
                nodeA.query.ibc.connection.connection(connA),
                nodeB.query.ibc.connection.connection(connB),
            ]);
            if (!connectionA) {
                throw new Error(`[${chainA}] Connection not found for ID ${connA}`);
            }
            if (!connectionB) {
                throw new Error(`[${chainB}] Connection not found for ID ${connB}`);
            }
            if (!connectionA.counterparty) {
                throw new Error(`[${chainA}] Counterparty not found for connection with ID ${connA}`);
            }
            if (!connectionB.counterparty) {
                throw new Error(`[${chainB}] Counterparty not found for connection with ID ${connB}`);
            }
            // ensure the connection is open
            if (connectionA.state != channel_1.State.STATE_OPEN) {
                throw new Error(`Connection on ${chainA} must be in state open, it has state ${connectionA.state}`);
            }
            if (connectionB.state != channel_1.State.STATE_OPEN) {
                throw new Error(`Connection on ${chainB} must be in state open, it has state ${connectionB.state}`);
            }
            const [clientIdA, clientIdB] = [connectionA.clientId, connectionB.clientId];
            if (clientIdA !== connectionB.counterparty.clientId) {
                throw new Error(`Client ID ${connectionA.clientId} for connection with ID ${connA} does not match counterparty client ID ${connectionB.counterparty.clientId} for connection with ID ${connB}`);
            }
            if (clientIdB !== connectionA.counterparty.clientId) {
                throw new Error(`Client ID ${connectionB.clientId} for connection with ID ${connB} does not match counterparty client ID ${connectionA.counterparty.clientId} for connection with ID ${connA}`);
            }
            const [clientStateA, clientStateB] = yield Promise.all([
                nodeA.query.ibc.client.stateTm(clientIdA),
                nodeB.query.ibc.client.stateTm(clientIdB),
            ]);
            if (nodeA.chainId !== clientStateB.chainId) {
                throw new Error(`Chain ID ${nodeA.chainId} for connection with ID ${connA} does not match remote chain ID ${clientStateA.chainId}`);
            }
            if (nodeB.chainId !== clientStateA.chainId) {
                throw new Error(`Chain ID ${nodeB.chainId} for connection with ID ${connB} does not match remote chain ID ${clientStateB.chainId}`);
            }
            const endA = new endpoint_1.Endpoint(nodeA, clientIdA, connA);
            const endB = new endpoint_1.Endpoint(nodeB, clientIdB, connB);
            const link = new Link(endA, endB, logger);
            yield Promise.all([
                link.assertHeadersMatchConsensusState('A', clientIdA, clientStateA.latestHeight),
                link.assertHeadersMatchConsensusState('B', clientIdB, clientStateB.latestHeight),
            ]);
            return link;
        });
    }
    /**
     * we do this assert inside createWithExistingConnections, but it could be a useful check
     * for submitting double-sign evidence later
     *
     * @param proofSide the side holding the consensus proof, we check the header from the other side
     * @param height the height of the consensus state and header we wish to compare
     */
    assertHeadersMatchConsensusState(proofSide, clientId, height) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { src, dest } = this.getEnds(proofSide);
            // Check headers match consensus state (at least validators)
            const [consensusState, header] = yield Promise.all([
                src.client.query.ibc.client.consensusStateTm(clientId, height),
                dest.client.header(utils_2.toIntHeight(height)),
            ]);
            // ensure consensus and headers match for next validator hashes
            if (!utils_1.arrayContentEquals(consensusState.nextValidatorsHash, header.nextValidatorsHash)) {
                throw new Error(`NextValidatorHash doesn't match ConsensusState.`);
            }
            // ensure the committed apphash matches the actual node we have
            const hash = (_a = consensusState.root) === null || _a === void 0 ? void 0 : _a.hash;
            if (!hash) {
                throw new Error(`ConsensusState.root.hash missing.`);
            }
            if (!utils_1.arrayContentEquals(hash, header.appHash)) {
                throw new Error(`AppHash doesn't match ConsensusState.`);
            }
        });
    }
    /**
     * createConnection will always create a new pair of clients and a Connection between the
     * two sides
     *
     * @param nodeA
     * @param nodeB
     */
    static createWithNewConnections(nodeA, nodeB, logger, 
    // number of seconds the client (on B pointing to A) is valid without update
    trustPeriodA, 
    // number of seconds the client (on A pointing to B) is valid without update
    trustPeriodB) {
        return __awaiter(this, void 0, void 0, function* () {
            const [clientIdA, clientIdB] = yield createClients(nodeA, nodeB, trustPeriodA, trustPeriodB);
            // wait a block to ensure we have proper proofs for creating a connection (this has failed on CI before)
            yield Promise.all([nodeA.waitOneBlock(), nodeB.waitOneBlock()]);
            // connectionInit on nodeA
            const { connectionId: connIdA } = yield nodeA.connOpenInit(clientIdA, clientIdB);
            // connectionTry on nodeB
            const proof = yield ibcclient_1.prepareConnectionHandshake(nodeA, nodeB, clientIdA, clientIdB, connIdA);
            const { connectionId: connIdB } = yield nodeB.connOpenTry(clientIdB, proof);
            // connectionAck on nodeA
            const proofAck = yield ibcclient_1.prepareConnectionHandshake(nodeB, nodeA, clientIdB, clientIdA, connIdB);
            yield nodeA.connOpenAck(connIdA, proofAck);
            // connectionConfirm on dest
            const proofConfirm = yield ibcclient_1.prepareConnectionHandshake(nodeA, nodeB, clientIdA, clientIdB, connIdA);
            yield nodeB.connOpenConfirm(connIdB, proofConfirm);
            const endA = new endpoint_1.Endpoint(nodeA, clientIdA, connIdA);
            const endB = new endpoint_1.Endpoint(nodeB, clientIdB, connIdB);
            return new Link(endA, endB, logger);
        });
    }
    /**
     * Writes the latest header from the sender chain to the other endpoint
     *
     * @param sender Which side we get the header/commit from
     * @returns header height (from sender) that is now known on dest
     *
     * Relayer binary should call this from a heartbeat which checks if needed and updates.
     * Just needs trusting period on both side
     */
    updateClient(sender) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Update Client on ${this.otherChain(sender)}`);
            const { src, dest } = this.getEnds(sender);
            const height = yield dest.client.doUpdateClient(dest.clientID, src.client);
            return height;
        });
    }
    /**
     * Checks if the last proven header on the destination is older than maxAge,
     * and if so, update the client. Returns the new client height if updated,
     * or null if no update needed
     *
     * @param sender
     * @param maxAge
     */
    updateClientIfStale(sender, maxAge) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.verbose(`Checking if ${this.otherChain(sender)} has recent header of ${this.chain(sender)}`);
            const { src, dest } = this.getEnds(sender);
            const knownHeader = yield dest.client.query.ibc.client.consensusStateTm(dest.clientID);
            const currentHeader = yield src.client.latestHeader();
            // quit now if we don't need to update
            const knownSeconds = (_b = (_a = knownHeader.timestamp) === null || _a === void 0 ? void 0 : _a.seconds) === null || _b === void 0 ? void 0 : _b.toNumber();
            if (knownSeconds) {
                const curSeconds = utils_2.timestampFromDateNanos(currentHeader.time).seconds.toNumber();
                if (curSeconds - knownSeconds < maxAge) {
                    return null;
                }
            }
            // otherwise, do the update
            return this.updateClient(sender);
        });
    }
    /**
     * Ensures the dest has a proof of at least minHeight from source.
     * Will not execute any tx if not needed.
     * Will wait a block if needed until the header is available.
     *
     * Returns the latest header height now available on dest
     */
    updateClientToHeight(source, minHeight) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Check whether client on ${this.otherChain(source)} >= height ${minHeight}`);
            const { src, dest } = this.getEnds(source);
            const client = yield dest.client.query.ibc.client.stateTm(dest.clientID);
            // TODO: revisit where revision number comes from - this must be the number from the source chain
            const knownHeight = (_c = (_b = (_a = client.latestHeight) === null || _a === void 0 ? void 0 : _a.revisionHeight) === null || _b === void 0 ? void 0 : _b.toNumber()) !== null && _c !== void 0 ? _c : 0;
            if (knownHeight >= minHeight && client.latestHeight !== undefined) {
                return client.latestHeight;
            }
            const curHeight = (yield src.client.latestHeader()).height;
            if (curHeight < minHeight) {
                yield src.client.waitOneBlock();
            }
            return this.updateClient(source);
        });
    }
    createChannel(sender, srcPort, destPort, ordering, version) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Create channel with sender ${this.chain(sender)}: ${srcPort} => ${destPort}`);
            const { src, dest } = this.getEnds(sender);
            // init on src
            const { channelId: channelIdSrc } = yield src.client.channelOpenInit(srcPort, destPort, ordering, src.connectionID, version);
            // try on dest
            const proof = yield ibcclient_1.prepareChannelHandshake(src.client, dest.client, dest.clientID, srcPort, channelIdSrc);
            const { channelId: channelIdDest } = yield dest.client.channelOpenTry(destPort, { portId: srcPort, channelId: channelIdSrc }, ordering, dest.connectionID, version, version, proof);
            // ack on src
            const proofAck = yield ibcclient_1.prepareChannelHandshake(dest.client, src.client, src.clientID, destPort, channelIdDest);
            yield src.client.channelOpenAck(srcPort, channelIdSrc, channelIdDest, version, proofAck);
            // confirm on dest
            const proofConfirm = yield ibcclient_1.prepareChannelHandshake(src.client, dest.client, dest.clientID, srcPort, channelIdSrc);
            yield dest.client.channelOpenConfirm(destPort, channelIdDest, proofConfirm);
            return {
                src: {
                    portId: srcPort,
                    channelId: channelIdSrc,
                },
                dest: {
                    portId: destPort,
                    channelId: channelIdDest,
                },
            };
        });
    }
    /**
     * This will check both sides for pending packets and relay them.
     * It will then relay all acks (previous and generated by the just-submitted packets).
     * If pending packets have timed out, it will submit a timeout instead of attempting to relay them.
     *
     * Returns the most recent heights it relay, which can be used as a start for the next round
     */
    checkAndRelayPacketsAndAcks(relayFrom, timedoutThresholdBlocks = 0, timedoutThresholdSeconds = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            // FIXME: is there a cleaner way to get the height we query at?
            const [packetHeightA, packetHeightB, packetsA, packetsB] = yield Promise.all([
                this.endA.client.currentHeight(),
                this.endB.client.currentHeight(),
                this.getPendingPackets('A', { minHeight: relayFrom.packetHeightA }),
                this.getPendingPackets('B', { minHeight: relayFrom.packetHeightB }),
            ]);
            const cutoffHeightA = yield this.endB.client.timeoutHeight(timedoutThresholdBlocks);
            const cutoffTimeA = utils_2.secondsFromDateNanos(yield this.endB.client.currentTime()) +
                timedoutThresholdSeconds;
            const { toSubmit: submitA, toTimeout: timeoutA } = utils_2.splitPendingPackets(cutoffHeightA, cutoffTimeA, packetsA);
            const cutoffHeightB = yield this.endA.client.timeoutHeight(timedoutThresholdBlocks);
            const cutoffTimeB = utils_2.secondsFromDateNanos(yield this.endA.client.currentTime()) +
                timedoutThresholdSeconds;
            const { toSubmit: submitB, toTimeout: timeoutB } = utils_2.splitPendingPackets(cutoffHeightB, cutoffTimeB, packetsB);
            // FIXME: use the returned acks first? Then query for others?
            yield Promise.all([
                this.relayPackets('A', submitA),
                this.relayPackets('B', submitB),
            ]);
            // let's wait a bit to ensure our newly committed acks are indexed
            yield Promise.all([
                this.endA.client.waitOneBlock(),
                this.endB.client.waitOneBlock(),
            ]);
            const [ackHeightA, ackHeightB, acksA, acksB] = yield Promise.all([
                this.endA.client.currentHeight(),
                this.endB.client.currentHeight(),
                this.getPendingAcks('A', { minHeight: relayFrom.ackHeightA }),
                this.getPendingAcks('B', { minHeight: relayFrom.ackHeightB }),
            ]);
            yield Promise.all([this.relayAcks('A', acksA), this.relayAcks('B', acksB)]);
            yield Promise.all([
                this.timeoutPackets('A', timeoutA),
                this.timeoutPackets('B', timeoutB),
            ]);
            const nextRelay = {
                packetHeightA,
                packetHeightB,
                ackHeightA,
                ackHeightB,
            };
            this.logger.verbose('next heights to relay', nextRelay);
            return nextRelay;
        });
    }
    getPendingPackets(source, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.verbose(`Get pending packets on ${this.chain(source)}`);
            const { src, dest } = this.getEnds(source);
            const allPackets = yield src.querySentPackets(opts);
            const toFilter = allPackets.map(({ packet }) => packet);
            const query = (port, channel, sequences) => __awaiter(this, void 0, void 0, function* () {
                const res = yield dest.client.query.ibc.channel.unreceivedPackets(port, channel, sequences);
                return res.sequences.map((seq) => seq.toNumber());
            });
            // This gets the subset of packets that were already processed on the receiving chain
            const unreceived = yield this.filterUnreceived(toFilter, query, packetId);
            const unreceivedPackets = allPackets.filter(({ packet }) => unreceived[packetId(packet)].has(packet.sequence.toNumber()));
            // However, some of these may have already been submitted as timeouts on the source chain. Check and filter
            const valid = yield Promise.all(unreceivedPackets.map((packet) => __awaiter(this, void 0, void 0, function* () {
                const { sourcePort, sourceChannel, sequence } = packet.packet;
                try {
                    // this throws an error if no commitment there
                    yield src.client.query.ibc.channel.packetCommitment(sourcePort, sourceChannel, sequence);
                    return packet;
                }
                catch (_a) {
                    return undefined;
                }
            })));
            return valid.filter((x) => x !== undefined);
        });
    }
    getPendingAcks(source, opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.verbose(`Get pending acks on ${this.chain(source)}`);
            const { src, dest } = this.getEnds(source);
            const allAcks = yield src.queryWrittenAcks(opts);
            const toFilter = allAcks.map(({ originalPacket }) => originalPacket);
            const query = (port, channel, sequences) => __awaiter(this, void 0, void 0, function* () {
                const res = yield dest.client.query.ibc.channel.unreceivedAcks(port, channel, sequences);
                return res.sequences.map((seq) => seq.toNumber());
            });
            const unreceived = yield this.filterUnreceived(toFilter, query, ackId);
            return allAcks.filter(({ originalPacket: packet }) => unreceived[ackId(packet)].has(packet.sequence.toNumber()));
        });
    }
    filterUnreceived(packets, unreceivedQuery, idFunc) {
        return __awaiter(this, void 0, void 0, function* () {
            if (packets.length === 0) {
                return {};
            }
            const packetsPerDestination = packets.reduce((sorted, packet) => {
                var _a;
                const key = idFunc(packet);
                return Object.assign(Object.assign({}, sorted), { [key]: [...((_a = sorted[key]) !== null && _a !== void 0 ? _a : []), packet.sequence.toNumber()] });
            }, {});
            const unreceivedResponses = yield Promise.all(Object.entries(packetsPerDestination).map(([destination, sequences]) => __awaiter(this, void 0, void 0, function* () {
                const [port, channel] = destination.split(idDelim);
                const notfound = yield unreceivedQuery(port, channel, sequences);
                return { key: destination, sequences: notfound };
            })));
            const unreceived = unreceivedResponses.reduce((nested, { key, sequences }) => {
                return Object.assign(Object.assign({}, nested), { [key]: new Set(sequences) });
            }, {});
            return unreceived;
        });
    }
    // Returns the last height that this side knows of the other blockchain
    lastKnownHeader(side) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.verbose(`Get last known header on ${this.chain(side)}`);
            const { src } = this.getEnds(side);
            const client = yield src.client.query.ibc.client.stateTm(src.clientID);
            return (_c = (_b = (_a = client.latestHeight) === null || _a === void 0 ? void 0 : _a.revisionHeight) === null || _b === void 0 ? void 0 : _b.toNumber()) !== null && _c !== void 0 ? _c : 0;
        });
    }
    // this will update the client if needed and relay all provided packets from src -> dest
    // if packets are all older than the last consensusHeight, then we don't update the client.
    //
    // Returns all the acks that are associated with the just submitted packets
    relayPackets(source, packets) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Relay ${packets.length} packets from ${this.chain(source)} => ${this.otherChain(source)}`);
            if (packets.length === 0) {
                return [];
            }
            const { src, dest } = this.getEnds(source);
            // check if we need to update client at all
            const neededHeight = Math.max(...packets.map((x) => x.height)) + 1;
            const headerHeight = yield this.updateClientToHeight(source, neededHeight);
            const submit = packets.map(({ packet }) => packet);
            const proofs = yield Promise.all(submit.map((packet) => src.client.getPacketProof(packet, headerHeight)));
            const { logs, height } = yield dest.client.receivePackets(submit, proofs, headerHeight);
            const acks = utils_2.parseAcksFromLogs(logs);
            return acks.map((ack) => (Object.assign({ height }, ack)));
        });
    }
    // this will update the client if needed and relay all provided acks from src -> dest
    // (yes, dest is where the packet was sent, but the ack was written on src).
    // if acks are all older than the last consensusHeight, then we don't update the client.
    //
    // Returns the block height the acks were included in, or null if no acks sent
    relayAcks(source, acks) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Relay ${acks.length} acks from ${this.chain(source)} => ${this.otherChain(source)}`);
            if (acks.length === 0) {
                return null;
            }
            const { src, dest } = this.getEnds(source);
            // check if we need to update client at all
            const neededHeight = Math.max(...acks.map((x) => x.height)) + 1;
            const headerHeight = yield this.updateClientToHeight(source, neededHeight);
            const proofs = yield Promise.all(acks.map((ack) => src.client.getAckProof(ack, headerHeight)));
            const { height } = yield dest.client.acknowledgePackets(acks, proofs, headerHeight);
            return height;
        });
    }
    // Source: the side that originally sent the packet
    // We need to relay a proof from dest -> source
    timeoutPackets(source, packets) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Timeout ${packets.length} packets sent from ${this.chain(source)}`);
            if (packets.length === 0) {
                return null;
            }
            const { src, dest } = this.getEnds(source);
            const destSide = otherSide(source);
            // We need a header that is after the timeout, not after the packet was committed
            // This can get complex with timeout timestamps. Let's just update to latest
            yield dest.client.waitOneBlock();
            const headerHeight = yield this.updateClient(destSide);
            const rawPackets = packets.map(({ packet }) => packet);
            const proofAndSeqs = yield Promise.all(rawPackets.map((packet) => __awaiter(this, void 0, void 0, function* () {
                const fakeAck = {
                    originalPacket: packet,
                    acknowledgement: new Uint8Array(),
                };
                const { nextSequenceReceive: sequence } = yield dest.client.query.ibc.channel.nextSequenceReceive(packet.destinationPort, packet.destinationChannel);
                const proof = yield dest.client.getTimeoutProof(fakeAck, headerHeight);
                return { proof, sequence };
            })));
            const proofs = proofAndSeqs.map(({ proof }) => proof);
            const seqs = proofAndSeqs.map(({ sequence }) => sequence);
            const { height } = yield src.client.timeoutPackets(rawPackets, proofs, seqs, headerHeight);
            return height;
        });
    }
    getEnds(src) {
        if (src === 'A') {
            return {
                src: this.endA,
                dest: this.endB,
            };
        }
        else {
            return {
                src: this.endB,
                dest: this.endA,
            };
        }
    }
}
exports.Link = Link;
const idDelim = ':';
const packetId = (packet) => `${packet.destinationPort}${idDelim}${packet.destinationChannel}`;
const ackId = (packet) => `${packet.sourcePort}${idDelim}${packet.sourceChannel}`;
function createClients(nodeA, nodeB, 
// number of seconds the client (on B pointing to A) is valid without update
trustPeriodA, 
// number of seconds the client (on A pointing to B) is valid without update
trustPeriodB) {
    return __awaiter(this, void 0, void 0, function* () {
        // client on B pointing to A
        const args = yield ibcclient_1.buildCreateClientArgs(nodeA, trustPeriodA);
        const { clientId: clientIdB } = yield nodeB.createTendermintClient(args.clientState, args.consensusState);
        // client on A pointing to B
        const args2 = yield ibcclient_1.buildCreateClientArgs(nodeB, trustPeriodB);
        const { clientId: clientIdA } = yield nodeA.createTendermintClient(args2.clientState, args2.consensusState);
        return [clientIdA, clientIdB];
    });
}
//# sourceMappingURL=data:application/json;base64,