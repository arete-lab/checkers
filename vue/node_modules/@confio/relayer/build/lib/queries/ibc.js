"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupIbcExtension = exports.heightQueryString = void 0;
const encoding_1 = require("@cosmjs/encoding");
const stargate_1 = require("@cosmjs/stargate");
const long_1 = __importDefault(require("long"));
const proofs_1 = require("../../codec/confio/proofs");
const any_1 = require("../../codec/google/protobuf/any");
const channel_1 = require("../../codec/ibc/core/channel/v1/channel");
const query_1 = require("../../codec/ibc/core/channel/v1/query");
const query_2 = require("../../codec/ibc/core/client/v1/query");
const commitment_1 = require("../../codec/ibc/core/commitment/v1/commitment");
const connection_1 = require("../../codec/ibc/core/connection/v1/connection");
const query_3 = require("../../codec/ibc/core/connection/v1/query");
const tendermint_1 = require("../../codec/ibc/lightclients/tendermint/v1/tendermint");
function decodeTendermintClientStateAny(clientState) {
    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ClientState') {
        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);
    }
    return tendermint_1.ClientState.decode(clientState.value);
}
function decodeTendermintConsensusStateAny(clientState) {
    if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== '/ibc.lightclients.tendermint.v1.ConsensusState') {
        throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);
    }
    return tendermint_1.ConsensusState.decode(clientState.value);
}
function heightQueryString(height) {
    return `${height.revisionNumber}-${height.revisionHeight}`;
}
exports.heightQueryString = heightQueryString;
function setupIbcExtension(base) {
    const rpc = stargate_1.createProtobufRpcClient(base);
    // Use these services to get easy typed access to query methods
    // These cannot be used for proof verification
    const channelQueryService = new query_1.QueryClientImpl(rpc);
    const clientQueryService = new query_2.QueryClientImpl(rpc);
    const connectionQueryService = new query_3.QueryClientImpl(rpc);
    return {
        ibc: {
            channel: {
                channel: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.Channel({
                        portId,
                        channelId,
                    });
                }),
                channels: (paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.Channels({
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                }),
                allChannels: () => __awaiter(this, void 0, void 0, function* () {
                    var _a;
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = yield channelQueryService.Channels({
                            pagination: stargate_1.createPagination(key),
                        });
                        channels.push(...response.channels);
                        key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;
                    } while (key);
                    return {
                        channels,
                        height: response.height,
                    };
                }),
                connectionChannels: (connection, paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.ConnectionChannels({
                        connection,
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                }),
                allConnectionChannels: (connection) => __awaiter(this, void 0, void 0, function* () {
                    var _b;
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = yield channelQueryService.ConnectionChannels({
                            connection,
                            pagination: stargate_1.createPagination(key),
                        });
                        channels.push(...response.channels);
                        key = (_b = response.pagination) === null || _b === void 0 ? void 0 : _b.nextKey;
                    } while (key);
                    return {
                        channels,
                        height: response.height,
                    };
                }),
                clientState: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.ChannelClientState({
                        portId,
                        channelId,
                    });
                }),
                consensusState: (portId, channelId, revisionNumber, revisionHeight) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.ChannelConsensusState({
                        portId,
                        channelId,
                        revisionNumber: long_1.default.fromNumber(revisionNumber, true),
                        revisionHeight: long_1.default.fromNumber(revisionHeight, true),
                    });
                }),
                packetCommitment: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.PacketCommitment({
                        portId,
                        channelId,
                        sequence,
                    });
                }),
                packetCommitments: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.PacketCommitments({
                        channelId,
                        portId,
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                }),
                allPacketCommitments: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {
                    var _c;
                    const commitments = [];
                    let response;
                    let key;
                    do {
                        response = yield channelQueryService.PacketCommitments({
                            channelId,
                            portId,
                            pagination: stargate_1.createPagination(key),
                        });
                        commitments.push(...response.commitments);
                        key = (_c = response.pagination) === null || _c === void 0 ? void 0 : _c.nextKey;
                    } while (key);
                    return {
                        commitments,
                        height: response.height,
                    };
                }),
                packetReceipt: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.PacketReceipt({
                        portId,
                        channelId,
                        sequence: long_1.default.fromNumber(sequence, true),
                    });
                }),
                packetAcknowledgement: (portId, channelId, sequence) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.PacketAcknowledgement({
                        portId,
                        channelId,
                        sequence: long_1.default.fromNumber(sequence, true),
                    });
                }),
                packetAcknowledgements: (portId, channelId, paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.PacketAcknowledgements({
                        portId,
                        channelId,
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                }),
                allPacketAcknowledgements: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {
                    var _d;
                    const acknowledgements = [];
                    let response;
                    let key;
                    do {
                        response = yield channelQueryService.PacketAcknowledgements({
                            channelId,
                            portId,
                            pagination: stargate_1.createPagination(key),
                        });
                        acknowledgements.push(...response.acknowledgements);
                        key = (_d = response.pagination) === null || _d === void 0 ? void 0 : _d.nextKey;
                    } while (key);
                    return {
                        acknowledgements,
                        height: response.height,
                    };
                }),
                unreceivedPackets: (portId, channelId, packetCommitmentSequences) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.UnreceivedPackets({
                        portId,
                        channelId,
                        packetCommitmentSequences: packetCommitmentSequences.map((s) => long_1.default.fromNumber(s, true)),
                    });
                }),
                unreceivedAcks: (portId, channelId, packetAckSequences) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.UnreceivedAcks({
                        portId,
                        channelId,
                        packetAckSequences: packetAckSequences.map((s) => long_1.default.fromNumber(s, true)),
                    });
                }),
                nextSequenceReceive: (portId, channelId) => __awaiter(this, void 0, void 0, function* () {
                    return channelQueryService.NextSequenceReceive({
                        portId,
                        channelId,
                    });
                }),
            },
            client: {
                state: (clientId) => clientQueryService.ClientState({ clientId }),
                states: (paginationKey) => clientQueryService.ClientStates({
                    pagination: stargate_1.createPagination(paginationKey),
                }),
                allStates: () => __awaiter(this, void 0, void 0, function* () {
                    var _e;
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = yield clientQueryService.ClientStates({
                            pagination: stargate_1.createPagination(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = (_e = response.pagination) === null || _e === void 0 ? void 0 : _e.nextKey;
                    } while (key);
                    return {
                        clientStates,
                    };
                }),
                consensusState: (clientId, consensusHeight) => clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({
                    clientId,
                    revisionHeight: consensusHeight !== undefined
                        ? long_1.default.fromNumber(consensusHeight, true)
                        : undefined,
                    latestHeight: consensusHeight === undefined,
                })),
                consensusStates: (clientId, paginationKey) => clientQueryService.ConsensusStates({
                    clientId,
                    pagination: stargate_1.createPagination(paginationKey),
                }),
                allConsensusStates: (clientId) => __awaiter(this, void 0, void 0, function* () {
                    var _f;
                    const consensusStates = [];
                    let response;
                    let key;
                    do {
                        response = yield clientQueryService.ConsensusStates({
                            clientId,
                            pagination: stargate_1.createPagination(key),
                        });
                        consensusStates.push(...response.consensusStates);
                        key = (_f = response.pagination) === null || _f === void 0 ? void 0 : _f.nextKey;
                    } while (key);
                    return {
                        consensusStates,
                    };
                }),
                params: () => clientQueryService.ClientParams({}),
                stateTm: (clientId) => __awaiter(this, void 0, void 0, function* () {
                    const response = yield clientQueryService.ClientState({ clientId });
                    return decodeTendermintClientStateAny(response.clientState);
                }),
                statesTm: (paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    const { clientStates } = yield clientQueryService.ClientStates({
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                }),
                allStatesTm: () => __awaiter(this, void 0, void 0, function* () {
                    var _g;
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = yield clientQueryService.ClientStates({
                            pagination: stargate_1.createPagination(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = (_g = response.pagination) === null || _g === void 0 ? void 0 : _g.nextKey;
                    } while (key);
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                }),
                consensusStateTm: (clientId, consensusHeight) => __awaiter(this, void 0, void 0, function* () {
                    const response = yield clientQueryService.ConsensusState(query_2.QueryConsensusStateRequest.fromPartial({
                        clientId,
                        revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,
                        revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,
                        latestHeight: consensusHeight === undefined,
                    }));
                    return decodeTendermintConsensusStateAny(response.consensusState);
                }),
            },
            connection: {
                connection: (connectionId) => __awaiter(this, void 0, void 0, function* () {
                    return connectionQueryService.Connection({
                        connectionId,
                    });
                }),
                connections: (paginationKey) => __awaiter(this, void 0, void 0, function* () {
                    return connectionQueryService.Connections({
                        pagination: stargate_1.createPagination(paginationKey),
                    });
                }),
                allConnections: () => __awaiter(this, void 0, void 0, function* () {
                    var _h;
                    const connections = [];
                    let response;
                    let key;
                    do {
                        response = yield connectionQueryService.Connections({
                            pagination: stargate_1.createPagination(key),
                        });
                        connections.push(...response.connections);
                        key = (_h = response.pagination) === null || _h === void 0 ? void 0 : _h.nextKey;
                    } while (key);
                    return {
                        connections,
                        height: response.height,
                    };
                }),
                clientConnections: (clientId) => __awaiter(this, void 0, void 0, function* () {
                    return connectionQueryService.ClientConnections({
                        clientId,
                    });
                }),
                clientState: (connectionId) => __awaiter(this, void 0, void 0, function* () {
                    return connectionQueryService.ConnectionClientState({
                        connectionId,
                    });
                }),
                consensusState: (connectionId, revisionHeight) => __awaiter(this, void 0, void 0, function* () {
                    return connectionQueryService.ConnectionConsensusState(query_3.QueryConnectionConsensusStateRequest.fromPartial({
                        connectionId,
                        revisionHeight: long_1.default.fromNumber(revisionHeight, true),
                    }));
                }),
            },
            proof: {
                // these keys can all be found here: https://github.com/cosmos/cosmos-sdk/blob/v0.41.1/x/ibc/core/24-host/keys.go
                // note some have changed since the v0.40 pre-release this code was based on
                channel: {
                    channel: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120
                        const key = encoding_1.toAscii(`channelEnds/ports/${portId}/channels/${channelId}`);
                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const channel = channel_1.Channel.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            channel,
                            proof,
                            proofHeight,
                        };
                    }),
                    // designed only for timeout, modify if we need actual value not just proof
                    // could not verify absence of key receipts/ports/transfer/channels/channel-5/sequences/2
                    receiptProof: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = encoding_1.toAscii(`receipts/ports/${portId}/channels/${channelId}/sequences/${sequence}`);
                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const proof = convertProofsToIcs23(proven.proof);
                        return proof;
                    }),
                    packetCommitment: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = encoding_1.toAscii(`commitments/ports/${portId}/channels/${channelId}/sequences/${sequence.toNumber()}`);
                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const commitment = proven.value;
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            commitment,
                            proof,
                            proofHeight,
                        };
                    }),
                    packetAcknowledgement: (portId, channelId, sequence, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = encoding_1.toAscii(`acks/ports/${portId}/channels/${channelId}/sequences/${sequence}`);
                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const acknowledgement = proven.value;
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            acknowledgement,
                            proof,
                            proofHeight,
                        };
                    }),
                    nextSequenceReceive: (portId, channelId, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = encoding_1.toAscii(`nextSequenceRecv/ports/${portId}/channels/${channelId}`);
                        const proven = yield base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const nextSequenceReceive = long_1.default.fromBytesBE([...proven.value]);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            nextSequenceReceive,
                            proof,
                            proofHeight,
                        };
                    }),
                },
                client: {
                    state: (clientId, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = `clients/${clientId}/clientState`;
                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());
                        const clientState = any_1.Any.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            clientState,
                            proof,
                            proofHeight,
                        };
                    }),
                    consensusState: (clientId, consensusHeight, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const height = heightQueryString(consensusHeight);
                        const key = `clients/${clientId}/consensusStates/${height}`;
                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());
                        const consensusState = any_1.Any.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            consensusState,
                            proof,
                            proofHeight,
                        };
                    }),
                },
                connection: {
                    connection: (connectionId, proofHeight) => __awaiter(this, void 0, void 0, function* () {
                        const key = `connections/${connectionId}`;
                        const proven = yield base.queryRawProof('ibc', encoding_1.toAscii(key), proofHeight.revisionHeight.toNumber());
                        const connection = connection_1.ConnectionEnd.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            connection,
                            proof,
                            proofHeight,
                        };
                    }),
                },
            },
        },
    };
}
exports.setupIbcExtension = setupIbcExtension;
function convertProofsToIcs23(ops) {
    const proofs = ops.ops.map((op) => proofs_1.CommitmentProof.decode(op.data));
    const resp = commitment_1.MerkleProof.fromPartial({
        proofs,
    });
    return commitment_1.MerkleProof.encode(resp).finish();
}
//# sourceMappingURL=data:application/json;base64,