"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = exports.resolveLevel = exports.defaultLevel = exports.levels = void 0;
const winston_1 = __importDefault(require("winston"));
const resolve_option_1 = require("./utils/options/resolve-option");
exports.levels = {
    error: 0,
    warn: 1,
    info: 2,
    verbose: 3,
    debug: 4,
};
exports.defaultLevel = 'info'; // if not provided
function validateLevel(level) {
    return level ? Object.keys(exports.levels).includes(level) : false;
}
function resolveLevel(flags) {
    const level = resolve_option_1.resolveOption('logLevel')(flags.logLevel, process.env.RELAYER_LOG_LEVEL);
    if (level !== null && !validateLevel(level)) {
        return [exports.defaultLevel, level];
    }
    const levelValue = exports.levels[level !== null && level !== void 0 ? level : 'error'];
    if (flags.verbose && levelValue < exports.levels.verbose) {
        return ['verbose', null];
    }
    if (flags.quiet && levelValue <= exports.levels.error) {
        return ['error', null];
    }
    if (level) {
        return [level, null];
    }
    return [exports.defaultLevel, null];
}
exports.resolveLevel = resolveLevel;
function createLogger(flags) {
    const [level, invalidInputLevel] = resolveLevel(flags);
    const fileTransport = flags.logFile
        ? [
            new winston_1.default.transports.File({
                handleExceptions: true,
                filename: flags.logFile,
                format: winston_1.default.format.combine(winston_1.default.format.timestamp()),
            }),
        ]
        : [];
    const logger = winston_1.default.createLogger({
        level,
        levels: exports.levels,
        format: winston_1.default.format.combine(winston_1.default.format.errors({ stack: true }), winston_1.default.format.json()),
        transports: [
            new winston_1.default.transports.Console({
                handleExceptions: true,
                format: winston_1.default.format.combine(winston_1.default.format.colorize(), winston_1.default.format.simple()),
            }),
            ...fileTransport,
        ],
    });
    if (invalidInputLevel !== null) {
        logger.error(`Invalid log-level "${invalidInputLevel}". Please use one of: ${Object.keys(exports.levels)
            .map((level) => `"${level}"`)
            .join(', ')}`);
    }
    return logger;
}
exports.createLogger = createLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWxvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW5hcnkvY3JlYXRlLWxvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxzREFBOEI7QUFHOUIsbUVBQStEO0FBRWxELFFBQUEsTUFBTSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxDQUFDO0lBQ1IsSUFBSSxFQUFFLENBQUM7SUFDUCxJQUFJLEVBQUUsQ0FBQztJQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1YsS0FBSyxFQUFFLENBQUM7Q0FDVCxDQUFDO0FBR1csUUFBQSxZQUFZLEdBQUcsTUFBTSxDQUFDLENBQUMsa0JBQWtCO0FBRXRELFNBQVMsYUFBYSxDQUFDLEtBQW9CO0lBQ3pDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzdELENBQUM7QUFFRCxTQUFnQixZQUFZLENBQzFCLEtBQWtCO0lBRWxCLE1BQU0sS0FBSyxHQUFHLDhCQUFhLENBQUMsVUFBVSxDQUFDLENBQ3JDLEtBQUssQ0FBQyxRQUFRLEVBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FDOUIsQ0FBQztJQUVGLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMzQyxPQUFPLENBQUMsb0JBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztLQUM5QjtJQUVELE1BQU0sVUFBVSxHQUFHLGNBQU0sQ0FBQyxLQUFLLGFBQUwsS0FBSyxjQUFMLEtBQUssR0FBSSxPQUFPLENBQUMsQ0FBQztJQUU1QyxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksVUFBVSxHQUFHLGNBQU0sQ0FBQyxPQUFPLEVBQUU7UUFDaEQsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMxQjtJQUVELElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxVQUFVLElBQUksY0FBTSxDQUFDLEtBQUssRUFBRTtRQUM3QyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0lBRUQsSUFBSSxLQUFLLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsT0FBTyxDQUFDLG9CQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQTNCRCxvQ0EyQkM7QUFFRCxTQUFnQixZQUFZLENBQUMsS0FBa0I7SUFDN0MsTUFBTSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2RCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsT0FBTztRQUNqQyxDQUFDLENBQUM7WUFDRSxJQUFJLGlCQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztnQkFDMUIsZ0JBQWdCLEVBQUUsSUFBSTtnQkFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPO2dCQUN2QixNQUFNLEVBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQzNELENBQUM7U0FDSDtRQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFUCxNQUFNLE1BQU0sR0FBRyxpQkFBTyxDQUFDLFlBQVksQ0FBQztRQUNsQyxLQUFLO1FBQ0wsTUFBTSxFQUFOLGNBQU07UUFDTixNQUFNLEVBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUM1QixpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDdEMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQ3RCO1FBQ0QsVUFBVSxFQUFFO1lBQ1YsSUFBSSxpQkFBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7Z0JBQzdCLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLE1BQU0sRUFBRSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQzVCLGlCQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUN6QixpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FDeEI7YUFDRixDQUFDO1lBRUYsR0FBRyxhQUFhO1NBQ2pCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsSUFBSSxpQkFBaUIsS0FBSyxJQUFJLEVBQUU7UUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FDVixzQkFBc0IsaUJBQWlCLHlCQUF5QixNQUFNLENBQUMsSUFBSSxDQUN6RSxjQUFNLENBQ1A7YUFDRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUM7YUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQ2hCLENBQUM7S0FDSDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUE1Q0Qsb0NBNENDIn0=