"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@cosmjs/utils");
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const InvalidOptionError_1 = require("../../exceptions/InvalidOptionError");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
function resolveHeights({ scanFromSrc, scanFromDest, home }, logger) {
    if (!scanFromSrc && scanFromDest) {
        throw new InvalidOptionError_1.InvalidOptionError(`You have defined "scanFromDest" but no "scanFromSrc". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && !scanFromDest) {
        throw new InvalidOptionError_1.InvalidOptionError(`You have defined "scanFromSrc" but no "scanFromDest". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && scanFromDest) {
        logger.info('Use heights from the command line arguments.');
        return {
            packetHeightA: scanFromSrc,
            ackHeightA: scanFromSrc,
            packetHeightB: scanFromDest,
            ackHeightB: scanFromDest,
        };
    }
    const lastQueriedHeightsFilePath = path_1.default.join(home, constants_1.lastQueriedHeightsFile);
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const heights = require(lastQueriedHeightsFilePath);
        logger.info(`Use last queried heights from ${lastQueriedHeightsFilePath} file.`);
        return heights;
    }
    catch (_a) {
        logger.info('Scanning the entire history for packets... This may take some time.');
    }
    return null;
}
// some defaults for looping
const defaultOptions = {
    // check once per minute
    poll: 60,
    // once per day: 86400s
    maxAgeSrc: 86400,
    maxAgeDest: 86400,
    once: false,
};
async function start(flags, logger) {
    const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
    const app = load_and_validate_app_1.loadAndValidateApp(home);
    const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolve_mnemonic_option_1.resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        keyFile,
        app,
    });
    const src = resolve_option_1.resolveOption('src', { required: true })(flags.src, app === null || app === void 0 ? void 0 : app.src, process.env.RELAYER_SRC);
    const dest = resolve_option_1.resolveOption('dest', { required: true })(flags.dest, app === null || app === void 0 ? void 0 : app.dest, process.env.RELAYER_DEST);
    const srcConnection = resolve_option_1.resolveOption('srcConnection', { required: true })(flags.srcConnection, app === null || app === void 0 ? void 0 : app.srcConnection, process.env.RELAYER_SRC_CONNECTION);
    const destConnection = resolve_option_1.resolveOption('destConnection', { required: true })(flags.destConnection, app === null || app === void 0 ? void 0 : app.destConnection, process.env.RELAYER_DEST_CONNECTION);
    // TODO: add this in app.yaml, process.env
    const poll = resolve_option_1.resolveOption('poll', { required: true, integer: true })(flags.poll, defaultOptions.poll);
    const maxAgeSrc = resolve_option_1.resolveOption('maxAgeSrc', {
        required: true,
        integer: true,
    })(flags.maxAgeSrc, defaultOptions.maxAgeSrc);
    const maxAgeDest = resolve_option_1.resolveOption('maxAgeB', {
        required: true,
        integer: true,
    })(flags.maxAgeDest, defaultOptions.maxAgeDest);
    const scanFromSrc = resolve_option_1.resolveOption('scanFromSrc', { integer: true })(flags.scanFromSrc, process.env.RELAYER_SCAN_FROM_SRC);
    const scanFromDest = resolve_option_1.resolveOption('scanFromDest', { integer: true })(flags.scanFromDest, process.env.RELAYER_SCAN_FROM_DEST);
    const heights = resolveHeights({ scanFromSrc, scanFromDest, home }, logger);
    // FIXME: any env variable for this?
    const once = flags.once;
    const options = {
        src,
        dest,
        home,
        mnemonic,
        srcConnection,
        destConnection,
        poll,
        maxAgeSrc,
        maxAgeDest,
        once,
        heights,
    };
    await run(options, logger);
}
exports.start = start;
async function run(options, logger) {
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    const { chains } = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const srcChain = chains[options.src];
    if (!srcChain) {
        throw new Error('src chain not found in registry');
    }
    const destChain = chains[options.dest];
    if (!destChain) {
        throw new Error('dest chain not found in registry');
    }
    const nodeA = await signing_client_1.signingClient(srcChain, options.mnemonic, logger);
    const nodeB = await signing_client_1.signingClient(destChain, options.mnemonic, logger);
    const link = await link_1.Link.createWithExistingConnections(nodeA, nodeB, options.srcConnection, options.destConnection, logger);
    await relayerLoop(link, options, logger);
}
async function relayerLoop(link, options, logger) {
    var _a;
    let nextRelay = (_a = options.heights) !== null && _a !== void 0 ? _a : {};
    const lastQueriedHeightsFilePath = path_1.default.join(options.home, constants_1.lastQueriedHeightsFile);
    const done = false;
    while (!done) {
        try {
            // TODO: make timeout windows more configurable
            nextRelay = await link.checkAndRelayPacketsAndAcks(nextRelay, 2, 6);
            fs_1.default.writeFileSync(lastQueriedHeightsFilePath, JSON.stringify(nextRelay, null, 2));
            // ensure the headers are up to date (only submits if old and we didn't just update them above)
            logger.info('Ensuring clients are not stale');
            await link.updateClientIfStale('A', options.maxAgeDest);
            await link.updateClientIfStale('B', options.maxAgeSrc);
        }
        catch (e) {
            logger.error(`Caught error: `, e);
        }
        if (options.once) {
            logger.info('Quitting after one run (--once set)');
            return;
        }
        // sleep until the next step
        logger.info(`Sleeping ${options.poll} seconds...`);
        await utils_1.sleep(options.poll * 1000);
        logger.info('... waking up and checking for packets!');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2NvbW1hbmRzL3N0YXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQixnREFBd0I7QUFFeEIseUNBQXNDO0FBR3RDLDRDQUF5QztBQUV6QywrQ0FBdUU7QUFDdkUsNEVBQXlFO0FBRXpFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQVEzRCxTQUFTLGNBQWMsQ0FDckIsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBd0IsRUFDekQsTUFBYztJQUVkLElBQUksQ0FBQyxXQUFXLElBQUksWUFBWSxFQUFFO1FBQ2hDLE1BQU0sSUFBSSx1Q0FBa0IsQ0FDMUIsc0hBQXNILENBQ3ZILENBQUM7S0FDSDtJQUVELElBQUksV0FBVyxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ2hDLE1BQU0sSUFBSSx1Q0FBa0IsQ0FDMUIsc0hBQXNILENBQ3ZILENBQUM7S0FDSDtJQUVELElBQUksV0FBVyxJQUFJLFlBQVksRUFBRTtRQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7UUFDNUQsT0FBTztZQUNMLGFBQWEsRUFBRSxXQUFXO1lBQzFCLFVBQVUsRUFBRSxXQUFXO1lBQ3ZCLGFBQWEsRUFBRSxZQUFZO1lBQzNCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUM7S0FDSDtJQUVELE1BQU0sMEJBQTBCLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsa0NBQXNCLENBQUMsQ0FBQztJQUMzRSxJQUFJO1FBQ0YsOERBQThEO1FBQzlELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxJQUFJ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