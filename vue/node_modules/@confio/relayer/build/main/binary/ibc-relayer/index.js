#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = require("commander");
const commander_options_1 = require("../commander-options");
const logger_with_error_boundary_1 = require("../utils/logger-with-error-boundary");
const start_1 = require("./commands/start");
const program = new commander_1.Command();
program.description('ibc-relayer program description');
const startCommand = program
    .command('start')
    .description('start command description')
    .addOption(commander_options_1.homeOption)
    .addOption(commander_options_1.srcOption)
    .addOption(commander_options_1.destOption)
    .addOption(commander_options_1.interactiveOption)
    .addOption(commander_options_1.keyFileOption)
    .addOption(commander_options_1.mnemonicOption)
    .option('--src-connection <connection>')
    .option('--dest-connection <connection>')
    .option('--poll <frequency>', 'how many second we sleep between checking for packets')
    .option('--max-age-src <seconds>', 'how old can the client on src chain be, before we update it')
    .option('--max-age-dest <seconds>', 'how old can the client on dest chain be, before we update it')
    .option('--scan-from-src <height>')
    .option('--scan-from-dest <height>')
    // note: once is designed for debugging and unit tests
    .option('--once', 'just relay pending packets and quit, no polling')
    .action(logger_with_error_boundary_1.loggerWithErrorBoundary(start_1.start));
commander_options_1.addLoggerOptionsTo(startCommand);
program.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLHlDQUFvQztBQUVwQyw0REFROEI7QUFDOUIsb0ZBQThFO0FBRTlFLDRDQUF5QztBQUV6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLG1CQUFPLEVBQUUsQ0FBQztBQUU5QixPQUFPLENBQUMsV0FBVyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFFdkQsTUFBTSxZQUFZLEdBQUcsT0FBTztLQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2hCLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQztLQUN4QyxTQUFTLENBQUMsOEJBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsNkJBQVMsQ0FBQztLQUNwQixTQUFTLENBQUMsOEJBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMscUNBQWlCLENBQUM7S0FDNUIsU0FBUyxDQUFDLGlDQUFhLENBQUM7S0FDeEIsU0FBUyxDQUFDLGtDQUFjLENBQUM7S0FDekIsTUFBTSxDQUFDLCtCQUErQixDQUFDO0tBQ3ZDLE1BQU0sQ0FBQyxnQ0FBZ0MsQ0FBQztLQUN4QyxNQUFNLENBQ0wsb0JBQW9CLEVBQ3BCLHVEQUF1RCxDQUN4RDtLQUNBLE1BQU0sQ0FDTCx5QkFBeUIsRUFDekIsNkRBQTZELENBQzlEO0tBQ0EsTUFBTSxDQUNMLDBCQUEwQixFQUMxQiw4REFBOEQsQ0FDL0Q7S0FDQSxNQUFNLENBQUMsMEJBQTBCLENBQUM7S0FDbEMsTUFBTSxDQUFDLDJCQUEyQixDQUFDO0lBQ3BDLHNEQUFzRDtLQUNyRCxNQUFNLENBQUMsUUFBUSxFQUFFLGlEQUFpRCxDQUFDO0tBQ25FLE1BQU0sQ0FBQyxvREFBdUIsQ0FBQyxhQUFLLENBQUMsQ0FBQyxDQUFDO0FBRTFDLHNDQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRWpDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDIn0=