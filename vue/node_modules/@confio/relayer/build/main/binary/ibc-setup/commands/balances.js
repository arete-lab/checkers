"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.balances = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const crypto_1 = require("@cosmjs/crypto");
const launchpad_1 = require("@cosmjs/launchpad");
const proto_signing_1 = require("@cosmjs/proto-signing");
const ibcclient_1 = require("../../../lib/ibcclient");
const constants_1 = require("../../constants");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const keys_list_1 = require("./keys-list");
async function balances(flags, logger) {
    const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
    const app = load_and_validate_app_1.loadAndValidateApp(home);
    const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolve_mnemonic_option_1.resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile: keyFile,
        app,
    });
    const options = {
        home,
        mnemonic,
    };
    await run(options, logger);
}
exports.balances = balances;
async function run(options, logger) {
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const addresses = await keys_list_1.getAddresses(registry.chains, options.mnemonic);
    const balances = (await Promise.all(addresses.map(async ([chain, data, address]) => {
        const signer = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(options.mnemonic, data.hd_path ? crypto_1.stringToPath(data.hd_path) : undefined, data.prefix);
        const gasPrice = launchpad_1.GasPrice.fromString(data.gas_price);
        const client = await ibcclient_1.IbcClient.connectWithSigner(data.rpc[0], // rpc[0] is guaranteed to be defined by registry validator
        signer, address, {
            prefix: data.prefix,
            gasPrice,
        });
        const coin = await client.query.bank.unverified.balance(address, gasPrice.denom);
        return [chain, coin];
    })))
        .filter(([, coin]) => coin.amount !== '0')
        .map(([chain, coin]) => `${chain}: ${coin.amount}${coin.denom}`)
        .join(os_1.default.EOL);
    if (!balances) {
        logger.info('No funds found for default denomination on any chain.');
        return;
    }
    logger.info(balances);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9iYWxhbmNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLDJDQUE4QztBQUM5QyxpREFBNkM7QUFDN0MseURBQWdFO0FBSWhFLHNEQUFtRDtBQUNuRCwrQ0FBK0M7QUFDL0MsNkVBQXVFO0FBQ3ZFLHVGQUFpRjtBQUNqRix3RkFBbUY7QUFDbkYsZ0dBQTBGO0FBQzFGLGdHQUEyRjtBQUUzRiwyQ0FBMkQ7QUFFcEQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFZLEVBQUUsTUFBYztJQUN6RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBRyw4Q0FBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUUsTUFBTSxRQUFRLEdBQUcsTUFBTSwrQ0FBcUIsQ0FBQztRQUMzQyxlQUFlLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDbEMsWUFBWSxFQUFFLEtBQUssQ0FBQyxRQUFRO1FBQzVCLE9BQU8sRUFBRSxPQUFPO1FBQ2hCLEdBQUc7S0FDSixDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBWTtRQUN2QixJQUFJO1FBQ0osUUFBUTtLQUNULENBQUM7SUFFRixNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQWpCRCw0QkFpQkM7QUFFTSxLQUFLLFVBQVUsR0FBRyxDQUFDLE9BQWdCLEVBQUUsTUFBYztJQUN4RCxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSx3QkFBWSxDQUFDLENBQUM7SUFDL0QsTUFBTSxRQUFRLEdBQUcsb0RBQXVCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUUzRCxNQUFNLFNBQVMsR0FBRyxNQUFNLHdCQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFeEUsTUFBTSxRQUFRLEdBQUcsQ0FDZixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsU0FBUyxDQUFDLEdBQUcsQ0FBMEIsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ3RFLE1BQU0sTUFBTSxHQUFHLE1BQU0sdUNBQXVCLENBQUMsWUFBWSxDQUN2RCxPQUFPLENBQUMsUUFBUSxFQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxxQkFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUNyRCxJQUFJLENBQUMsTUFBTSxDQUNaLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckQsTUFBTSxNQUFNLEdBQUcsTUFBTSxxQkFBUyxDQUFDLGlCQUFpQixDQUM5QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLDJEQUEyRDtRQUN4RSxNQUFNLEVBQ04sT0FBTyxFQUNQO1lBQ0UsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVE7U0FDVCxDQUNGLENBQUM7UUFFRixNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQ3JELE9BQU8sRUFDUCxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7UUFFRixPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUNILENBQ0Y7U0FDRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDO1NBQ3pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMvRCxJQUFJLENBQUMsWUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7UUFDckUsT0FBTztLQUNSO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBOUNELGtCQThDQyJ9