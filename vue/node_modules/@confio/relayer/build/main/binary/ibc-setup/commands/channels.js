"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.channels = void 0;
const path_1 = __importDefault(require("path"));
const channel_1 = require("../../../codec/ibc/core/channel/v1/channel");
const constants_1 = require("../../constants");
const border_less_table_1 = require("../../utils/border-less-table");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
async function channels(flags, logger) {
    const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
    const app = load_and_validate_app_1.loadAndValidateApp(home);
    const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const chain = resolve_option_1.resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
    const port = resolve_option_1.resolveOption('port')(flags.port, process.env.RELAYER_PORT);
    const mnemonic = await resolve_mnemonic_option_1.resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    }, true // mnemonic is optional
    );
    const options = {
        home,
        chain,
        mnemonic,
        port,
    };
    await run(options, logger);
}
exports.channels = channels;
function channelStateAsText(state) {
    switch (state) {
        case channel_1.State.STATE_CLOSED:
            return 'Closed';
        case channel_1.State.STATE_INIT:
            return 'Init';
        case channel_1.State.STATE_OPEN:
            return 'Open';
        case channel_1.State.STATE_TRYOPEN:
            return 'Tryopen';
        case channel_1.State.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case channel_1.State.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
async function run(options, logger) {
    var _a;
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const chain = registry.chains[options.chain];
    if (!chain) {
        throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
    }
    const mnemonic = (_a = options.mnemonic) !== null && _a !== void 0 ? _a : generate_mnemonic_1.generateMnemonic();
    const client = await signing_client_1.signingClient(chain, mnemonic, logger);
    const { channels: allChannels, } = await client.query.ibc.channel.allChannels();
    const channels = allChannels
        .filter((channel) => (options.port ? channel.portId === options.port : true) // don't filter if port is not specified
    )
        .map((channel) => [
        channel.channelId,
        channel.portId,
        channelStateAsText(channel.state),
    ]);
    if (!channels.length) {
        const conditionalPortInfo = options.port
            ? ` on port "${options.port}".`
            : '.';
        logger.info(`No channels found for chain "${options.chain}"${conditionalPortInfo}`);
        return;
    }
    const output = border_less_table_1.borderLessTable([
        ['CHANNEL_ID', 'PORT', 'STATE'],
        ...channels,
    ]);
    console.log(output);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFJeEIsd0VBQW1GO0FBQ25GLCtDQUErQztBQUMvQyxxRUFBZ0U7QUFDaEUscUVBQWlFO0FBQ2pFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQWtCcEQsS0FBSyxVQUFVLFFBQVEsQ0FBQyxLQUFZLEVBQUUsTUFBYztJQUN6RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBRyw4Q0FBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUUsTUFBTSxLQUFLLEdBQUcsOEJBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdEQsS0FBSyxDQUFDLEtBQUssRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNGLE1BQU0sSUFBSSxHQUFHLDhCQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXpFLE1BQU0sUUFBUSxHQUFHLE1BQU0sK0NBQXFCLENBQzFDO1FBQ0UsZUFBZSxFQUFFLEtBQUssQ0FBQyxXQUFXO1FBQ2xDLFlBQVksRUFBRSxLQUFLLENBQUMsUUFBUTtRQUM1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