"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.connections = void 0;
const path_1 = __importDefault(require("path"));
const connection_1 = require("../../../codec/ibc/core/connection/v1/connection");
const constants_1 = require("../../constants");
const border_less_table_1 = require("../../utils/border-less-table");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
async function connections(flags, logger) {
    const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
    const app = load_and_validate_app_1.loadAndValidateApp(home);
    const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const chain = resolve_option_1.resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
    const mnemonic = await resolve_mnemonic_option_1.resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    }, true // mnemonic is optional
    );
    const options = {
        home,
        chain,
        mnemonic,
    };
    await run(options, logger);
}
exports.connections = connections;
function connectionStateAsText(state) {
    switch (state) {
        case connection_1.State.STATE_INIT:
            return 'Init';
        case connection_1.State.STATE_OPEN:
            return 'Open';
        case connection_1.State.STATE_TRYOPEN:
            return 'Tryopen';
        case connection_1.State.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case connection_1.State.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
async function run(options, logger) {
    var _a;
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const chain = registry.chains[options.chain];
    if (!chain) {
        throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
    }
    const mnemonic = (_a = options.mnemonic) !== null && _a !== void 0 ? _a : generate_mnemonic_1.generateMnemonic();
    const client = await signing_client_1.signingClient(chain, mnemonic, logger);
    const { connections: allConnections, } = await client.query.ibc.connection.allConnections();
    const connections = allConnections.map((connection) => [
        connection.id,
        connection.clientId,
        connection.delayPeriod.toString(10),
        connectionStateAsText(connection.state),
    ]);
    if (!connections.length) {
        logger.info(`No connections found for chain "${options.chain}".`);
        return;
    }
    const output = border_less_table_1.borderLessTable([
        ['CONNECTION_ID', 'CLIENT_ID', 'DELAY', 'STATE'],
        ...connections,
    ]);
    console.log(output);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jb25uZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFJeEIsaUZBQTRGO0FBRTVGLCtDQUErQztBQUMvQyxxRUFBZ0U7QUFDaEUscUVBQWlFO0FBQ2pFLDZFQUF1RTtBQUN2RSx1RkFBaUY7QUFDakYsdUVBQW1FO0FBQ25FLHdGQUFtRjtBQUNuRixnR0FBMEY7QUFDMUYsZ0dBQTJGO0FBQzNGLCtEQUEyRDtBQWdCcEQsS0FBSyxVQUFVLFdBQVcsQ0FBQyxLQUFZLEVBQUUsTUFBYztJQUM1RCxNQUFNLElBQUksR0FBRyx1Q0FBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxNQUFNLEdBQUcsR0FBRywwQ0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxNQUFNLE9BQU8sR0FBRyw4Q0FBb0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUUsTUFBTSxLQUFLLEdBQUcsOEJBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDdEQsS0FBSyxDQUFDLEtBQUssRUFDWCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLE1BQU0sK0NBQXFCLENBQzFDO1FBQ0UsZUFBZSxFQUFFLEtBQUssQ0FBQyxXQUFXO1FBQ2xDLFlBQVksRUFBRSxLQUFLLENBQUMsUUFBUTtRQUM1QixPQUFPO1FBQ1AsR0FBRztLQUNKLEVBQ0QsSUFBSSxDQUFDLHVCQUF1QjtLQUM3QixDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQVk7UUFDdkIsSUFBSTtRQUNKLEtBQUs7UUFDTCxRQUFRO0tBQ1QsQ0FBQztJQUVGLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBMUJELGtDQTBCQztBQUVELFNBQVMscUJBQXFCLENBQUMsS0FBc0I7SUFDbkQsUUFBUSxLQUFLLEVBQUU7UUFDYixLQUFLLGtCQUFlLENBQUMsVUFBVTtZQUM3QixPQUFPLE1BQU0sQ0FBQztRQUVoQixLQUFLLGtCQUFlLENBQUMsVUFBVTtZQUM3QixPQUFPLE1BQU0sQ0FBQztRQUVoQixLQUFLLGtCQUFlLENBQUMsYUFBYTtZQUNoQyxPQUFPLFNBQVMsQ0FBQztRQUVuQixLQUFLLGtCQUFlLENBQUMsK0JBQStCO1lBQ2xELE9BQU8sMEJBQTBCLENBQUM7UUFFcEMsS0FBSyxrQkFBZSxDQUFDLFlBQVksQ0FBQztRQUNsQztZQUNFLE9BQU8sY0FBYyxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQztBQUVNLEtBQUssVUFBVSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxNQUFjOztJQUN4RCxNQUFNLGdCQUFnQixHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSx3QkFBWSxDQUFDLENBQUM7SUFDL0QsTUFBTSxRQUFRLEdBQUcsb0RBQXVCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUUzRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixnQkFBZ0IsR0FBRyxDQUFDLENBQUM7S0FDN0U7SUFFRCxNQUFNLFFBQVEsU0FBRyxPQUFPLENBQUMsUUFBUSxtQ0FBSSxvQ0FBZ0IsRUFBRSxDQUFDO0lBRXhELE1BQU0sTUFBTSxHQUFHLE1BQU0sOEJBQWEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRTVELE1BQU0sRUFDSixXQUFXLEVBQUUsY0FBYyxHQUM1QixHQUFHLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBRXZELE1BQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFnQyxFQUFFLEVBQUUsQ0FBQztRQUMzRSxVQUFVLENBQUMsRUFBRTtRQUNiLFVBQVUsQ0FBQyxRQUFRO1FBQ25CLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUNuQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBRWxFLE9BQU87S0FDUjtJQUVELE1BQU0sTUFBTSxHQUFHLG1DQUFlLENBQUM7UUFDN0IsQ0FBQyxlQUFlLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7UUFDaEQsR0FBRyxXQUFXO0tBQ2YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBcENELGtCQW9DQyJ9