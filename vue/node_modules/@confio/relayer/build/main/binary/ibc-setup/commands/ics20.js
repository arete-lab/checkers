"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.ics20 = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const channel_1 = require("../../../codec/ibc/core/channel/v1/channel");
const link_1 = require("../../../lib/link");
const constants_1 = require("../../constants");
const load_and_validate_app_1 = require("../../utils/load-and-validate-app");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
const resolve_home_option_1 = require("../../utils/options/shared/resolve-home-option");
const resolve_key_file_option_1 = require("../../utils/options/shared/resolve-key-file-option");
const resolve_mnemonic_option_1 = require("../../utils/options/shared/resolve-mnemonic-option");
const signing_client_1 = require("../../utils/signing-client");
const defaultPort = 'transfer';
function resolveConnections({ srcConnection, destConnection, }) {
    if (!srcConnection && destConnection) {
        throw new Error(`You have defined "destConnection" but no "srcConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && !destConnection) {
        throw new Error(`You have defined "srcConnection" but no "destConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && destConnection) {
        return {
            src: srcConnection,
            dest: destConnection,
        };
    }
    return null;
}
async function ics20(flags, logger) {
    const home = resolve_home_option_1.resolveHomeOption({ homeFlag: flags.home });
    const app = load_and_validate_app_1.loadAndValidateApp(home);
    if (!app) {
        throw new Error(`${constants_1.appFile} not found at ${home}`);
    }
    const keyFile = resolve_key_file_option_1.resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolve_mnemonic_option_1.resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    });
    const src = resolve_option_1.resolveOption('src', { required: true })(flags.src, app.src, process.env.RELAYER_SRC);
    const dest = resolve_option_1.resolveOption('dest', { required: true })(flags.dest, app.dest, process.env.RELAYER_DEST);
    // we apply default ports later, once we have the registry
    const srcPort = resolve_option_1.resolveOption('srcPort')(flags.srcPort, process.env.RELAYER_SRC_PORT);
    const destPort = resolve_option_1.resolveOption('destPort')(flags.destPort, process.env.RELAYER_DEST_PORT);
    const connections = resolveConnections(app);
    run({
        src,
        dest,
        home,
        mnemonic,
        srcPort,
        destPort,
        connections,
    }, app, logger);
}
exports.ics20 = ics20;
async function resolveLink(nodeA, nodeB, connections, logger) {
    if (connections) {
        const link = await link_1.Link.createWithExistingConnections(nodeA, nodeB, connections.src, connections.dest, logger);
        logger.info(`Used existing connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
        return link;
    }
    const link = await link_1.Link.createWithNewConnections(nodeA, nodeB);
    logger.info(`Created connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
    return link;
}
async function run(options, app, logger) {
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    const { chains } = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const srcChain = chains[options.src];
    if (!srcChain) {
        throw new Error('src chain not found in registry');
    }
    const destChain = chains[options.dest];
    if (!destChain) {
        throw new Error('dest chain not found in registry');
    }
    const ordering = channel_1.Order.ORDER_UNORDERED;
    const version = 'ics20-1';
    const nodeA = await signing_client_1.signingClient(srcChain, options.mnemonic, logger);
    const nodeB = await signing_client_1.signingClient(destChain, options.mnemonic, logger);
    const link = await resolveLink(nodeA, nodeB, options.connections, logger);
    const srcConnection = link.endA.connectionID;
    const destConnection = link.endB.connectionID;
    const appFilePath = path_1.default.join(options.home, constants_1.appFile);
    const appYaml = js_yaml_1.default.dump(Object.assign(Object.assign({}, app), { srcConnection,
        destConnection }), {
        lineWidth: 1000,
    });
    fs_1.default.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
    // provide default port, either from registry or global default
    const srcPort = resolve_option_1.resolveOption('src-port', { required: true })(options.srcPort, srcChain.ics20_port, defaultPort);
    const destPort = resolve_option_1.resolveOption('dest-port', { required: true })(options.destPort, destChain.ics20_port, defaultPort);
    const channels = await link.createChannel('A', srcPort, destPort, ordering, version);
    logger.info(`Created channels for connections ${link.endA.connectionID} <=> ${link.endB.connectionID}: ${channels.src.channelId} (${channels.src.portId}) => ${channels.dest.channelId} (${channels.dest.portId})`);
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzMjAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9pY3MyMC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLHNEQUEyQjtBQUczQix3RUFBbUU7QUFFbkUsNENBQXlDO0FBQ3pDLCtDQUF3RDtBQUV4RCw2RUFBdUU7QUFDdkUsdUZBQWlGO0FBQ2pGLHVFQUFtRTtBQUNuRSx3RkFBbUY7QUFDbkYsZ0dBQTBGO0FBQzFGLGdHQUEyRjtBQUMzRiwrREFBMkQ7QUE0QjNELE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQztBQUUvQixTQUFTLGtCQUFrQixDQUFDLEVBQzFCLGFBQWEsRUFDYixjQUFjLEdBQ0o7SUFDVixJQUFJLENBQUMsYUFBYSxJQUFJLGNBQWMsRUFBRTtRQUNwQyxNQUFNLElBQUksS0FBSyxDQUNiLHNIQUFzSCxDQUN2SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLGFBQWEsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNwQyxNQUFNLElBQUksS0FBSyxDQUNiLHNIQUFzSCxDQUN2SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLGFBQWEsSUFBSSxjQUFjLEVBQUU7UUFDbkMsT0FBTztZQUNMLEdBQUcsRUFBRSxhQUFhO1lBQ2xCLElBQUksRUFBRSxjQUFjO1NBQ3JCLENBQUM7S0FDSDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVNLEtBQUssVUFBVSxLQUFLLENBQUMsS0FBWSxFQUFFLE1BQWM7SUFDdEQsTUFBTSxJQUFJLEdBQUcsdUNBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxHQUFHLEdBQUcsMENBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFckMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE1BQU0sSUFBSSxLQUFL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