"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.init = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const faucet_client_1 = require("@cosmjs/faucet-client");
const axios_1 = __importDefault(require("axios"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const constants_1 = require("../../constants");
const types_1 = require("../../types");
const derive_address_1 = require("../../utils/derive-address");
const generate_mnemonic_1 = require("../../utils/generate-mnemonic");
const get_default_home_path_1 = require("../../utils/get-default-home-path");
const load_and_validate_registry_1 = require("../../utils/load-and-validate-registry");
const resolve_option_1 = require("../../utils/options/resolve-option");
async function init(flags, logger) {
    const options = {
        src: resolve_option_1.resolveOption('src', {
            required: true,
        })(flags.src, process.env.RELAYER_SRC),
        dest: resolve_option_1.resolveOption('dest', {
            required: true,
        })(flags.dest, process.env.RELAYER_DEST),
        home: resolve_option_1.resolveOption('home', { required: true })(flags.home, process.env.RELAYER_HOME, get_default_home_path_1.getDefaultHomePath),
    };
    await run(options, logger);
}
exports.init = init;
async function run(options, logger) {
    const appFilePath = path_1.default.join(options.home, constants_1.appFile);
    if (fs_1.default.existsSync(appFilePath)) {
        logger.info(`The ${constants_1.appFile} is already initialized at ${options.home}`);
        return;
    }
    if (!fs_1.default.existsSync(options.home)) {
        fs_1.default.mkdirSync(options.home, { recursive: true });
        logger.info(`Initialized home directory at ${options.home}`);
    }
    else if (!fs_1.default.lstatSync(options.home).isDirectory()) {
        throw new Error(`${options.home} must be a directory.`);
    }
    const registryFilePath = path_1.default.join(options.home, constants_1.registryFile);
    if (!fs_1.default.existsSync(registryFilePath)) {
        try {
            const registryFromRemote = await axios_1.default.get('https://raw.githubusercontent.com/confio/ts-relayer/main/demo/registry.yaml');
            fs_1.default.writeFileSync(registryFilePath, registryFromRemote.data);
        }
        catch (error) {
            throw new Error(`Cannot fetch ${constants_1.registryFile} from remote. ${error}`);
        }
    }
    else if (!fs_1.default.lstatSync(registryFilePath).isFile()) {
        throw new Error(`${registryFilePath} must be a file.`);
    }
    const registry = load_and_validate_registry_1.loadAndValidateRegistry(registryFilePath);
    const [chainSrc, chainDest] = [options.src, options.dest].map((chain) => {
        const chainData = registry.chains[chain];
        if (!chainData) {
            throw new Error(`Chain ${chain} is missing in the registry, either check the spelling or add the chain definition to ${registryFilePath}`);
        }
        return chainData;
    });
    const mnemonic = generate_mnemonic_1.generateMnemonic();
    const appYaml = js_yaml_1.default.dump({
        src: options.src,
        dest: options.dest,
        mnemonic,
    }, {
        lineWidth: 1000,
    });
    fs_1.default.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
    logger.info(`Saved configuration to ${appFilePath}`);
    const [addressSrc, addressDest] = await Promise.all([
        derive_address_1.deriveAddress(mnemonic, chainSrc.prefix, chainSrc.hd_path),
        derive_address_1.deriveAddress(mnemonic, chainDest.prefix, chainDest.hd_path),
    ]);
    logger.info(`Source address: ${addressSrc}`);
    logger.info(`Destination address: ${addressDest}`);
    // if there are faucets, ask for tokens
    if (chainSrc.faucet) {
        const srcDenom = types_1.feeDenom(chainSrc);
        logger.info(`Requesting ${srcDenom} for ${chainSrc.chain_id}...`);
        await new faucet_client_1.FaucetClient(chainSrc.faucet).credit(addressSrc, srcDenom);
    }
    if (chainDest.faucet) {
        const destDenom = types_1.feeDenom(chainDest);
        logger.info(`Requesting ${destDenom} for ${chainDest.chain_id}...`);
        await new faucet_client_1.FaucetClient(chainDest.faucet).credit(addressDest, destDenom);
    }
}
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4Qix5REFBcUQ7QUFDckQsa0RBQTBCO0FBQzFCLHNEQUEyQjtBQUczQiwrQ0FBd0Q7QUFDeEQsdUNBQXVDO0FBQ3ZDLCtEQUEyRDtBQUMzRCxxRUFBaUU7QUFDakUsNkVBQXVFO0FBQ3ZFLHVGQUFpRjtBQUNqRix1RUFBbUU7QUFVNUQsS0FBSyxVQUFVLElBQUksQ0FBQyxLQUFZLEVBQUUsTUFBYztJQUNyRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsRUFBRSw4QkFBYSxDQUFDLEtBQUssRUFBRTtZQUN4QixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksRUFBRSw4QkFBYSxDQUFDLE1BQU0sRUFBRTtZQUMxQixRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO1FBQ3hDLElBQUksRUFBRSw4QkFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUM3QyxLQUFLLENBQUMsSUFBSSxFQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUN4QiwwQ0FBa0IsQ0FDbkI7S0FDRixDQUFDO0lBRUYsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFoQkQsb0JBZ0JDO0FBRU0sS0FBSyxVQUFVLEdBQUcsQ0FBQyxPQUFnQixFQUFFLE1BQWM7SUFDeEQsTUFBTSxXQUFXLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FB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