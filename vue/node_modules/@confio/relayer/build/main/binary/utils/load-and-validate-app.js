"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAndValidateApp = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const ajv_1 = __importDefault(require("ajv"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const constants_1 = require("../constants");
function readAppYaml(filepath) {
    try {
        return fs_1.default.readFileSync(filepath, 'utf-8');
    }
    catch (error) {
        if (error.code !== 'ENOENT') {
            throw error;
        }
        return null;
    }
}
function loadAndValidateApp(home) {
    var _a;
    const appContents = readAppYaml(path_1.default.join(home, constants_1.appFile));
    if (!appContents) {
        return null;
    }
    const app = js_yaml_1.default.load(appContents);
    const ajv = new ajv_1.default({ allErrors: true });
    const schema = {
        type: 'object',
        additionalProperties: false,
        required: [],
        properties: {
            src: { type: 'string', nullable: true, default: null },
            srcConnection: { type: 'string', nullable: true, default: null },
            dest: { type: 'string', nullable: true },
            destConnection: { type: 'string', nullable: true },
            mnemonic: { type: 'string', nullable: true },
            keyFile: { type: 'string', nullable: true },
        },
    };
    const validate = ajv.compile(schema);
    if (!validate(app)) {
        const errors = ((_a = validate.errors) !== null && _a !== void 0 ? _a : []).map(({ dataPath, message }) => `"${dataPath}" ${message}`);
        throw new Error([`${constants_1.appFile} validation failed.`, ...errors].join(os_1.default.EOL));
    }
    return app;
}
exports.loadAndValidateApp = loadAndValidateApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1hbmQtdmFsaWRhdGUtYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpbmFyeS91dGlscy9sb2FkLWFuZC12YWxpZGF0ZS1hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLDRDQUFvQjtBQUNwQixnREFBd0I7QUFFeEIsOENBQTBDO0FBQzFDLHNEQUEyQjtBQUUzQiw0Q0FBdUM7QUFHdkMsU0FBUyxXQUFXLENBQUMsUUFBZ0I7SUFDbkMsSUFBSTtRQUNGLE9BQU8sWUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDM0M7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDM0IsTUFBTSxLQUFLLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDO0FBRUQsU0FBZ0Isa0JBQWtCLENBQUMsSUFBWTs7SUFDN0MsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLG1CQUFPLENBQUMsQ0FBQyxDQUFDO0lBRTFELElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE1BQU0sR0FBRyxHQUFHLGlCQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRW5DLE1BQU0sR0FBRyxHQUFHLElBQUksYUFBRyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekMsTUFBTSxNQUFNLEdBQThCO1FBQ3hDLElBQUksRUFBRSxRQUFRO1FBQ2Qsb0JBQW9CLEVBQUUsS0FBSztRQUMzQixRQUFRLEVBQUUsRUFBRTtRQUNaLFVBQVUsRUFBRTtZQUNWLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ3RELGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ2hFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtZQUN4QyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7WUFDbEQsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1lBQzVDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtTQUM1QztLQUNGLENBQUM7SUFDRixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXJDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBQyxRQUFRLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQ3hDLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRSxDQUN0RCxDQUFDO1FBQ0YsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsbUJBQU8scUJBQXFCLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDNUU7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFqQ0QsZ0RBaUNDIn0=