"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveMnemonicOption = void 0;
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
const resolve_option_1 = require("../resolve-option");
async function readMnemonicFromStdin(interactive) {
    if (!interactive) {
        return null;
    }
    const readlineInterface = readline_1.default.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    const mnemonic = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
            reject(new Error('Timeout for entering mnemonic exceeded.'));
        }, 60 * 1000);
        readlineInterface.question('enter mnemonic phrase: ', (stdin) => {
            readlineInterface.close();
            clearTimeout(timeout);
            resolve(stdin);
        });
    });
    return mnemonic;
}
function readMnemonicFromFile(keyFile) {
    if (!keyFile) {
        return null;
    }
    return () => {
        return fs_1.default.readFileSync(keyFile, 'utf-8').trim();
    };
}
async function resolveMnemonicOption({ interactiveFlag, keyFile, mnemonicFlag, app }, optional = false) {
    const args = [
        await readMnemonicFromStdin(interactiveFlag),
        mnemonicFlag,
        process.env.RELAYER_MNEMONIC,
        app === null || app === void 0 ? void 0 : app.mnemonic,
        readMnemonicFromFile(keyFile),
    ];
    if (!optional) {
        return resolve_option_1.resolveOption('mnemonic', { required: true })(...args);
    }
    return resolve_option_1.resolveOption('mnemonic')(...args);
}
exports.resolveMnemonicOption = resolveMnemonicOption;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS1tbmVtb25pYy1vcHRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L3V0aWxzL29wdGlvbnMvc2hhcmVkL3Jlc29sdmUtbW5lbW9uaWMtb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQix3REFBZ0M7QUFHaEMsc0RBQWtEO0FBRWxELEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxXQUFvQjtJQUN2RCxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxNQUFNLGlCQUFpQixHQUFHLGtCQUFRLENBQUMsZUFBZSxDQUFDO1FBQ2pELEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztRQUNwQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07S0FDdkIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM3RCxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUVkLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzlELGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzFCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxTQUFTLG9CQUFvQixDQUFDLE9BQXNCO0lBQ2xELElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLFlBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xELENBQUMsQ0FBQztBQUNKLENBQUM7QUFtQk0sS0FBSyxVQUFVLHFCQUFxQixDQUN6QyxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBVSxFQUN2RCxRQUFRLEdBQUcsS0FBSztJQUVoQixNQUFNLElBQUksR0FBRztRQUNYLE1BQU0scUJBQXFCLENBQUMsZUFBZSxDQUFDO1FBQzVDLFlBQVk7UUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQjtRQUM1QixHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsUUFBUTtRQUNiLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztLQUM5QixDQUFDO0lBRUYsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLE9BQU8sOEJBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQy9EO0lBRUQsT0FBTyw4QkFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQWpCRCxzREFpQkMifQ==