"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareChannelHandshake = exports.prepareConnectionHandshake = exports.buildCreateClientArgs = exports.IbcClient = void 0;
const encoding_1 = require("@cosmjs/encoding");
const launchpad_1 = require("@cosmjs/launchpad");
const proto_signing_1 = require("@cosmjs/proto-signing");
const stargate_1 = require("@cosmjs/stargate");
const tendermint_rpc_1 = require("@cosmjs/tendermint-rpc");
const utils_1 = require("@cosmjs/utils");
const long_1 = __importDefault(require("long"));
const tx_1 = require("../codec/ibc/applications/transfer/v1/tx");
const channel_1 = require("../codec/ibc/core/channel/v1/channel");
const tx_2 = require("../codec/ibc/core/channel/v1/tx");
const client_1 = require("../codec/ibc/core/client/v1/client");
const tx_3 = require("../codec/ibc/core/client/v1/tx");
const tx_4 = require("../codec/ibc/core/connection/v1/tx");
const tendermint_1 = require("../codec/ibc/lightclients/tendermint/v1/tendermint");
const types_1 = require("../codec/tendermint/types/types");
const validator_1 = require("../codec/tendermint/types/validator");
const logger_1 = require("./logger");
const ibc_1 = require("./queries/ibc");
const utils_2 = require("./utils");
/**** These are needed to bootstrap the endpoints */
/* Some of them are hardcoded various places, which should we make configurable? */
// const DefaultTrustLevel = '1/3';
// const MaxClockDrift = 10; // 10 seconds
// const upgradePath = ['upgrade', 'upgradedIBCState'];
// const allowUpgradeAfterExpiry = false;
// const allowUpgradeAfterMisbehavior = false;
// these are from the cosmos sdk implementation
const defaultMerklePrefix = {
    keyPrefix: encoding_1.toAscii('ibc'),
};
const defaultConnectionVersion = {
    identifier: '1',
    features: ['ORDER_ORDERED', 'ORDER_UNORDERED'],
};
// this is a sane default, but we can revisit it
const defaultDelayPeriod = new long_1.default(0);
function ibcRegistry() {
    return new proto_signing_1.Registry([
        ...stargate_1.defaultRegistryTypes,
        ['/ibc.core.client.v1.MsgCreateClient', tx_3.MsgCreateClient],
        ['/ibc.core.client.v1.MsgUpdateClient', tx_3.MsgUpdateClient],
        ['/ibc.core.connection.v1.MsgConnectionOpenInit', tx_4.MsgConnectionOpenInit],
        ['/ibc.core.connection.v1.MsgConnectionOpenTry', tx_4.MsgConnectionOpenTry],
        ['/ibc.core.connection.v1.MsgConnectionOpenAck', tx_4.MsgConnectionOpenAck],
        [
            '/ibc.core.connection.v1.MsgConnectionOpenConfirm',
            tx_4.MsgConnectionOpenConfirm,
        ],
        ['/ibc.core.channel.v1.MsgChannelOpenInit', tx_2.MsgChannelOpenInit],
        ['/ibc.core.channel.v1.MsgChannelOpenTry', tx_2.MsgChannelOpenTry],
        ['/ibc.core.channel.v1.MsgChannelOpenAck', tx_2.MsgChannelOpenAck],
        ['/ibc.core.channel.v1.MsgChannelOpenConfirm', tx_2.MsgChannelOpenConfirm],
        ['/ibc.core.channel.v1.MsgRecvPacket', tx_2.MsgRecvPacket],
        ['/ibc.core.channel.v1.MsgAcknowledgement', tx_2.MsgAcknowledgement],
        ['/ibc.core.channel.v1.MsgTimeout', tx_2.MsgTimeout],
        ['/ibc.applications.transfer.v1.MsgTransfer', tx_1.MsgTransfer],
    ]);
}
const defaultGasPrice = launchpad_1.GasPrice.fromString('0.025ucosm');
const defaultGasLimits = {
    initClient: 150000,
    updateClient: 600000,
    initConnection: 150000,
    connectionHandshake: 300000,
    initChannel: 150000,
    channelHandshake: 300000,
    receivePacket: 300000,
    ackPacket: 300000,
    timeoutPacket: 300000,
    transfer: 180000,
};
class IbcClient {
    constructor(signingClient, tmClient, senderAddress, chainId, options) {
        this.sign = signingClient;
        this.tm = tmClient;
        this.query = stargate_1.QueryClient.withExtensions(tmClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, ibc_1.setupIbcExtension, stargate_1.setupStakingExtension);
        this.senderAddress = senderAddress;
        this.chainId = chainId;
        this.revisionNumber = utils_2.parseRevisionNumber(chainId);
        const { gasPrice = defaultGasPrice, gasLimits = {}, logger } = options;
        this.fees = launchpad_1.buildFeeTable(gasPrice, defaultGasLimits, gasLimits);
        this.logger = logger !== null && logger !== void 0 ? logger : new logger_1.NoopLogger();
    }
    static async connectWithSigner(endpoint, signer, senderAddress, options = {}) {
        // override any registry setup, use the other options
        const mergedOptions = Object.assign(Object.assign({}, options), { registry: ibcRegistry() });
        const signingClient = await stargate_1.SigningStargateClient.connectWithSigner(endpoint, signer, mergedOptions);
        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);
        const chainId = await signingClient.getChainId();
        return new IbcClient(signingClient, tmClient, senderAddress, chainId, options);
    }
    revisionHeight(height) {
        return client_1.Height.fromPartial({
            revisionHeight: new long_1.default(height),
            revisionNumber: this.revisionNumber,
        });
    }
    ensureRevisionHeight(height) {
        if (typeof height === 'number') {
            return client_1.Height.fromPartial({
                revisionHeight: long_1.default.fromNumber(height),
                revisionNumber: this.revisionNumber,
            });
        }
        if (height.revisionNumber.toNumber() !== this.revisionNumber.toNumber()) {
            throw new Error(`Using incorrect revisionNumber ${height.revisionNumber} on chain with ${this.revisionNumber}`);
        }
        return height;
    }
    async timeoutHeight(blocksInFuture) {
        const header = await this.latestHeader();
        return this.revisionHeight(header.height + blocksInFuture);
    }
    getChainId() {
        this.logger.verbose('Get chain ID');
        return this.sign.getChainId();
    }
    async header(height) {
        this.logger.verbose(`Get header for height ${height}`);
        // TODO: expose header method on tmClient and use that
        const resp = await this.tm.blockchain(height, height);
        return resp.blockMetas[0].header;
    }
    async latestHeader() {
        // TODO: expose header method on tmClient and use that
        const block = await this.tm.block();
        return block.block.header;
    }
    async currentTime() {
        // const status = await this.tm.status();
        // return status.syncInfo.latestBlockTime;
        return (await this.latestHeader()).time;
    }
    async currentHeight() {
        const status = await this.tm.status();
        return status.syncInfo.latestBlockHeight;
    }
    async currentRevision() {
        const block = await this.currentHeight();
        return this.revisionHeight(block);
    }
    async waitOneBlock() {
        // ensure this works
        const start = await this.currentHeight();
        let end;
        do {
            await utils_1.sleep(500);
            end = await this.currentHeight();
        } while (end === start);
        // TODO: this works but only for websocket connections, is there some code that falls back to polling in cosmjs?
        // await firstEvent(this.tm.subscribeNewBlockHeader());
    }
    // we may have to wait a bit before a tx returns and making queries on the event log
    async waitForIndexer() {
        await utils_1.sleep(50);
    }
    getCommit(height) {
        this.logger.verbose(height === undefined
            ? 'Get latest commit'
            : `Get commit for height ${height}`);
        return this.tm.commit(height);
    }
    /** Returns the unbonding period in seconds */
    async getUnbondingPeriod() {
        var _a, _b;
        const { params } = await this.query.staking.unverified.params();
        const seconds = (_b = (_a = params === null || params === void 0 ? void 0 : params.unbondingTime) === null || _a === void 0 ? void 0 : _a.seconds) === null || _b === void 0 ? void 0 : _b.toNumber();
        if (!seconds) {
            throw new Error('No unbonding period found');
        }
        this.logger.verbose('Queried unbonding period', { seconds });
        return seconds;
    }
    async getSignedHeader(height) {
        const { header: rpcHeader, commit: rpcCommit } = await this.getCommit(height);
        const header = types_1.Header.fromPartial(Object.assign(Object.assign({}, rpcHeader), { version: {
                block: new long_1.default(rpcHeader.version.block),
            }, height: new long_1.default(rpcHeader.height), time: utils_2.timestampFromDateNanos(rpcHeader.time), lastBlockId: {
                hash: rpcHeader.lastBlockId.hash,
                partSetHeader: rpcHeader.lastBlockId.parts,
            } }));
        const signatures = rpcCommit.signatures.map((sig) => (Object.assign(Object.assign({}, sig), { timestamp: sig.timestamp && utils_2.timestampFromDateNanos(sig.timestamp), blockIdFlag: types_1.blockIDFlagFromJSON(sig.blockIdFlag) })));
        const commit = types_1.Commit.fromPartial({
            height: new long_1.default(rpcCommit.height),
            round: rpcCommit.round,
            blockId: {
                hash: rpcCommit.blockId.hash,
                partSetHeader: rpcCommit.blockId.parts,
            },
            signatures,
        });
        // For the vote sign bytes, it checks (from the commit):
        //   Height, Round, BlockId, TimeStamp, ChainID
        return { header, commit };
    }
    async getValidatorSet(height) {
        this.logger.verbose(`Get validator set for height ${height}`);
        // we need to query the header to find out who the proposer was, and pull them out
        const { proposerAddress } = await this.header(height);
        const validators = await this.tm.validatorsAll(height);
        const mappedValidators = validators.validators.map((val) => ({
            address: val.address,
            pubKey: utils_2.mapRpcPubKeyToProto(val.pubkey),
            votingPower: new long_1.default(val.votingPower),
            proposerPriority: val.proposerPriority
                ? new long_1.default(val.proposerPriority)
                : undefined,
        }));
        const totalPower = validators.validators.reduce((x, v) => x + v.votingPower, 0);
        const proposer = mappedValidators.find((val) => utils_1.arrayContentEquals(val.address, proposerAddress));
        return validator_1.ValidatorSet.fromPartial({
            validators: mappedValidators,
            totalVotingPower: new long_1.default(totalPower),
            proposer,
        });
    }
    // this builds a header to update a remote client.
    // you must pass the last known height on the remote side so we can properly generate it.
    // it will update to the latest state of this chain.
    //
    // This is the logic that validates the returned struct:
    // ibc check: https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L87-L167
    // tendermint check: https://github.com/tendermint/tendermint/blob/v0.34.3/light/verifier.go#L19-L79
    // sign bytes: https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L762-L821
    //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/validator_set.go#L807-L810
    //   * https://github.com/tendermint/tendermint/blob/v0.34.3/types/block.go#L780-L809
    //   * https://github.com/tendermint/tendermint/blob/bf9e36d02d2eb22f6fe8961d0d7d3d34307ba38e/types/canonical.go#L54-L65
    //
    // For the vote sign bytes, it checks (from the commit):
    //   Height, Round, BlockId, TimeStamp, ChainID
    async buildHeader(lastHeight) {
        const signedHeader = await this.getSignedHeader();
        // "assert that trustedVals is NextValidators of last trusted header"
        // https://github.com/cosmos/cosmos-sdk/blob/v0.41.0/x/ibc/light-clients/07-tendermint/types/update.go#L74
        const validatorHeight = lastHeight + 1;
        /* eslint @typescript-eslint/no-non-null-assertion: "off" */
        const curHeight = signedHeader.header.height.toNumber();
        return tendermint_1.Header.fromPartial({
            signedHeader,
            validatorSet: await this.getValidatorSet(curHeight),
            trustedHeight: this.revisionHeight(lastHeight),
            trustedValidators: await this.getValidatorSet(validatorHeight),
        });
    }
    // trustedHeight must be proven by the client on the destination chain
    // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the
    // block connOpenInit Tx was in).
    //
    // pass a header height that was previously updated to on the remote chain using updateClient.
    // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)
    async getConnectionProof(clientId, connectionId, headerHeight) {
        const proofHeight = this.ensureRevisionHeight(headerHeight);
        const queryHeight = utils_2.subtractBlock(proofHeight, 1);
        const { clientState, proof: proofClient, } = await this.query.ibc.proof.client.state(clientId, queryHeight);
        // This is the most recent state we have on this chain of the other
        const { latestHeight: consensusHeight, } = await this.query.ibc.client.stateTm(clientId);
        utils_1.assert(consensusHeight);
        // get the init proof
        const { proof: proofConnection, } = await this.query.ibc.proof.connection.connection(connectionId, queryHeight);
        // get the consensus proof
        const { proof: proofConsensus, } = await this.query.ibc.proof.client.consensusState(clientId, consensusHeight, queryHeight);
        return {
            clientId,
            clientState,
            connectionId,
            proofHeight,
            proofConnection,
            proofClient,
            proofConsensus,
            consensusHeight,
        };
    }
    // trustedHeight must be proven by the client on the destination chain
    // and include a proof for the connOpenInit (eg. must be 1 or more blocks after the
    // block connOpenInit Tx was in).
    //
    // pass a header height that was previously updated to on the remote chain using updateClient.
    // note: the queries will be for the block before this header, so the proofs match up (appHash is on H+1)
    async getChannelProof(id, headerHeight) {
        const proofHeight = this.ensureRevisionHeight(headerHeight);
        const queryHeight = utils_2.subtractBlock(proofHeight, 1);
        const { proof } = await this.query.ibc.proof.channel.channel(id.portId, id.channelId, queryHeight);
        return {
            id,
            proofHeight,
            proof,
        };
    }
    async getPacketProof(packet, headerHeight) {
        const proofHeight = this.ensureRevisionHeight(headerHeight);
        const queryHeight = utils_2.subtractBlock(proofHeight, 1);
        const { proof } = await this.query.ibc.proof.channel.packetCommitment(packet.sourcePort, packet.sourceChannel, packet.sequence, queryHeight);
        return proof;
    }
    async getAckProof({ originalPacket }, headerHeight) {
        const proofHeight = this.ensureRevisionHeight(headerHeight);
        const queryHeight = utils_2.subtractBlock(proofHeight, 1);
        const res = await this.query.ibc.proof.channel.packetAcknowledgement(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);
        const { proof } = res;
        return proof;
    }
    async getTimeoutProof({ originalPacket }, headerHeight) {
        const proofHeight = this.ensureRevisionHeight(headerHeight);
        const queryHeight = utils_2.subtractBlock(proofHeight, 1);
        const proof = await this.query.ibc.proof.channel.receiptProof(originalPacket.destinationPort, originalPacket.destinationChannel, originalPacket.sequence.toNumber(), queryHeight);
        return proof;
    }
    /*
    These are helpers to query, build data and submit a message
    Currently all prefixed with doXxx, but please look for better naming
    */
    // Updates existing client on this chain with data from src chain.
    // Returns the height that was updated to.
    async doUpdateClient(clientId, src) {
        var _a, _b, _c, _d;
        const { latestHeight } = await this.query.ibc.client.stateTm(clientId);
        const header = await src.buildHeader(utils_2.toIntHeight(latestHeight));
        await this.updateTendermintClient(clientId, header);
        const height = (_d = (_c = (_b = (_a = header.signedHeader) === null || _a === void 0 ? void 0 : _a.header) === null || _b === void 0 ? void 0 : _b.height) === null || _c === void 0 ? void 0 : _c.toNumber()) !== null && _d !== void 0 ? _d : 0;
        return src.revisionHeight(height);
    }
    /***** These are all direct wrappers around message constructors ********/
    async sendTokens(recipientAddress, transferAmount, memo) {
        this.logger.verbose(`Send tokens to ${recipientAddress}`);
        this.logger.debug('Send tokens:', {
            senderAddress: this.senderAddress,
            recipientAddress,
            transferAmount,
            memo,
        });
        const result = await this.sign.sendTokens(this.senderAddress, recipientAddress, transferAmount, memo);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    /* Send any number of messages, you are responsible for encoding them */
    async sendMultiMsg(msgs, fees) {
        this.logger.verbose(`Broadcast multiple msgs`);
        this.logger.debug(`Multiple msgs:`, {
            msgs,
            fees,
        });
        const senderAddress = this.senderAddress;
        const result = await this.sign.signAndBroadcast(senderAddress, msgs, fees);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async createTendermintClient(clientState, consensusState) {
        this.logger.verbose(`Create Tendermint client`);
        const senderAddress = this.senderAddress;
        const createMsg = {
            typeUrl: '/ibc.core.client.v1.MsgCreateClient',
            value: tx_3.MsgCreateClient.fromPartial({
                signer: senderAddress,
                clientState: {
                    typeUrl: '/ibc.lightclients.tendermint.v1.ClientState',
                    value: tendermint_1.ClientState.encode(clientState).finish(),
                },
                consensusState: {
                    typeUrl: '/ibc.lightclients.tendermint.v1.ConsensusState',
                    value: tendermint_1.ConsensusState.encode(consensusState).finish(),
                },
            }),
        };
        this.logger.debug('MsgCreateClient', createMsg);
        const result = await this.sign.signAndBroadcast(senderAddress, [createMsg], this.fees.initClient);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        const clientId = launchpad_1.logs.findAttribute(parsedLogs, 'create_client', 'client_id').value;
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
            clientId,
        };
    }
    async updateTendermintClient(clientId, header) {
        this.logger.verbose(`Update Tendermint client ${clientId}`);
        const senderAddress = this.senderAddress;
        const updateMsg = {
            typeUrl: '/ibc.core.client.v1.MsgUpdateClient',
            value: tx_3.MsgUpdateClient.fromPartial({
                signer: senderAddress,
                clientId,
                header: {
                    typeUrl: '/ibc.lightclients.tendermint.v1.Header',
                    value: tendermint_1.Header.encode(header).finish(),
                },
            }),
        };
        this.logger.debug(`MsgUpdateClient`, updateMsg);
        const result = await this.sign.signAndBroadcast(senderAddress, [updateMsg], this.fees.updateClient);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async connOpenInit(clientId, remoteClientId) {
        this.logger.info(`Connection open init: ${clientId} => ${remoteClientId}`);
        const senderAddress = this.senderAddress;
        const msg = {
            typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenInit',
            value: tx_4.MsgConnectionOpenInit.fromPartial({
                clientId,
                counterparty: {
                    clientId: remoteClientId,
                    prefix: defaultMerklePrefix,
                },
                version: defaultConnectionVersion,
                delayPeriod: defaultDelayPeriod,
                signer: senderAddress,
            }),
        };
        this.logger.debug(`MsgConnectionOpenInit`, msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.initConnection);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        const connectionId = launchpad_1.logs.findAttribute(parsedLogs, 'connection_open_init', 'connection_id').value;
        this.logger.debug(`Connection open init successful: ${connectionId}`);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
            connectionId,
        };
    }
    async connOpenTry(myClientId, proof) {
        this.logger.info(`Connection open try: ${myClientId} => ${proof.clientId} (${proof.connectionId})`);
        const senderAddress = this.senderAddress;
        const { clientId, connectionId, clientState, proofHeight, proofConnection: proofInit, proofClient, proofConsensus, consensusHeight, } = proof;
        const msg = {
            typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenTry',
            value: tx_4.MsgConnectionOpenTry.fromPartial({
                clientId: myClientId,
                counterparty: {
                    clientId: clientId,
                    connectionId: connectionId,
                    prefix: defaultMerklePrefix,
                },
                delayPeriod: defaultDelayPeriod,
                counterpartyVersions: [defaultConnectionVersion],
                signer: senderAddress,
                clientState,
                proofHeight,
                proofInit,
                proofClient,
                proofConsensus,
                consensusHeight,
            }),
        };
        this.logger.debug('MsgConnectionOpenTry', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.connectionHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        const myConnectionId = launchpad_1.logs.findAttribute(parsedLogs, 'connection_open_try', 'connection_id').value;
        this.logger.debug(`Connection open try successful: ${myConnectionId} => ${connectionId}`);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
            connectionId: myConnectionId,
        };
    }
    async connOpenAck(myConnectionId, proof) {
        this.logger.info(`Connection open ack: ${myConnectionId} => ${proof.connectionId}`);
        const senderAddress = this.senderAddress;
        const { connectionId, clientState, proofHeight, proofConnection: proofTry, proofClient, proofConsensus, consensusHeight, } = proof;
        const msg = {
            typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenAck',
            value: tx_4.MsgConnectionOpenAck.fromPartial({
                connectionId: myConnectionId,
                counterpartyConnectionId: connectionId,
                version: defaultConnectionVersion,
                signer: senderAddress,
                clientState,
                proofHeight,
                proofTry,
                proofClient,
                proofConsensus,
                consensusHeight,
            }),
        };
        this.logger.debug('MsgConnectionOpenAck', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.connectionHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async connOpenConfirm(myConnectionId, proof) {
        this.logger.info(`Connection open confirm: ${myConnectionId}`);
        const senderAddress = this.senderAddress;
        const { proofHeight, proofConnection: proofAck } = proof;
        const msg = {
            typeUrl: '/ibc.core.connection.v1.MsgConnectionOpenConfirm',
            value: tx_4.MsgConnectionOpenConfirm.fromPartial({
                connectionId: myConnectionId,
                signer: senderAddress,
                proofHeight,
                proofAck,
            }),
        };
        this.logger.debug('MsgConnectionOpenConfirm', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.connectionHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async channelOpenInit(portId, remotePortId, ordering, connectionId, version) {
        this.logger.verbose(`Channel open init: ${portId} => ${remotePortId} (${connectionId})`);
        const senderAddress = this.senderAddress;
        const msg = {
            typeUrl: '/ibc.core.channel.v1.MsgChannelOpenInit',
            value: tx_2.MsgChannelOpenInit.fromPartial({
                portId,
                channel: {
                    state: channel_1.State.STATE_INIT,
                    ordering,
                    counterparty: {
                        portId: remotePortId,
                    },
                    connectionHops: [connectionId],
                    version,
                },
                signer: senderAddress,
            }),
        };
        this.logger.debug('MsgChannelOpenInit', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.initChannel);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        const channelId = launchpad_1.logs.findAttribute(parsedLogs, 'channel_open_init', 'channel_id').value;
        this.logger.debug(`Channel open init successful: ${channelId}`);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
            channelId,
        };
    }
    async channelOpenTry(portId, remote, ordering, connectionId, version, counterpartyVersion, proof) {
        this.logger.verbose(`Channel open try: ${portId} => ${remote.portId} (${remote.channelId})`);
        const senderAddress = this.senderAddress;
        const { proofHeight, proof: proofInit } = proof;
        const msg = {
            typeUrl: '/ibc.core.channel.v1.MsgChannelOpenTry',
            value: tx_2.MsgChannelOpenTry.fromPartial({
                portId,
                counterpartyVersion,
                channel: {
                    state: channel_1.State.STATE_TRYOPEN,
                    ordering,
                    counterparty: remote,
                    connectionHops: [connectionId],
                    version,
                },
                proofInit,
                proofHeight,
                signer: senderAddress,
            }),
        };
        this.logger.debug('MsgChannelOpenTry', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.channelHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        const channelId = launchpad_1.logs.findAttribute(parsedLogs, 'channel_open_try', 'channel_id').value;
        this.logger.debug(`Channel open try successful: ${channelId} => ${remote.channelId})`);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
            channelId,
        };
    }
    async channelOpenAck(portId, channelId, counterpartyChannelId, counterpartyVersion, proof) {
        this.logger.verbose(`Channel open ack for port ${portId}: ${channelId} => ${counterpartyChannelId}`);
        const senderAddress = this.senderAddress;
        const { proofHeight, proof: proofTry } = proof;
        const msg = {
            typeUrl: '/ibc.core.channel.v1.MsgChannelOpenAck',
            value: tx_2.MsgChannelOpenAck.fromPartial({
                portId,
                channelId,
                counterpartyChannelId,
                counterpartyVersion,
                proofTry,
                proofHeight,
                signer: senderAddress,
            }),
        };
        this.logger.debug('MsgChannelOpenAck', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.channelHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async channelOpenConfirm(portId, channelId, proof) {
        this.logger.verbose(`Chanel open confirm for port ${portId}: ${channelId} => ${proof.id.channelId}`);
        const senderAddress = this.senderAddress;
        const { proofHeight, proof: proofAck } = proof;
        const msg = {
            typeUrl: '/ibc.core.channel.v1.MsgChannelOpenConfirm',
            value: tx_2.MsgChannelOpenConfirm.fromPartial({
                portId,
                channelId,
                proofAck,
                proofHeight,
                signer: senderAddress,
            }),
        };
        this.logger.debug('MsgChannelOpenConfirm', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.channelHandshake);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    receivePacket(packet, proofCommitment, proofHeight) {
        return this.receivePackets([packet], [proofCommitment], proofHeight);
    }
    async receivePackets(packets, proofCommitments, proofHeight) {
        this.logger.verbose(`Receive ${packets.length} packets..`);
        if (packets.length !== proofCommitments.length) {
            throw new Error(`Have ${packets.length} packets, but ${proofCommitments.length} proofs`);
        }
        if (packets.length === 0) {
            throw new Error('Must submit at least 1 packet');
        }
        const senderAddress = this.senderAddress;
        const msgs = [];
        for (const i in packets) {
            const packet = packets[i];
            this.logger.verbose(`Sending packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));
            const msg = {
                typeUrl: '/ibc.core.channel.v1.MsgRecvPacket',
                value: tx_2.MsgRecvPacket.fromPartial({
                    packet,
                    proofCommitment: proofCommitments[i],
                    proofHeight,
                    signer: senderAddress,
                }),
            };
            msgs.push(msg);
        }
        this.logger.debug('MsgRecvPacket(s)', { msgs });
        const result = await this.sign.signAndBroadcast(senderAddress, msgs, utils_2.multiplyFees(this.fees.receivePacket, msgs.length));
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    acknowledgePacket(ack, proofAcked, proofHeight) {
        return this.acknowledgePackets([ack], [proofAcked], proofHeight);
    }
    async acknowledgePackets(acks, proofAckeds, proofHeight) {
        this.logger.verbose(`Acknowledge ${acks.length} packets...`);
        if (acks.length !== proofAckeds.length) {
            throw new Error(`Have ${acks.length} acks, but ${proofAckeds.length} proofs`);
        }
        if (acks.length === 0) {
            throw new Error('Must submit at least 1 ack');
        }
        const senderAddress = this.senderAddress;
        const msgs = [];
        for (const i in acks) {
            const packet = acks[i].originalPacket;
            const acknowledgement = acks[i].acknowledgement;
            this.logger.verbose(`Ack packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, {
                packet: utils_2.presentPacketData(packet.data),
                ack: utils_2.presentPacketData(acknowledgement),
            });
            const msg = {
                typeUrl: '/ibc.core.channel.v1.MsgAcknowledgement',
                value: tx_2.MsgAcknowledgement.fromPartial({
                    packet,
                    acknowledgement,
                    proofAcked: proofAckeds[i],
                    proofHeight,
                    signer: senderAddress,
                }),
            };
            msgs.push(msg);
        }
        this.logger.debug('MsgAcknowledgement(s)', { msgs });
        const result = await this.sign.signAndBroadcast(senderAddress, msgs, utils_2.multiplyFees(this.fees.ackPacket, msgs.length));
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    timeoutPacket(packet, proofUnreceived, nextSequenceRecv, proofHeight) {
        return this.timeoutPackets([packet], [proofUnreceived], [nextSequenceRecv], proofHeight);
    }
    async timeoutPackets(packets, proofsUnreceived, nextSequenceRecv, proofHeight) {
        if (packets.length !== proofsUnreceived.length) {
            throw new Error('Packets and proofs must be same length');
        }
        if (packets.length !== nextSequenceRecv.length) {
            throw new Error('Packets and sequences must be same length');
        }
        this.logger.verbose(`Timeout ${packets.length} packets...`);
        const senderAddress = this.senderAddress;
        const msgs = [];
        for (const i in packets) {
            const packet = packets[i];
            this.logger.verbose(`Timeout packet #${packet.sequence.toNumber()} from ${this.chainId}:${packet.sourceChannel}`, utils_2.presentPacketData(packet.data));
            const msg = {
                typeUrl: '/ibc.core.channel.v1.MsgTimeout',
                value: tx_2.MsgTimeout.fromPartial({
                    packet,
                    proofUnreceived: proofsUnreceived[i],
                    nextSequenceRecv: nextSequenceRecv[i],
                    proofHeight,
                    signer: senderAddress,
                }),
            };
            msgs.push(msg);
        }
        this.logger.debug('MsgTimeout', { msgs });
        const result = await this.sign.signAndBroadcast(senderAddress, msgs, utils_2.multiplyFees(this.fees.timeoutPacket, msgs.length));
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
    async transferTokens(sourcePort, sourceChannel, token, receiver, timeoutHeight, 
    // timeout in seconds (we make nanoseconds below)
    timeoutTime) {
        this.logger.verbose(`Transfer tokens to ${receiver}`);
        const senderAddress = this.senderAddress;
        const timeoutTimestamp = timeoutTime
            ? long_1.default.fromNumber(timeoutTime * 1000000000)
            : undefined;
        const msg = {
            typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',
            value: tx_1.MsgTransfer.fromPartial({
                sourcePort,
                sourceChannel,
                sender: senderAddress,
                token,
                receiver,
                timeoutHeight,
                timeoutTimestamp,
            }),
        };
        this.logger.debug('MsgTransfer', msg);
        const result = await this.sign.signAndBroadcast(senderAddress, [msg], this.fees.transfer);
        if (stargate_1.isBroadcastTxFailure(result)) {
            throw new Error(utils_2.createBroadcastTxErrorMessage(result));
        }
        const parsedLogs = stargate_1.parseRawLog(result.rawLog);
        return {
            logs: parsedLogs,
            transactionHash: result.transactionHash,
            height: result.height,
        };
    }
}
exports.IbcClient = IbcClient;
// this will query for the unbonding period.
// if the trusting period is not set, it will use 2/3 of the unbonding period
async function buildCreateClientArgs(src, trustPeriodSec) {
    const header = await src.latestHeader();
    const consensusState = utils_2.buildConsensusState(header);
    const unbondingPeriodSec = await src.getUnbondingPeriod();
    if (trustPeriodSec === undefined) {
        trustPeriodSec = Math.floor((unbondingPeriodSec * 2) / 3);
    }
    const clientState = utils_2.buildClientState(src.chainId, unbondingPeriodSec, trustPeriodSec, src.revisionHeight(header.height));
    return { consensusState, clientState };
}
exports.buildCreateClientArgs = buildCreateClientArgs;
async function prepareConnectionHandshake(src, dest, clientIdSrc, clientIdDest, connIdSrc) {
    // ensure the last transaction was committed to the header (one block after it was included)
    await src.waitOneBlock();
    // update client on dest
    const headerHeight = await dest.doUpdateClient(clientIdDest, src);
    // get a proof (for the proven height)
    const proof = await src.getConnectionProof(clientIdSrc, connIdSrc, headerHeight);
    return proof;
}
exports.prepareConnectionHandshake = prepareConnectionHandshake;
async function prepareChannelHandshake(src, dest, clientIdDest, portId, channelId) {
    // ensure the last transaction was committed to the header (one block after it was included)
    await src.waitOneBlock();
    // update client on dest
    const headerHeight = await dest.doUpdateClient(clientIdDest, src);
    // get a proof (for the proven height)
    const proof = await src.getChannelProof({ portId, channelId }, headerHeight);
    return proof;
}
exports.prepareChannelHandshake = prepareChannelHandshake;
//# sourceMappingURL=data:application/json;base64,