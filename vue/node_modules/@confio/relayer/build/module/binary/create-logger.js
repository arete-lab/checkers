import winston from 'winston';
import { resolveOption } from './utils/options/resolve-option';
export const levels = {
    error: 0,
    warn: 1,
    info: 2,
    verbose: 3,
    debug: 4,
};
export const defaultLevel = 'info'; // if not provided
function validateLevel(level) {
    return level ? Object.keys(levels).includes(level) : false;
}
export function resolveLevel(flags) {
    const level = resolveOption('logLevel')(flags.logLevel, process.env.RELAYER_LOG_LEVEL);
    if (level !== null && !validateLevel(level)) {
        return [defaultLevel, level];
    }
    const levelValue = levels[level ?? 'error'];
    if (flags.verbose && levelValue < levels.verbose) {
        return ['verbose', null];
    }
    if (flags.quiet && levelValue <= levels.error) {
        return ['error', null];
    }
    if (level) {
        return [level, null];
    }
    return [defaultLevel, null];
}
export function createLogger(flags) {
    const [level, invalidInputLevel] = resolveLevel(flags);
    const fileTransport = flags.logFile
        ? [
            new winston.transports.File({
                handleExceptions: true,
                filename: flags.logFile,
                format: winston.format.combine(winston.format.timestamp()),
            }),
        ]
        : [];
    const logger = winston.createLogger({
        level,
        levels,
        format: winston.format.combine(winston.format.errors({ stack: true }), winston.format.json()),
        transports: [
            new winston.transports.Console({
                handleExceptions: true,
                format: winston.format.combine(winston.format.colorize(), winston.format.simple()),
            }),
            ...fileTransport,
        ],
    });
    if (invalidInputLevel !== null) {
        logger.error(`Invalid log-level "${invalidInputLevel}". Please use one of: ${Object.keys(levels)
            .map((level) => `"${level}"`)
            .join(', ')}`);
    }
    return logger;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWxvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iaW5hcnkvY3JlYXRlLWxvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFHOUIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRS9ELE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRztJQUNwQixLQUFLLEVBQUUsQ0FBQztJQUNSLElBQUksRUFBRSxDQUFDO0lBQ1AsSUFBSSxFQUFFLENBQUM7SUFDUCxPQUFPLEVBQUUsQ0FBQztJQUNWLEtBQUssRUFBRSxDQUFDO0NBQ1QsQ0FBQztBQUdGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxrQkFBa0I7QUFFdEQsU0FBUyxhQUFhLENBQUMsS0FBb0I7SUFDekMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDN0QsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQzFCLEtBQWtCO0lBRWxCLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FDckMsS0FBSyxDQUFDLFFBQVEsRUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUM5QixDQUFDO0lBRUYsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzNDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDOUI7SUFFRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxDQUFDO0lBRTVDLElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNoRCxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzFCO0lBRUQsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLFVBQVUsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQzdDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDeEI7SUFFRCxJQUFJLEtBQUssRUFBRTtRQUNULE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdEI7SUFFRCxPQUFPLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLEtBQWtCO0lBQzdDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFdkQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU87UUFDakMsQ0FBQyxDQUFDO1lBQ0UsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztnQkFDMUIsZ0JBQWdCLEVBQUUsSUFBSTtnQkFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxPQUFPO2dCQUN2QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUMzRCxDQUFDO1NBQ0g7UUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRVAsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUNsQyxLQUFLO1FBQ0wsTUFBTTtRQUNOLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDNUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDdEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FDdEI7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUM3QixnQkFBZ0IsRUFBRSxJQUFJO2dCQUN0QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQ3pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQ3hCO2FBQ0YsQ0FBQztZQUVGLEdBQUcsYUFBYTtTQUNqQjtLQUNGLENBQUMsQ0FBQztJQUVILElBQUksaUJBQWlCLEtBQUssSUFBSSxFQUFFO1FBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQ1Ysc0JBQXNCLGlCQUFpQix5QkFBeUIsTUFBTSxDQUFDLElBQUksQ0FDekUsTUFBTSxDQUNQO2FBQ0UsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDO2FBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNoQixDQUFDO0tBQ0g7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIn0=