import fs from 'fs';
import path from 'path';
import { sleep } from '@cosmjs/utils';
import { Link } from '../../../lib/link';
import { lastQueriedHeightsFile, registryFile } from '../../constants';
import { InvalidOptionError } from '../../exceptions/InvalidOptionError';
import { loadAndValidateApp } from '../../utils/load-and-validate-app';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
import { resolveHomeOption } from '../../utils/options/shared/resolve-home-option';
import { resolveKeyFileOption } from '../../utils/options/shared/resolve-key-file-option';
import { resolveMnemonicOption } from '../../utils/options/shared/resolve-mnemonic-option';
import { signingClient } from '../../utils/signing-client';
function resolveHeights({ scanFromSrc, scanFromDest, home }, logger) {
    if (!scanFromSrc && scanFromDest) {
        throw new InvalidOptionError(`You have defined "scanFromDest" but no "scanFromSrc". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && !scanFromDest) {
        throw new InvalidOptionError(`You have defined "scanFromSrc" but no "scanFromDest". Both or none "scanFromSrc" and "scanFromDest" must be present.`);
    }
    if (scanFromSrc && scanFromDest) {
        logger.info('Use heights from the command line arguments.');
        return {
            packetHeightA: scanFromSrc,
            ackHeightA: scanFromSrc,
            packetHeightB: scanFromDest,
            ackHeightB: scanFromDest,
        };
    }
    const lastQueriedHeightsFilePath = path.join(home, lastQueriedHeightsFile);
    try {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const heights = require(lastQueriedHeightsFilePath);
        logger.info(`Use last queried heights from ${lastQueriedHeightsFilePath} file.`);
        return heights;
    }
    catch {
        logger.info('Scanning the entire history for packets... This may take some time.');
    }
    return null;
}
// some defaults for looping
const defaultOptions = {
    // check once per minute
    poll: 60,
    // once per day: 86400s
    maxAgeSrc: 86400,
    maxAgeDest: 86400,
    once: false,
};
export async function start(flags, logger) {
    const home = resolveHomeOption({ homeFlag: flags.home });
    const app = loadAndValidateApp(home);
    const keyFile = resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        keyFile,
        app,
    });
    const src = resolveOption('src', { required: true })(flags.src, app?.src, process.env.RELAYER_SRC);
    const dest = resolveOption('dest', { required: true })(flags.dest, app?.dest, process.env.RELAYER_DEST);
    const srcConnection = resolveOption('srcConnection', { required: true })(flags.srcConnection, app?.srcConnection, process.env.RELAYER_SRC_CONNECTION);
    const destConnection = resolveOption('destConnection', { required: true })(flags.destConnection, app?.destConnection, process.env.RELAYER_DEST_CONNECTION);
    // TODO: add this in app.yaml, process.env
    const poll = resolveOption('poll', { required: true, integer: true })(flags.poll, defaultOptions.poll);
    const maxAgeSrc = resolveOption('maxAgeSrc', {
        required: true,
        integer: true,
    })(flags.maxAgeSrc, defaultOptions.maxAgeSrc);
    const maxAgeDest = resolveOption('maxAgeB', {
        required: true,
        integer: true,
    })(flags.maxAgeDest, defaultOptions.maxAgeDest);
    const scanFromSrc = resolveOption('scanFromSrc', { integer: true })(flags.scanFromSrc, process.env.RELAYER_SCAN_FROM_SRC);
    const scanFromDest = resolveOption('scanFromDest', { integer: true })(flags.scanFromDest, process.env.RELAYER_SCAN_FROM_DEST);
    const heights = resolveHeights({ scanFromSrc, scanFromDest, home }, logger);
    // FIXME: any env variable for this?
    const once = flags.once;
    const options = {
        src,
        dest,
        home,
        mnemonic,
        srcConnection,
        destConnection,
        poll,
        maxAgeSrc,
        maxAgeDest,
        once,
        heights,
    };
    await run(options, logger);
}
async function run(options, logger) {
    const registryFilePath = path.join(options.home, registryFile);
    const { chains } = loadAndValidateRegistry(registryFilePath);
    const srcChain = chains[options.src];
    if (!srcChain) {
        throw new Error('src chain not found in registry');
    }
    const destChain = chains[options.dest];
    if (!destChain) {
        throw new Error('dest chain not found in registry');
    }
    const nodeA = await signingClient(srcChain, options.mnemonic, logger);
    const nodeB = await signingClient(destChain, options.mnemonic, logger);
    const link = await Link.createWithExistingConnections(nodeA, nodeB, options.srcConnection, options.destConnection, logger);
    await relayerLoop(link, options, logger);
}
async function relayerLoop(link, options, logger) {
    let nextRelay = options.heights ?? {};
    const lastQueriedHeightsFilePath = path.join(options.home, lastQueriedHeightsFile);
    const done = false;
    while (!done) {
        try {
            // TODO: make timeout windows more configurable
            nextRelay = await link.checkAndRelayPacketsAndAcks(nextRelay, 2, 6);
            fs.writeFileSync(lastQueriedHeightsFilePath, JSON.stringify(nextRelay, null, 2));
            // ensure the headers are up to date (only submits if old and we didn't just update them above)
            logger.info('Ensuring clients are not stale');
            await link.updateClientIfStale('A', options.maxAgeDest);
            await link.updateClientIfStale('B', options.maxAgeSrc);
        }
        catch (e) {
            logger.error(`Caught error: `, e);
        }
        if (options.once) {
            logger.info('Quitting after one run (--once set)');
            return;
        }
        // sleep until the next step
        logger.info(`Sleeping ${options.poll} seconds...`);
        await sleep(options.poll * 1000);
        logger.info('... waking up and checking for packets!');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2NvbW1hbmRzL3N0YXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd0QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFekMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFRM0QsU0FBUyxjQUFjLENBQ3JCLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQXdCLEVBQ3pELE1BQWM7SUFFZCxJQUFJLENBQUMsV0FBVyxJQUFJLFlBQVksRUFBRTtRQUNoQyxNQUFNLElBQUksa0JBQWtCLENBQzFCLHNIQUFzSCxDQUN2SCxDQUFDO0tBQ0g7SUFFRCxJQUFJLFdBQVcsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUNoQyxNQUFNLElB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