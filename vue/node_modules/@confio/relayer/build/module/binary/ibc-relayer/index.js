#!/usr/bin/env node
import { Command } from 'commander';
import { addLoggerOptionsTo, destOption, homeOption, interactiveOption, keyFileOption, mnemonicOption, srcOption, } from '../commander-options';
import { loggerWithErrorBoundary } from '../utils/logger-with-error-boundary';
import { start } from './commands/start';
const program = new Command();
program.description('ibc-relayer program description');
const startCommand = program
    .command('start')
    .description('start command description')
    .addOption(homeOption)
    .addOption(srcOption)
    .addOption(destOption)
    .addOption(interactiveOption)
    .addOption(keyFileOption)
    .addOption(mnemonicOption)
    .option('--src-connection <connection>')
    .option('--dest-connection <connection>')
    .option('--poll <frequency>', 'how many second we sleep between checking for packets')
    .option('--max-age-src <seconds>', 'how old can the client on src chain be, before we update it')
    .option('--max-age-dest <seconds>', 'how old can the client on dest chain be, before we update it')
    .option('--scan-from-src <height>')
    .option('--scan-from-dest <height>')
    // note: once is designed for debugging and unit tests
    .option('--once', 'just relay pending packets and quit, no polling')
    .action(loggerWithErrorBoundary(start));
addLoggerOptionsTo(startCommand);
program.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1yZWxheWVyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsVUFBVSxFQUNWLFVBQVUsRUFDVixpQkFBaUIsRUFDakIsYUFBYSxFQUNiLGNBQWMsRUFDZCxTQUFTLEdBQ1YsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUU5RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztBQUU5QixPQUFPLENBQUMsV0FBVyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7QUFFdkQsTUFBTSxZQUFZLEdBQUcsT0FBTztLQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2hCLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQztLQUN4QyxTQUFTLENBQUMsVUFBVSxDQUFDO0tBQ3JCLFNBQVMsQ0FBQyxTQUFTLENBQUM7S0FDcEIsU0FBUyxDQUFDLFVBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsaUJBQWlCLENBQUM7S0FDNUIsU0FBUyxDQUFDLGFBQWEsQ0FBQztLQUN4QixTQUFTLENBQUMsY0FBYyxDQUFDO0tBQ3pCLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQztLQUN2QyxNQUFNLENBQUMsZ0NBQWdDLENBQUM7S0FDeEMsTUFBTSxDQUNMLG9CQUFvQixFQUNwQix1REFBdUQsQ0FDeEQ7S0FDQSxNQUFNLENBQ0wseUJBQXlCLEVBQ3pCLDZEQUE2RCxDQUM5RDtLQUNBLE1BQU0sQ0FDTCwwQkFBMEIsRUFDMUIsOERBQThELENBQy9EO0tBQ0EsTUFBTSxDQUFDLDBCQUEwQixDQUFDO0tBQ2xDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQztJQUNwQyxzREFBc0Q7S0FDckQsTUFBTSxDQUFDLFFBQVEsRUFBRSxpREFBaUQsQ0FBQztLQUNuRSxNQUFNLENBQUMsdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUUxQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVqQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyJ9