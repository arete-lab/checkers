import path from 'path';
import { State as ChannelState } from '../../../codec/ibc/core/channel/v1/channel';
import { registryFile } from '../../constants';
import { borderLessTable } from '../../utils/border-less-table';
import { generateMnemonic } from '../../utils/generate-mnemonic';
import { loadAndValidateApp } from '../../utils/load-and-validate-app';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
import { resolveHomeOption } from '../../utils/options/shared/resolve-home-option';
import { resolveKeyFileOption } from '../../utils/options/shared/resolve-key-file-option';
import { resolveMnemonicOption } from '../../utils/options/shared/resolve-mnemonic-option';
import { signingClient } from '../../utils/signing-client';
export async function channels(flags, logger) {
    const home = resolveHomeOption({ homeFlag: flags.home });
    const app = loadAndValidateApp(home);
    const keyFile = resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const chain = resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
    const port = resolveOption('port')(flags.port, process.env.RELAYER_PORT);
    const mnemonic = await resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    }, true // mnemonic is optional
    );
    const options = {
        home,
        chain,
        mnemonic,
        port,
    };
    await run(options, logger);
}
function channelStateAsText(state) {
    switch (state) {
        case ChannelState.STATE_CLOSED:
            return 'Closed';
        case ChannelState.STATE_INIT:
            return 'Init';
        case ChannelState.STATE_OPEN:
            return 'Open';
        case ChannelState.STATE_TRYOPEN:
            return 'Tryopen';
        case ChannelState.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case ChannelState.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
export async function run(options, logger) {
    const registryFilePath = path.join(options.home, registryFile);
    const registry = loadAndValidateRegistry(registryFilePath);
    const chain = registry.chains[options.chain];
    if (!chain) {
        throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
    }
    const mnemonic = options.mnemonic ?? generateMnemonic();
    const client = await signingClient(chain, mnemonic, logger);
    const { channels: allChannels, } = await client.query.ibc.channel.allChannels();
    const channels = allChannels
        .filter((channel) => (options.port ? channel.portId === options.port : true) // don't filter if port is not specified
    )
        .map((channel) => [
        channel.channelId,
        channel.portId,
        channelStateAsText(channel.state),
    ]);
    if (!channels.length) {
        const conditionalPortInfo = options.port
            ? ` on port "${options.port}".`
            : '.';
        logger.info(`No channels found for chain "${options.chain}"${conditionalPortInfo}`);
        return;
    }
    const output = borderLessTable([
        ['CHANNEL_ID', 'PORT', 'STATE'],
        ...channels,
    ]);
    console.log(output);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jaGFubmVscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFJeEIsT0FBTyxFQUFFLEtBQUssSUFBSSxZQUFZLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFrQjNELE1BQU0sQ0FBQyxLQUFLLFVBQVUsUUFBUSxDQUFDLEtBQVksRUFBRSxNQUFjO0lBQ3pELE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFFLEtBQUss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