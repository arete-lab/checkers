import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { Link } from '../../../lib/link';
import { appFile, registryFile } from '../../constants';
import { loadAndValidateApp } from '../../utils/load-and-validate-app';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
import { resolveHomeOption } from '../../utils/options/shared/resolve-home-option';
import { resolveKeyFileOption } from '../../utils/options/shared/resolve-key-file-option';
import { resolveMnemonicOption } from '../../utils/options/shared/resolve-mnemonic-option';
import { signingClient } from '../../utils/signing-client';
export async function connect(flags, logger) {
    const home = resolveHomeOption({ homeFlag: flags.home });
    const app = loadAndValidateApp(home);
    if (!app) {
        throw new Error(`${appFile} not found at ${home}`);
    }
    const keyFile = resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile: keyFile,
        app,
    });
    const src = resolveOption('src', { required: true })(flags.src, app?.src, process.env.RELAYER_SRC);
    const dest = resolveOption('dest', { required: true })(flags.dest, app?.dest, process.env.RELAYER_DEST);
    const options = {
        home,
        mnemonic,
        src,
        dest,
    };
    await run(options, app, logger);
}
export async function run(options, app, logger) {
    const registryFilePath = path.join(options.home, registryFile);
    const registry = loadAndValidateRegistry(registryFilePath);
    const srcChain = registry.chains[options.src];
    if (!srcChain) {
        throw new Error(`src channel  "${options.src}" not found in registry`);
    }
    const destChain = registry.chains[options.dest];
    if (!destChain) {
        throw new Error(`dest channel  "${options.dest}" not found in registry`);
    }
    const nodeA = await signingClient(srcChain, options.mnemonic);
    const nodeB = await signingClient(destChain, options.mnemonic);
    const link = await Link.createWithNewConnections(nodeA, nodeB);
    const appYaml = yaml.dump({
        ...app,
        srcConnection: link.endA.connectionID,
        destConnection: link.endB.connectionID,
    }, {
        lineWidth: 1000,
    });
    fs.writeFileSync(path.join(options.home, appFile), appYaml, {
        encoding: 'utf-8',
    });
    logger.info(`Created connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2Nvbm5lY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLElBQUksTUFBTSxTQUFTLENBQUM7QUFHM0IsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ25GLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQWtCM0QsTUFBTSxDQUFDLEtBQUssVUFBVSxPQUFPLENBQUMsS0FBWSxFQUFFLE1BQWM7SUFDeEQsTUFBTSxJQUFJLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekQsTUFBTSxHQUFHLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxPQUFPLGlCQUFpQixJQUFJLEVBQUUsQ0FB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