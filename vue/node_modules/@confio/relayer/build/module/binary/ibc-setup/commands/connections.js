import path from 'path';
import { State as ConnectionState } from '../../../codec/ibc/core/connection/v1/connection';
import { registryFile } from '../../constants';
import { borderLessTable } from '../../utils/border-less-table';
import { generateMnemonic } from '../../utils/generate-mnemonic';
import { loadAndValidateApp } from '../../utils/load-and-validate-app';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
import { resolveHomeOption } from '../../utils/options/shared/resolve-home-option';
import { resolveKeyFileOption } from '../../utils/options/shared/resolve-key-file-option';
import { resolveMnemonicOption } from '../../utils/options/shared/resolve-mnemonic-option';
import { signingClient } from '../../utils/signing-client';
export async function connections(flags, logger) {
    const home = resolveHomeOption({ homeFlag: flags.home });
    const app = loadAndValidateApp(home);
    const keyFile = resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const chain = resolveOption('chain', { required: true })(flags.chain, process.env.RELAYER_CHAIN);
    const mnemonic = await resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    }, true // mnemonic is optional
    );
    const options = {
        home,
        chain,
        mnemonic,
    };
    await run(options, logger);
}
function connectionStateAsText(state) {
    switch (state) {
        case ConnectionState.STATE_INIT:
            return 'Init';
        case ConnectionState.STATE_OPEN:
            return 'Open';
        case ConnectionState.STATE_TRYOPEN:
            return 'Tryopen';
        case ConnectionState.STATE_UNINITIALIZED_UNSPECIFIED:
            return 'UninitializedUnspecified';
        case ConnectionState.UNRECOGNIZED:
        default:
            return 'Unrecognized';
    }
}
export async function run(options, logger) {
    const registryFilePath = path.join(options.home, registryFile);
    const registry = loadAndValidateRegistry(registryFilePath);
    const chain = registry.chains[options.chain];
    if (!chain) {
        throw new Error(`Chain ${options.chain} not found in ${registryFilePath}.`);
    }
    const mnemonic = options.mnemonic ?? generateMnemonic();
    const client = await signingClient(chain, mnemonic, logger);
    const { connections: allConnections, } = await client.query.ibc.connection.allConnections();
    const connections = allConnections.map((connection) => [
        connection.id,
        connection.clientId,
        connection.delayPeriod.toString(10),
        connectionStateAsText(connection.state),
    ]);
    if (!connections.length) {
        logger.info(`No connections found for chain "${options.chain}".`);
        return;
    }
    const output = borderLessTable([
        ['CONNECTION_ID', 'CLIENT_ID', 'DELAY', 'STATE'],
        ...connections,
    ]);
    console.log(output);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9jb25uZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFJeEIsT0FBTyxFQUFFLEtBQUssSUFBSSxlQUFlLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUU1RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFnQjNELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQVksRUFBRSxNQUFjO0lBQzVELE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxFQUFF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