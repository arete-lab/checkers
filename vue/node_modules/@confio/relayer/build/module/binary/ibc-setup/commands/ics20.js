import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { Order } from '../../../codec/ibc/core/channel/v1/channel';
import { Link } from '../../../lib/link';
import { appFile, registryFile } from '../../constants';
import { loadAndValidateApp } from '../../utils/load-and-validate-app';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
import { resolveHomeOption } from '../../utils/options/shared/resolve-home-option';
import { resolveKeyFileOption } from '../../utils/options/shared/resolve-key-file-option';
import { resolveMnemonicOption } from '../../utils/options/shared/resolve-mnemonic-option';
import { signingClient } from '../../utils/signing-client';
const defaultPort = 'transfer';
function resolveConnections({ srcConnection, destConnection, }) {
    if (!srcConnection && destConnection) {
        throw new Error(`You have defined "destConnection" but no "srcConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && !destConnection) {
        throw new Error(`You have defined "srcConnection" but no "destConnection". Both "srcConnection" and "destConnection" must be present.`);
    }
    if (srcConnection && destConnection) {
        return {
            src: srcConnection,
            dest: destConnection,
        };
    }
    return null;
}
export async function ics20(flags, logger) {
    const home = resolveHomeOption({ homeFlag: flags.home });
    const app = loadAndValidateApp(home);
    if (!app) {
        throw new Error(`${appFile} not found at ${home}`);
    }
    const keyFile = resolveKeyFileOption({ keyFileFlag: flags.keyFile, app });
    const mnemonic = await resolveMnemonicOption({
        interactiveFlag: flags.interactive,
        mnemonicFlag: flags.mnemonic,
        keyFile,
        app,
    });
    const src = resolveOption('src', { required: true })(flags.src, app.src, process.env.RELAYER_SRC);
    const dest = resolveOption('dest', { required: true })(flags.dest, app.dest, process.env.RELAYER_DEST);
    // we apply default ports later, once we have the registry
    const srcPort = resolveOption('srcPort')(flags.srcPort, process.env.RELAYER_SRC_PORT);
    const destPort = resolveOption('destPort')(flags.destPort, process.env.RELAYER_DEST_PORT);
    const connections = resolveConnections(app);
    run({
        src,
        dest,
        home,
        mnemonic,
        srcPort,
        destPort,
        connections,
    }, app, logger);
}
async function resolveLink(nodeA, nodeB, connections, logger) {
    if (connections) {
        const link = await Link.createWithExistingConnections(nodeA, nodeB, connections.src, connections.dest, logger);
        logger.info(`Used existing connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
        return link;
    }
    const link = await Link.createWithNewConnections(nodeA, nodeB);
    logger.info(`Created connections ${link.endA.connectionID} (${link.endA.clientID}) <=> ${link.endB.connectionID} (${link.endB.clientID})`);
    return link;
}
export async function run(options, app, logger) {
    const registryFilePath = path.join(options.home, registryFile);
    const { chains } = loadAndValidateRegistry(registryFilePath);
    const srcChain = chains[options.src];
    if (!srcChain) {
        throw new Error('src chain not found in registry');
    }
    const destChain = chains[options.dest];
    if (!destChain) {
        throw new Error('dest chain not found in registry');
    }
    const ordering = Order.ORDER_UNORDERED;
    const version = 'ics20-1';
    const nodeA = await signingClient(srcChain, options.mnemonic, logger);
    const nodeB = await signingClient(destChain, options.mnemonic, logger);
    const link = await resolveLink(nodeA, nodeB, options.connections, logger);
    const srcConnection = link.endA.connectionID;
    const destConnection = link.endB.connectionID;
    const appFilePath = path.join(options.home, appFile);
    const appYaml = yaml.dump({
        ...app,
        srcConnection,
        destConnection,
    }, {
        lineWidth: 1000,
    });
    fs.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
    // provide default port, either from registry or global default
    const srcPort = resolveOption('src-port', { required: true })(options.srcPort, srcChain.ics20_port, defaultPort);
    const destPort = resolveOption('dest-port', { required: true })(options.destPort, destChain.ics20_port, defaultPort);
    const channels = await link.createChannel('A', srcPort, destPort, ordering, version);
    logger.info(`Created channels for connections ${link.endA.connectionID} <=> ${link.endB.connectionID}: ${channels.src.channelId} (${channels.src.portId}) => ${channels.dest.channelId} (${channels.dest.portId})`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzMjAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9jb21tYW5kcy9pY3MyMC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUczQixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFFbkUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ25GLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQTRCM0QsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBRS9CLFNBQVMsa0JBQWtCLENBQUMsRUFDMUIsYUFBYSxFQUNiLGNBQWMsR0FDSjtJQUNWLElBQUksQ0FBQyxhQUFhLElBQUksY0FBYyxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQ2Isc0hBQXNILENBQ3ZILENBQUM7S0FDSDtJQUVELElBQUksYUFBYSxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFL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