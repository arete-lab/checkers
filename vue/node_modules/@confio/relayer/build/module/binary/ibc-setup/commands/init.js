import fs from 'fs';
import path from 'path';
import { FaucetClient } from '@cosmjs/faucet-client';
import axios from 'axios';
import yaml from 'js-yaml';
import { appFile, registryFile } from '../../constants';
import { feeDenom } from '../../types';
import { deriveAddress } from '../../utils/derive-address';
import { generateMnemonic } from '../../utils/generate-mnemonic';
import { getDefaultHomePath } from '../../utils/get-default-home-path';
import { loadAndValidateRegistry } from '../../utils/load-and-validate-registry';
import { resolveOption } from '../../utils/options/resolve-option';
export async function init(flags, logger) {
    const options = {
        src: resolveOption('src', {
            required: true,
        })(flags.src, process.env.RELAYER_SRC),
        dest: resolveOption('dest', {
            required: true,
        })(flags.dest, process.env.RELAYER_DEST),
        home: resolveOption('home', { required: true })(flags.home, process.env.RELAYER_HOME, getDefaultHomePath),
    };
    await run(options, logger);
}
export async function run(options, logger) {
    const appFilePath = path.join(options.home, appFile);
    if (fs.existsSync(appFilePath)) {
        logger.info(`The ${appFile} is already initialized at ${options.home}`);
        return;
    }
    if (!fs.existsSync(options.home)) {
        fs.mkdirSync(options.home, { recursive: true });
        logger.info(`Initialized home directory at ${options.home}`);
    }
    else if (!fs.lstatSync(options.home).isDirectory()) {
        throw new Error(`${options.home} must be a directory.`);
    }
    const registryFilePath = path.join(options.home, registryFile);
    if (!fs.existsSync(registryFilePath)) {
        try {
            const registryFromRemote = await axios.get('https://raw.githubusercontent.com/confio/ts-relayer/main/demo/registry.yaml');
            fs.writeFileSync(registryFilePath, registryFromRemote.data);
        }
        catch (error) {
            throw new Error(`Cannot fetch ${registryFile} from remote. ${error}`);
        }
    }
    else if (!fs.lstatSync(registryFilePath).isFile()) {
        throw new Error(`${registryFilePath} must be a file.`);
    }
    const registry = loadAndValidateRegistry(registryFilePath);
    const [chainSrc, chainDest] = [options.src, options.dest].map((chain) => {
        const chainData = registry.chains[chain];
        if (!chainData) {
            throw new Error(`Chain ${chain} is missing in the registry, either check the spelling or add the chain definition to ${registryFilePath}`);
        }
        return chainData;
    });
    const mnemonic = generateMnemonic();
    const appYaml = yaml.dump({
        src: options.src,
        dest: options.dest,
        mnemonic,
    }, {
        lineWidth: 1000,
    });
    fs.writeFileSync(appFilePath, appYaml, { encoding: 'utf-8' });
    logger.info(`Saved configuration to ${appFilePath}`);
    const [addressSrc, addressDest] = await Promise.all([
        deriveAddress(mnemonic, chainSrc.prefix, chainSrc.hd_path),
        deriveAddress(mnemonic, chainDest.prefix, chainDest.hd_path),
    ]);
    logger.info(`Source address: ${addressSrc}`);
    logger.info(`Destination address: ${addressDest}`);
    // if there are faucets, ask for tokens
    if (chainSrc.faucet) {
        const srcDenom = feeDenom(chainSrc);
        logger.info(`Requesting ${srcDenom} for ${chainSrc.chain_id}...`);
        await new FaucetClient(chainSrc.faucet).credit(addressSrc, srcDenom);
    }
    if (chainDest.faucet) {
        const destDenom = feeDenom(chainDest);
        logger.info(`Requesting ${destDenom} for ${chainDest.chain_id}...`);
        await new FaucetClient(chainDest.faucet).credit(addressDest, destDenom);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2luaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUczQixPQUFPLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQVVuRSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxLQUFZLEVBQUUsTUFBYztJQUNyRCxNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFO1lBQ3hCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDdEMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDMUIsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFB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