#!/usr/bin/env node
import { Command } from 'commander';
import { addLoggerOptionsTo, chainOption, destOption, homeOption, interactiveOption, keyFileOption, mnemonicOption, srcOption, } from '../commander-options';
import { loggerWithErrorBoundary } from '../utils/logger-with-error-boundary';
import { balances } from './commands/balances';
import { channels } from './commands/channels';
import { connect } from './commands/connect';
import { connections } from './commands/connections';
import { ics20 } from './commands/ics20';
import { init } from './commands/init';
import { keysGenerate } from './commands/keys-generate';
import { keysList } from './commands/keys-list';
export const program = new Command();
// TODO: fill options and commands descriptions
program.description('ibc-setup program description');
const initCommand = program
    .command('init')
    .description('init command description')
    .addOption(homeOption)
    .addOption(srcOption)
    .addOption(destOption)
    .action(loggerWithErrorBoundary(init));
addLoggerOptionsTo(initCommand);
const ics20Command = program
    .command('ics20')
    .description('ics20 command description')
    .addOption(srcOption)
    .addOption(destOption)
    .addOption(mnemonicOption)
    .option('--src-port <port>')
    .option('--dest-port <port>')
    .action(loggerWithErrorBoundary(ics20));
addLoggerOptionsTo(ics20Command);
const keys = program.command('keys');
const keysGenerateCommand = keys
    .command('generate')
    .description('keys generate command description')
    .addOption(keyFileOption)
    .action(loggerWithErrorBoundary(keysGenerate));
addLoggerOptionsTo(keysGenerateCommand);
const keysListCommand = keys
    .command('list')
    .description('keys list command description')
    .addOption(homeOption)
    .addOption(mnemonicOption)
    .addOption(keyFileOption)
    .addOption(interactiveOption)
    .action(loggerWithErrorBoundary(keysList));
addLoggerOptionsTo(keysListCommand);
const balancesCommand = program
    .command('balances')
    .description('balances command description')
    .addOption(homeOption)
    .addOption(mnemonicOption)
    .addOption(keyFileOption)
    .addOption(interactiveOption)
    .action(loggerWithErrorBoundary(balances));
addLoggerOptionsTo(balancesCommand);
const connectCommand = program
    .command('connect')
    .description('connect command description')
    .addOption(srcOption)
    .addOption(destOption)
    .addOption(homeOption)
    .addOption(mnemonicOption)
    .addOption(keyFileOption)
    .addOption(interactiveOption)
    .action(loggerWithErrorBoundary(connect));
addLoggerOptionsTo(connectCommand);
const channelsCommand = program
    .command('channels')
    .description('channels command description')
    .addOption(homeOption)
    .addOption(mnemonicOption)
    .addOption(interactiveOption)
    .addOption(chainOption)
    .option('--port <port>')
    .action(loggerWithErrorBoundary(channels));
addLoggerOptionsTo(channelsCommand);
const connectionsCommand = program
    .command('connections')
    .description('connections command description')
    .addOption(homeOption)
    .addOption(mnemonicOption)
    .addOption(interactiveOption)
    .addOption(chainOption)
    .action(loggerWithErrorBoundary(connections));
addLoggerOptionsTo(connectionsCommand);
program.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmluYXJ5L2liYy1zZXR1cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVwQyxPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLFdBQVcsRUFDWCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGlCQUFpQixFQUNqQixhQUFhLEVBQ2IsY0FBYyxFQUNkLFNBQVMsR0FDVixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRTlFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFFckMsK0NBQStDO0FBQy9DLE9BQU8sQ0FBQyxXQUFXLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUVyRCxNQUFNLFdBQVcsR0FBRyxPQUFPO0tBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FDZixXQUFXLENBQUMsMEJBQTBCLENBQUM7S0FDdkMsU0FBUyxDQUFDLFVBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsU0FBUyxDQUFDO0tBQ3BCLFNBQVMsQ0FBQyxVQUFVLENBQUM7S0FDckIsTUFBTSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDekMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFaEMsTUFBTSxZQUFZLEdBQUcsT0FBTztLQUN6QixPQUFPLENBQUMsT0FBTyxDQUFDO0tBQ2hCLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQztLQUN4QyxTQUFTLENBQUMsU0FBUyxDQUFDO0tBQ3BCLFNBQVMsQ0FBQyxVQUFVLENBQUM7S0FDckIsU0FBUyxDQUFDLGNBQWMsQ0FBQztLQUN6QixNQUFNLENBQUMsbUJBQW1CLENBQUM7S0FDM0IsTUFBTSxDQUFDLG9CQUFvQixDQUFDO0tBQzVCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRWpDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFckMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJO0tBQzdCLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDbkIsV0FBVyxDQUFDLG1DQUFtQyxDQUFDO0tBQ2hELFNBQVMsQ0FBQyxhQUFhLENBQUM7S0FDeEIsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDakQsa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUV4QyxNQUFNLGVBQWUsR0FBRyxJQUFJO0tBQ3pCLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FDZixXQUFXLENBQUMsK0JBQStCLENBQUM7S0FDNUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsY0FBYyxDQUFDO0tBQ3pCLFNBQVMsQ0FBQyxhQUFhLENBQUM7S0FDeEIsU0FBUyxDQUFDLGlCQUFpQixDQUFDO0tBQzVCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzdDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXBDLE1BQU0sZUFBZSxHQUFHLE9BQU87S0FDNUIsT0FBTyxDQUFDLFVBQVUsQ0FBQztLQUNuQixXQUFXLENBQUMsOEJBQThCLENBQUM7S0FDM0MsU0FBUyxDQUFDLFVBQVUsQ0FBQztLQUNyQixTQUFTLENBQUMsY0FBYyxDQUFDO0tBQ3pCLFNBQVMsQ0FBQyxhQUFhLENBQUM7S0FDeEIsU0FBUyxDQUFDLGlCQUFpQixDQUFDO0tBQzVCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzdDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXBDLE1BQU0sY0FBYyxHQUFHLE9BQU87S0FDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQztLQUNsQixXQUFXLENBQUMsNkJBQTZCLENBQUM7S0FDMUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztLQUNwQixTQUFTLENBQUMsVUFBVSxDQUFDO0tBQ3JCLFNBQVMsQ0FBQyxVQUFVLENBQUM7S0FDckIsU0FBUyxDQUFDLGNBQWMsQ0FBQztLQUN6QixTQUFTLENBQUMsYUFBYSxDQUFDO0tBQ3hCLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztLQUM1QixNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM1QyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUVuQyxNQUFNLGVBQWUsR0FBRyxPQUFPO0tBQzVCLE9BQU8sQ0FBQyxVQUFVLENBQUM7S0FDbkIsV0FBVyxDQUFDLDhCQUE4QixDQUFDO0tBQzNDLFNBQVMsQ0FBQyxVQUFVLENBQUM7S0FDckIsU0FBUyxDQUFDLGNBQWMsQ0FBQztLQUN6QixTQUFTLENBQUMsaUJBQWlCLENBQUM7S0FDNUIsU0FBUyxDQUFDLFdBQVcsQ0FBQztLQUN0QixNQUFNLENBQUMsZUFBZSxDQUFDO0tBQ3ZCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzdDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRXBDLE1BQU0sa0JBQWtCLEdBQUcsT0FBTztLQUMvQixPQUFPLENBQUMsYUFBYSxDQUFDO0tBQ3RCLFdBQVcsQ0FBQyxpQ0FBaUMsQ0FBQztLQUM5QyxTQUFTLENBQUMsVUFBVSxDQUFDO0tBQ3JCLFNBQVMsQ0FBQyxjQUFjLENBQUM7S0FDekIsU0FBUyxDQUFDLGlCQUFpQixDQUFDO0tBQzVCLFNBQVMsQ0FBQyxXQUFXLENBQUM7S0FDdEIsTUFBTSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDaEQsa0JBQWtCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUV2QyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyJ9