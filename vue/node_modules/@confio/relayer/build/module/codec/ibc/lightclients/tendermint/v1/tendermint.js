/* eslint-disable */
import { Duration } from '../../../../google/protobuf/duration';
import { Height } from '../../../../ibc/core/client/v1/client';
import { Timestamp } from '../../../../google/protobuf/timestamp';
import { MerkleRoot } from '../../../../ibc/core/commitment/v1/commitment';
import { SignedHeader } from '../../../../tendermint/types/types';
import { ValidatorSet } from '../../../../tendermint/types/validator';
import Long from 'long';
import { ProofSpec } from '../../../../confio/proofs';
import _m0 from 'protobufjs/minimal';
export const protobufPackage = 'ibc.lightclients.tendermint.v1';
const baseClientState = {
    chainId: '',
    upgradePath: '',
    allowUpdateAfterExpiry: false,
    allowUpdateAfterMisbehaviour: false,
};
export const ClientState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.chainId !== '') {
            writer.uint32(10).string(message.chainId);
        }
        if (message.trustLevel !== undefined) {
            Fraction.encode(message.trustLevel, writer.uint32(18).fork()).ldelim();
        }
        if (message.trustingPeriod !== undefined) {
            Duration.encode(message.trustingPeriod, writer.uint32(26).fork()).ldelim();
        }
        if (message.unbondingPeriod !== undefined) {
            Duration.encode(message.unbondingPeriod, writer.uint32(34).fork()).ldelim();
        }
        if (message.maxClockDrift !== undefined) {
            Duration.encode(message.maxClockDrift, writer.uint32(42).fork()).ldelim();
        }
        if (message.frozenHeight !== undefined) {
            Height.encode(message.frozenHeight, writer.uint32(50).fork()).ldelim();
        }
        if (message.latestHeight !== undefined) {
            Height.encode(message.latestHeight, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.proofSpecs) {
            ProofSpec.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (const v of message.upgradePath) {
            writer.uint32(74).string(v);
        }
        if (message.allowUpdateAfterExpiry === true) {
            writer.uint32(80).bool(message.allowUpdateAfterExpiry);
        }
        if (message.allowUpdateAfterMisbehaviour === true) {
            writer.uint32(88).bool(message.allowUpdateAfterMisbehaviour);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseClientState };
        message.proofSpecs = [];
        message.upgradePath = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.trustLevel = Fraction.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.trustingPeriod = Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.unbondingPeriod = Duration.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.maxClockDrift = Duration.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.frozenHeight = Height.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.latestHeight = Height.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.proofSpecs.push(ProofSpec.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.upgradePath.push(reader.string());
                    break;
                case 10:
                    message.allowUpdateAfterExpiry = reader.bool();
                    break;
                case 11:
                    message.allowUpdateAfterMisbehaviour = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseClientState };
        message.proofSpecs = [];
        message.upgradePath = [];
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = '';
        }
        if (object.trustLevel !== undefined && object.trustLevel !== null) {
            message.trustLevel = Fraction.fromJSON(object.trustLevel);
        }
        else {
            message.trustLevel = undefined;
        }
        if (object.trustingPeriod !== undefined && object.trustingPeriod !== null) {
            message.trustingPeriod = Duration.fromJSON(object.trustingPeriod);
        }
        else {
            message.trustingPeriod = undefined;
        }
        if (object.unbondingPeriod !== undefined &&
            object.unbondingPeriod !== null) {
            message.unbondingPeriod = Duration.fromJSON(object.unbondingPeriod);
        }
        else {
            message.unbondingPeriod = undefined;
        }
        if (object.maxClockDrift !== undefined && object.maxClockDrift !== null) {
            message.maxClockDrift = Duration.fromJSON(object.maxClockDrift);
        }
        else {
            message.maxClockDrift = undefined;
        }
        if (object.frozenHeight !== undefined && object.frozenHeight !== null) {
            message.frozenHeight = Height.fromJSON(object.frozenHeight);
        }
        else {
            message.frozenHeight = undefined;
        }
        if (object.latestHeight !== undefined && object.latestHeight !== null) {
            message.latestHeight = Height.fromJSON(object.latestHeight);
        }
        else {
            message.latestHeight = undefined;
        }
        if (object.proofSpecs !== undefined && object.proofSpecs !== null) {
            for (const e of object.proofSpecs) {
                message.proofSpecs.push(ProofSpec.fromJSON(e));
            }
        }
        if (object.upgradePath !== undefined && object.upgradePath !== null) {
            for (const e of object.upgradePath) {
                message.upgradePath.push(String(e));
            }
        }
        if (object.allowUpdateAfterExpiry !== undefined &&
            object.allowUpdateAfterExpiry !== null) {
            message.allowUpdateAfterExpiry = Boolean(object.allowUpdateAfterExpiry);
        }
        else {
            message.allowUpdateAfterExpiry = false;
        }
        if (object.allowUpdateAfterMisbehaviour !== undefined &&
            object.allowUpdateAfterMisbehaviour !== null) {
            message.allowUpdateAfterMisbehaviour = Boolean(object.allowUpdateAfterMisbehaviour);
        }
        else {
            message.allowUpdateAfterMisbehaviour = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.trustLevel !== undefined &&
            (obj.trustLevel = message.trustLevel
                ? Fraction.toJSON(message.trustLevel)
                : undefined);
        message.trustingPeriod !== undefined &&
            (obj.trustingPeriod = message.trustingPeriod
                ? Duration.toJSON(message.trustingPeriod)
                : undefined);
        message.unbondingPeriod !== undefined &&
            (obj.unbondingPeriod = message.unbondingPeriod
                ? Duration.toJSON(message.unbondingPeriod)
                : undefined);
        message.maxClockDrift !== undefined &&
            (obj.maxClockDrift = message.maxClockDrift
                ? Duration.toJSON(message.maxClockDrift)
                : undefined);
        message.frozenHeight !== undefined &&
            (obj.frozenHeight = message.frozenHeight
                ? Height.toJSON(message.frozenHeight)
                : undefined);
        message.latestHeight !== undefined &&
            (obj.latestHeight = message.latestHeight
                ? Height.toJSON(message.latestHeight)
                : undefined);
        if (message.proofSpecs) {
            obj.proofSpecs = message.proofSpecs.map((e) => e ? ProofSpec.toJSON(e) : undefined);
        }
        else {
            obj.proofSpecs = [];
        }
        if (message.upgradePath) {
            obj.upgradePath = message.upgradePath.map((e) => e);
        }
        else {
            obj.upgradePath = [];
        }
        message.allowUpdateAfterExpiry !== undefined &&
            (obj.allowUpdateAfterExpiry = message.allowUpdateAfterExpiry);
        message.allowUpdateAfterMisbehaviour !== undefined &&
            (obj.allowUpdateAfterMisbehaviour = message.allowUpdateAfterMisbehaviour);
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseClientState };
        message.proofSpecs = [];
        message.upgradePath = [];
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = '';
        }
        if (object.trustLevel !== undefined && object.trustLevel !== null) {
            message.trustLevel = Fraction.fromPartial(object.trustLevel);
        }
        else {
            message.trustLevel = undefined;
        }
        if (object.trustingPeriod !== undefined && object.trustingPeriod !== null) {
            message.trustingPeriod = Duration.fromPartial(object.trustingPeriod);
        }
        else {
            message.trustingPeriod = undefined;
        }
        if (object.unbondingPeriod !== undefined &&
            object.unbondingPeriod !== null) {
            message.unbondingPeriod = Duration.fromPartial(object.unbondingPeriod);
        }
        else {
            message.unbondingPeriod = undefined;
        }
        if (object.maxClockDrift !== undefined && object.maxClockDrift !== null) {
            message.maxClockDrift = Duration.fromPartial(object.maxClockDrift);
        }
        else {
            message.maxClockDrift = undefined;
        }
        if (object.frozenHeight !== undefined && object.frozenHeight !== null) {
            message.frozenHeight = Height.fromPartial(object.frozenHeight);
        }
        else {
            message.frozenHeight = undefined;
        }
        if (object.latestHeight !== undefined && object.latestHeight !== null) {
            message.latestHeight = Height.fromPartial(object.latestHeight);
        }
        else {
            message.latestHeight = undefined;
        }
        if (object.proofSpecs !== undefined && object.proofSpecs !== null) {
            for (const e of object.proofSpecs) {
                message.proofSpecs.push(ProofSpec.fromPartial(e));
            }
        }
        if (object.upgradePath !== undefined && object.upgradePath !== null) {
            for (const e of object.upgradePath) {
                message.upgradePath.push(e);
            }
        }
        if (object.allowUpdateAfterExpiry !== undefined &&
            object.allowUpdateAfterExpiry !== null) {
            message.allowUpdateAfterExpiry = object.allowUpdateAfterExpiry;
        }
        else {
            message.allowUpdateAfterExpiry = false;
        }
        if (object.allowUpdateAfterMisbehaviour !== undefined &&
            object.allowUpdateAfterMisbehaviour !== null) {
            message.allowUpdateAfterMisbehaviour =
                object.allowUpdateAfterMisbehaviour;
        }
        else {
            message.allowUpdateAfterMisbehaviour = false;
        }
        return message;
    },
};
const baseConsensusState = {};
export const ConsensusState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.timestamp !== undefined) {
            Timestamp.encode(message.timestamp, writer.uint32(10).fork()).ldelim();
        }
        if (message.root !== undefined) {
            MerkleRoot.encode(message.root, writer.uint32(18).fork()).ldelim();
        }
        if (message.nextValidatorsHash.length !== 0) {
            writer.uint32(26).bytes(message.nextValidatorsHash);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseConsensusState };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.timestamp = Timestamp.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.root = MerkleRoot.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.nextValidatorsHash = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseConsensusState };
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = fromJsonTimestamp(object.timestamp);
        }
        else {
            message.timestamp = undefined;
        }
        if (object.root !== undefined && object.root !== null) {
            message.root = MerkleRoot.fromJSON(object.root);
        }
        else {
            message.root = undefined;
        }
        if (object.nextValidatorsHash !== undefined &&
            object.nextValidatorsHash !== null) {
            message.nextValidatorsHash = bytesFromBase64(object.nextValidatorsHash);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.timestamp !== undefined &&
            (obj.timestamp =
                message.timestamp !== undefined
                    ? fromTimestamp(message.timestamp).toISOString()
                    : null);
        message.root !== undefined &&
            (obj.root = message.root ? MerkleRoot.toJSON(message.root) : undefined);
        message.nextValidatorsHash !== undefined &&
            (obj.nextValidatorsHash = base64FromBytes(message.nextValidatorsHash !== undefined
                ? message.nextValidatorsHash
                : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseConsensusState };
        if (object.timestamp !== undefined && object.timestamp !== null) {
            message.timestamp = Timestamp.fromPartial(object.timestamp);
        }
        else {
            message.timestamp = undefined;
        }
        if (object.root !== undefined && object.root !== null) {
            message.root = MerkleRoot.fromPartial(object.root);
        }
        else {
            message.root = undefined;
        }
        if (object.nextValidatorsHash !== undefined &&
            object.nextValidatorsHash !== null) {
            message.nextValidatorsHash = object.nextValidatorsHash;
        }
        else {
            message.nextValidatorsHash = new Uint8Array();
        }
        return message;
    },
};
const baseMisbehaviour = { clientId: '' };
export const Misbehaviour = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.clientId !== '') {
            writer.uint32(10).string(message.clientId);
        }
        if (message.header1 !== undefined) {
            Header.encode(message.header1, writer.uint32(18).fork()).ldelim();
        }
        if (message.header2 !== undefined) {
            Header.encode(message.header2, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseMisbehaviour };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.clientId = reader.string();
                    break;
                case 2:
                    message.header1 = Header.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.header2 = Header.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseMisbehaviour };
        if (object.clientId !== undefined && object.clientId !== null) {
            message.clientId = String(object.clientId);
        }
        else {
            message.clientId = '';
        }
        if (object.header1 !== undefined && object.header1 !== null) {
            message.header1 = Header.fromJSON(object.header1);
        }
        else {
            message.header1 = undefined;
        }
        if (object.header2 !== undefined && object.header2 !== null) {
            message.header2 = Header.fromJSON(object.header2);
        }
        else {
            message.header2 = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.clientId !== undefined && (obj.clientId = message.clientId);
        message.header1 !== undefined &&
            (obj.header1 = message.header1
                ? Header.toJSON(message.header1)
                : undefined);
        message.header2 !== undefined &&
            (obj.header2 = message.header2
                ? Header.toJSON(message.header2)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseMisbehaviour };
        if (object.clientId !== undefined && object.clientId !== null) {
            message.clientId = object.clientId;
        }
        else {
            message.clientId = '';
        }
        if (object.header1 !== undefined && object.header1 !== null) {
            message.header1 = Header.fromPartial(object.header1);
        }
        else {
            message.header1 = undefined;
        }
        if (object.header2 !== undefined && object.header2 !== null) {
            message.header2 = Header.fromPartial(object.header2);
        }
        else {
            message.header2 = undefined;
        }
        return message;
    },
};
const baseHeader = {};
export const Header = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.signedHeader !== undefined) {
            SignedHeader.encode(message.signedHeader, writer.uint32(10).fork()).ldelim();
        }
        if (message.validatorSet !== undefined) {
            ValidatorSet.encode(message.validatorSet, writer.uint32(18).fork()).ldelim();
        }
        if (message.trustedHeight !== undefined) {
            Height.encode(message.trustedHeight, writer.uint32(26).fork()).ldelim();
        }
        if (message.trustedValidators !== undefined) {
            ValidatorSet.encode(message.trustedValidators, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseHeader };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.signedHeader = SignedHeader.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.validatorSet = ValidatorSet.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.trustedHeight = Height.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.trustedValidators = ValidatorSet.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseHeader };
        if (object.signedHeader !== undefined && object.signedHeader !== null) {
            message.signedHeader = SignedHeader.fromJSON(object.signedHeader);
        }
        else {
            message.signedHeader = undefined;
        }
        if (object.validatorSet !== undefined && object.validatorSet !== null) {
            message.validatorSet = ValidatorSet.fromJSON(object.validatorSet);
        }
        else {
            message.validatorSet = undefined;
        }
        if (object.trustedHeight !== undefined && object.trustedHeight !== null) {
            message.trustedHeight = Height.fromJSON(object.trustedHeight);
        }
        else {
            message.trustedHeight = undefined;
        }
        if (object.trustedValidators !== undefined &&
            object.trustedValidators !== null) {
            message.trustedValidators = ValidatorSet.fromJSON(object.trustedValidators);
        }
        else {
            message.trustedValidators = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.signedHeader !== undefined &&
            (obj.signedHeader = message.signedHeader
                ? SignedHeader.toJSON(message.signedHeader)
                : undefined);
        message.validatorSet !== undefined &&
            (obj.validatorSet = message.validatorSet
                ? ValidatorSet.toJSON(message.validatorSet)
                : undefined);
        message.trustedHeight !== undefined &&
            (obj.trustedHeight = message.trustedHeight
                ? Height.toJSON(message.trustedHeight)
                : undefined);
        message.trustedValidators !== undefined &&
            (obj.trustedValidators = message.trustedValidators
                ? ValidatorSet.toJSON(message.trustedValidators)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseHeader };
        if (object.signedHeader !== undefined && object.signedHeader !== null) {
            message.signedHeader = SignedHeader.fromPartial(object.signedHeader);
        }
        else {
            message.signedHeader = undefined;
        }
        if (object.validatorSet !== undefined && object.validatorSet !== null) {
            message.validatorSet = ValidatorSet.fromPartial(object.validatorSet);
        }
        else {
            message.validatorSet = undefined;
        }
        if (object.trustedHeight !== undefined && object.trustedHeight !== null) {
            message.trustedHeight = Height.fromPartial(object.trustedHeight);
        }
        else {
            message.trustedHeight = undefined;
        }
        if (object.trustedValidators !== undefined &&
            object.trustedValidators !== null) {
            message.trustedValidators = ValidatorSet.fromPartial(object.trustedValidators);
        }
        else {
            message.trustedValidators = undefined;
        }
        return message;
    },
};
const baseFraction = { numerator: Long.UZERO, denominator: Long.UZERO };
export const Fraction = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.numerator.isZero()) {
            writer.uint32(8).uint64(message.numerator);
        }
        if (!message.denominator.isZero()) {
            writer.uint32(16).uint64(message.denominator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseFraction };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.numerator = reader.uint64();
                    break;
                case 2:
                    message.denominator = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseFraction };
        if (object.numerator !== undefined && object.numerator !== null) {
            message.numerator = Long.fromString(object.numerator);
        }
        else {
            message.numerator = Long.UZERO;
        }
        if (object.denominator !== undefined && object.denominator !== null) {
            message.denominator = Long.fromString(object.denominator);
        }
        else {
            message.denominator = Long.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.numerator !== undefined &&
            (obj.numerator = (message.numerator || Long.UZERO).toString());
        message.denominator !== undefined &&
            (obj.denominator = (message.denominator || Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseFraction };
        if (object.numerator !== undefined && object.numerator !== null) {
            message.numerator = object.numerator;
        }
        else {
            message.numerator = Long.UZERO;
        }
        if (object.denominator !== undefined && object.denominator !== null) {
            message.denominator = object.denominator;
        }
        else {
            message.denominator = Long.UZERO;
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    if (typeof global !== 'undefined')
        return global;
    throw 'Unable to locate global object';
})();
const atob = globalThis.atob ||
    ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa ||
    ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
function base64FromBytes(arr) {
    const bin = [];
    for (let i = 0; i < arr.byteLength; ++i) {
        bin.push(String.fromCharCode(arr[i]));
    }
    return btoa(bin.join(''));
}
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return toTimestamp(o);
    }
    else if (typeof o === 'string') {
        return toTimestamp(new Date(o));
    }
    else {
        return Timestamp.fromJSON(o);
    }
}
function numberToLong(number) {
    return Long.fromNumber(number);
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=data:application/json;base64,