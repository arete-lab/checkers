/* eslint-disable */
import Long from 'long';
import { Duration } from '../../google/protobuf/duration';
import _m0 from 'protobufjs/minimal';
export const protobufPackage = 'tendermint.types';
const baseConsensusParams = {};
export const ConsensusParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.block !== undefined) {
            BlockParams.encode(message.block, writer.uint32(10).fork()).ldelim();
        }
        if (message.evidence !== undefined) {
            EvidenceParams.encode(message.evidence, writer.uint32(18).fork()).ldelim();
        }
        if (message.validator !== undefined) {
            ValidatorParams.encode(message.validator, writer.uint32(26).fork()).ldelim();
        }
        if (message.version !== undefined) {
            VersionParams.encode(message.version, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseConsensusParams };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.block = BlockParams.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.evidence = EvidenceParams.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.validator = ValidatorParams.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.version = VersionParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseConsensusParams };
        if (object.block !== undefined && object.block !== null) {
            message.block = BlockParams.fromJSON(object.block);
        }
        else {
            message.block = undefined;
        }
        if (object.evidence !== undefined && object.evidence !== null) {
            message.evidence = EvidenceParams.fromJSON(object.evidence);
        }
        else {
            message.evidence = undefined;
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = ValidatorParams.fromJSON(object.validator);
        }
        else {
            message.validator = undefined;
        }
        if (object.version !== undefined && object.version !== null) {
            message.version = VersionParams.fromJSON(object.version);
        }
        else {
            message.version = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.block !== undefined &&
            (obj.block = message.block
                ? BlockParams.toJSON(message.block)
                : undefined);
        message.evidence !== undefined &&
            (obj.evidence = message.evidence
                ? EvidenceParams.toJSON(message.evidence)
                : undefined);
        message.validator !== undefined &&
            (obj.validator = message.validator
                ? ValidatorParams.toJSON(message.validator)
                : undefined);
        message.version !== undefined &&
            (obj.version = message.version
                ? VersionParams.toJSON(message.version)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseConsensusParams };
        if (object.block !== undefined && object.block !== null) {
            message.block = BlockParams.fromPartial(object.block);
        }
        else {
            message.block = undefined;
        }
        if (object.evidence !== undefined && object.evidence !== null) {
            message.evidence = EvidenceParams.fromPartial(object.evidence);
        }
        else {
            message.evidence = undefined;
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = ValidatorParams.fromPartial(object.validator);
        }
        else {
            message.validator = undefined;
        }
        if (object.version !== undefined && object.version !== null) {
            message.version = VersionParams.fromPartial(object.version);
        }
        else {
            message.version = undefined;
        }
        return message;
    },
};
const baseBlockParams = {
    maxBytes: Long.ZERO,
    maxGas: Long.ZERO,
    timeIotaMs: Long.ZERO,
};
export const BlockParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.maxBytes.isZero()) {
            writer.uint32(8).int64(message.maxBytes);
        }
        if (!message.maxGas.isZero()) {
            writer.uint32(16).int64(message.maxGas);
        }
        if (!message.timeIotaMs.isZero()) {
            writer.uint32(24).int64(message.timeIotaMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseBlockParams };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxBytes = reader.int64();
                    break;
                case 2:
                    message.maxGas = reader.int64();
                    break;
                case 3:
                    message.timeIotaMs = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseBlockParams };
        if (object.maxBytes !== undefined && object.maxBytes !== null) {
            message.maxBytes = Long.fromString(object.maxBytes);
        }
        else {
            message.maxBytes = Long.ZERO;
        }
        if (object.maxGas !== undefined && object.maxGas !== null) {
            message.maxGas = Long.fromString(object.maxGas);
        }
        else {
            message.maxGas = Long.ZERO;
        }
        if (object.timeIotaMs !== undefined && object.timeIotaMs !== null) {
            message.timeIotaMs = Long.fromString(object.timeIotaMs);
        }
        else {
            message.timeIotaMs = Long.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.maxBytes !== undefined &&
            (obj.maxBytes = (message.maxBytes || Long.ZERO).toString());
        message.maxGas !== undefined &&
            (obj.maxGas = (message.maxGas || Long.ZERO).toString());
        message.timeIotaMs !== undefined &&
            (obj.timeIotaMs = (message.timeIotaMs || Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseBlockParams };
        if (object.maxBytes !== undefined && object.maxBytes !== null) {
            message.maxBytes = object.maxBytes;
        }
        else {
            message.maxBytes = Long.ZERO;
        }
        if (object.maxGas !== undefined && object.maxGas !== null) {
            message.maxGas = object.maxGas;
        }
        else {
            message.maxGas = Long.ZERO;
        }
        if (object.timeIotaMs !== undefined && object.timeIotaMs !== null) {
            message.timeIotaMs = object.timeIotaMs;
        }
        else {
            message.timeIotaMs = Long.ZERO;
        }
        return message;
    },
};
const baseEvidenceParams = {
    maxAgeNumBlocks: Long.ZERO,
    maxBytes: Long.ZERO,
};
export const EvidenceParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.maxAgeNumBlocks.isZero()) {
            writer.uint32(8).int64(message.maxAgeNumBlocks);
        }
        if (message.maxAgeDuration !== undefined) {
            Duration.encode(message.maxAgeDuration, writer.uint32(18).fork()).ldelim();
        }
        if (!message.maxBytes.isZero()) {
            writer.uint32(24).int64(message.maxBytes);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseEvidenceParams };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxAgeNumBlocks = reader.int64();
                    break;
                case 2:
                    message.maxAgeDuration = Duration.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.maxBytes = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseEvidenceParams };
        if (object.maxAgeNumBlocks !== undefined &&
            object.maxAgeNumBlocks !== null) {
            message.maxAgeNumBlocks = Long.fromString(object.maxAgeNumBlocks);
        }
        else {
            message.maxAgeNumBlocks = Long.ZERO;
        }
        if (object.maxAgeDuration !== undefined && object.maxAgeDuration !== null) {
            message.maxAgeDuration = Duration.fromJSON(object.maxAgeDuration);
        }
        else {
            message.maxAgeDuration = undefined;
        }
        if (object.maxBytes !== undefined && object.maxBytes !== null) {
            message.maxBytes = Long.fromString(object.maxBytes);
        }
        else {
            message.maxBytes = Long.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.maxAgeNumBlocks !== undefined &&
            (obj.maxAgeNumBlocks = (message.maxAgeNumBlocks || Long.ZERO).toString());
        message.maxAgeDuration !== undefined &&
            (obj.maxAgeDuration = message.maxAgeDuration
                ? Duration.toJSON(message.maxAgeDuration)
                : undefined);
        message.maxBytes !== undefined &&
            (obj.maxBytes = (message.maxBytes || Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseEvidenceParams };
        if (object.maxAgeNumBlocks !== undefined &&
            object.maxAgeNumBlocks !== null) {
            message.maxAgeNumBlocks = object.maxAgeNumBlocks;
        }
        else {
            message.maxAgeNumBlocks = Long.ZERO;
        }
        if (object.maxAgeDuration !== undefined && object.maxAgeDuration !== null) {
            message.maxAgeDuration = Duration.fromPartial(object.maxAgeDuration);
        }
        else {
            message.maxAgeDuration = undefined;
        }
        if (object.maxBytes !== undefined && object.maxBytes !== null) {
            message.maxBytes = object.maxBytes;
        }
        else {
            message.maxBytes = Long.ZERO;
        }
        return message;
    },
};
const baseValidatorParams = { pubKeyTypes: '' };
export const ValidatorParams = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.pubKeyTypes) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseValidatorParams };
        message.pubKeyTypes = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pubKeyTypes.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseValidatorParams };
        message.pubKeyTypes = [];
        if (object.pubKeyTypes !== undefined && object.pubKeyTypes !== null) {
            for (const e of object.pubKeyTypes) {
                message.pubKeyTypes.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.pubKeyTypes) {
            obj.pubKeyTypes = message.pubKeyTypes.map((e) => e);
        }
        else {
            obj.pubKeyTypes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseValidatorParams };
        message.pubKeyTypes = [];
        if (object.pubKeyTypes !== undefined && object.pubKeyTypes !== null) {
            for (const e of object.pubKeyTypes) {
                message.pubKeyTypes.push(e);
            }
        }
        return message;
    },
};
const baseVersionParams = { appVersion: Long.UZERO };
export const VersionParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.appVersion.isZero()) {
            writer.uint32(8).uint64(message.appVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseVersionParams };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appVersion = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseVersionParams };
        if (object.appVersion !== undefined && object.appVersion !== null) {
            message.appVersion = Long.fromString(object.appVersion);
        }
        else {
            message.appVersion = Long.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.appVersion !== undefined &&
            (obj.appVersion = (message.appVersion || Long.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseVersionParams };
        if (object.appVersion !== undefined && object.appVersion !== null) {
            message.appVersion = object.appVersion;
        }
        else {
            message.appVersion = Long.UZERO;
        }
        return message;
    },
};
const baseHashedParams = {
    blockMaxBytes: Long.ZERO,
    blockMaxGas: Long.ZERO,
};
export const HashedParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.blockMaxBytes.isZero()) {
            writer.uint32(8).int64(message.blockMaxBytes);
        }
        if (!message.blockMaxGas.isZero()) {
            writer.uint32(16).int64(message.blockMaxGas);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof Uint8Array ? new _m0.Reader(input) : input;
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = { ...baseHashedParams };
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockMaxBytes = reader.int64();
                    break;
                case 2:
                    message.blockMaxGas = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = { ...baseHashedParams };
        if (object.blockMaxBytes !== undefined && object.blockMaxBytes !== null) {
            message.blockMaxBytes = Long.fromString(object.blockMaxBytes);
        }
        else {
            message.blockMaxBytes = Long.ZERO;
        }
        if (object.blockMaxGas !== undefined && object.blockMaxGas !== null) {
            message.blockMaxGas = Long.fromString(object.blockMaxGas);
        }
        else {
            message.blockMaxGas = Long.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.blockMaxBytes !== undefined &&
            (obj.blockMaxBytes = (message.blockMaxBytes || Long.ZERO).toString());
        message.blockMaxGas !== undefined &&
            (obj.blockMaxGas = (message.blockMaxGas || Long.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = { ...baseHashedParams };
        if (object.blockMaxBytes !== undefined && object.blockMaxBytes !== null) {
            message.blockMaxBytes = object.blockMaxBytes;
        }
        else {
            message.blockMaxBytes = Long.ZERO;
        }
        if (object.blockMaxGas !== undefined && object.blockMaxGas !== null) {
            message.blockMaxGas = object.blockMaxGas;
        }
        else {
            message.blockMaxGas = Long.ZERO;
        }
        return message;
    },
};
//# sourceMappingURL=data:application/json;base64,