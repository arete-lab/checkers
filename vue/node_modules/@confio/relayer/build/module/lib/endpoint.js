import { toHex } from '@cosmjs/encoding';
import { logs } from '@cosmjs/launchpad';
import { parseRawLog } from '@cosmjs/stargate';
import { parseAcksFromLogs, parsePacketsFromLogs } from './utils';
/**
 * Endpoint is a wrapper around SigningStargateClient as well as ClientID
 * and ConnectionID. Two Endpoints compose a Link and this should expose all the
 * methods you need to work on one half of an IBC Connection, the higher-level
 * orchestration is handled in Link.
 */
export class Endpoint {
    constructor(client, clientID, connectionID) {
        this.client = client;
        this.clientID = clientID;
        this.connectionID = connectionID;
    }
    chainId() {
        return this.client.chainId;
    }
    async getLatestCommit() {
        return this.client.getCommit();
    }
    // returns all packets (auto-paginates, so be careful about not setting a minHeight)
    async querySentPackets({ minHeight, maxHeight, } = {}) {
        let query = `send_packet.packet_connection='${this.connectionID}'`;
        if (minHeight) {
            query = `${query} AND tx.height>=${minHeight}`;
        }
        if (maxHeight) {
            query = `${query} AND tx.height<=${maxHeight}`;
        }
        const search = await this.client.tm.txSearchAll({ query });
        const resultsNested = search.txs.map(({ hash, height, result }) => {
            const parsedLogs = parseRawLog(result.log);
            // we accept message.sender (cosmos-sdk) and message.signer (x/wasm)
            let sender = '';
            try {
                sender = logs.findAttribute(parsedLogs, 'message', 'sender').value;
            }
            catch {
                try {
                    sender = logs.findAttribute(parsedLogs, 'message', 'signer').value;
                }
                catch {
                    this.client.logger.warn(`No message.sender nor message.signer in tx ${toHex(hash)}`);
                }
            }
            return parsePacketsFromLogs(parsedLogs).map((packet) => ({
                packet,
                height,
                sender,
            }));
        });
        return [].concat(...resultsNested);
    }
    // returns all acks (auto-paginates, so be careful about not setting a minHeight)
    async queryWrittenAcks({ minHeight, maxHeight, } = {}) {
        let query = `write_acknowledgement.packet_connection='${this.connectionID}'`;
        if (minHeight) {
            query = `${query} AND tx.height>=${minHeight}`;
        }
        if (maxHeight) {
            query = `${query} AND tx.height<=${maxHeight}`;
        }
        const search = await this.client.tm.txSearchAll({ query });
        const resultsNested = search.txs.map(({ height, result }) => {
            const parsedLogs = parseRawLog(result.log);
            // const sender = logs.findAttribute(parsedLogs, 'message', 'sender').value;
            return parseAcksFromLogs(parsedLogs).map((ack) => ({
                height,
                ...ack,
            }));
        });
        return [].concat(...resultsNested);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2VuZHBvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTS9DLE9BQU8sRUFBTyxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQW9CdkU7Ozs7O0dBS0c7QUFDSCxNQUFNLE9BQU8sUUFBUTtJQUtuQixZQUNFLE1BQWlCLEVBQ2pCLFFBQWdCLEVBQ2hCLFlBQW9CO1FBRXBCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ25DLENBQUM7SUFFTSxPQUFPO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUM3QixDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWU7UUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxvRkFBb0Y7SUFDN0UsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQzVCLFNBQVMsRUFDVCxTQUFTLE1BQ0ksRUFBRTtRQUNmLElBQUksS0FBSyxHQUFHLGtDQUFrQyxJQUFJLENBQUMsWUFBWSxHQUFHLENBQUM7UUFDbkUsSUFBSSxTQUFTLEVBQUU7WUFDYixLQUFLLEdBQUcsR0FBRyxLQUFLLG1CQUFtQixTQUFTLEVBQUUsQ0FBQztTQUNoRDtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsS0FBSyxHQUFHLEdBQUcsS0FBSyxtQkFBbUIsU0FBUyxFQUFFLENBQUM7U0FD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