import { toAscii } from '@cosmjs/encoding';
import { createPagination, createRpc } from '@cosmjs/stargate';
import Long from 'long';
import { CommitmentProof } from '../../codec/confio/proofs';
import { Any } from '../../codec/google/protobuf/any';
import { Channel } from '../../codec/ibc/core/channel/v1/channel';
import { QueryClientImpl as ChannelQuery, } from '../../codec/ibc/core/channel/v1/query';
import { QueryClientImpl as ClientQuery, QueryConsensusStateRequest, } from '../../codec/ibc/core/client/v1/query';
import { MerkleProof } from '../../codec/ibc/core/commitment/v1/commitment';
import { ConnectionEnd } from '../../codec/ibc/core/connection/v1/connection';
import { QueryClientImpl as ConnectionQuery, QueryConnectionConsensusStateRequest, } from '../../codec/ibc/core/connection/v1/query';
import { ClientState as TendermintClientState, ConsensusState as TendermintConsensusState, } from '../../codec/ibc/lightclients/tendermint/v1/tendermint';
function decodeTendermintClientStateAny(clientState) {
    if (clientState?.typeUrl !== '/ibc.lightclients.tendermint.v1.ClientState') {
        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
    }
    return TendermintClientState.decode(clientState.value);
}
function decodeTendermintConsensusStateAny(clientState) {
    if (clientState?.typeUrl !== '/ibc.lightclients.tendermint.v1.ConsensusState') {
        throw new Error(`Unexpected client state type: ${clientState?.typeUrl}`);
    }
    return TendermintConsensusState.decode(clientState.value);
}
export function heightQueryString(height) {
    return `${height.revisionNumber}-${height.revisionHeight}`;
}
export function setupIbcExtension(base) {
    const rpc = createRpc(base);
    // Use these services to get easy typed access to query methods
    // These cannot be used for proof verification
    const channelQueryService = new ChannelQuery(rpc);
    const clientQueryService = new ClientQuery(rpc);
    const connectionQueryService = new ConnectionQuery(rpc);
    return {
        ibc: {
            channel: {
                channel: async (portId, channelId) => channelQueryService.Channel({
                    portId: portId,
                    channelId: channelId,
                }),
                channels: async (paginationKey) => channelQueryService.Channels({
                    pagination: createPagination(paginationKey),
                }),
                allChannels: async () => {
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.Channels({
                            pagination: createPagination(key),
                        });
                        channels.push(...response.channels);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        channels: channels,
                        height: response.height,
                    };
                },
                connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({
                    connection: connection,
                    pagination: createPagination(paginationKey),
                }),
                allConnectionChannels: async (connection) => {
                    const channels = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.ConnectionChannels({
                            connection: connection,
                            pagination: createPagination(key),
                        });
                        channels.push(...response.channels);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        channels: channels,
                        height: response.height,
                    };
                },
                clientState: async (portId, channelId) => channelQueryService.ChannelClientState({
                    portId: portId,
                    channelId: channelId,
                }),
                consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({
                    portId: portId,
                    channelId: channelId,
                    revisionNumber: Long.fromNumber(revisionNumber, true),
                    revisionHeight: Long.fromNumber(revisionHeight, true),
                }),
                packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({
                    portId: portId,
                    channelId: channelId,
                    sequence: sequence,
                }),
                packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({
                    channelId: channelId,
                    portId: portId,
                    pagination: createPagination(paginationKey),
                }),
                allPacketCommitments: async (portId, channelId) => {
                    const commitments = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.PacketCommitments({
                            channelId: channelId,
                            portId: portId,
                            pagination: createPagination(key),
                        });
                        commitments.push(...response.commitments);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        commitments: commitments,
                        height: response.height,
                    };
                },
                packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({
                    portId: portId,
                    channelId: channelId,
                    sequence: Long.fromNumber(sequence, true),
                }),
                packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({
                    portId: portId,
                    channelId: channelId,
                    sequence: Long.fromNumber(sequence, true),
                }),
                packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({
                    portId: portId,
                    channelId: channelId,
                    pagination: createPagination(paginationKey),
                }),
                allPacketAcknowledgements: async (portId, channelId) => {
                    const acknowledgements = [];
                    let response;
                    let key;
                    do {
                        response = await channelQueryService.PacketAcknowledgements({
                            channelId: channelId,
                            portId: portId,
                            pagination: createPagination(key),
                        });
                        acknowledgements.push(...response.acknowledgements);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        acknowledgements: acknowledgements,
                        height: response.height,
                    };
                },
                unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({
                    portId: portId,
                    channelId: channelId,
                    packetCommitmentSequences: packetCommitmentSequences.map((s) => Long.fromNumber(s, true)),
                }),
                unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({
                    portId: portId,
                    channelId: channelId,
                    packetAckSequences: packetAckSequences.map((s) => Long.fromNumber(s, true)),
                }),
                nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({
                    portId: portId,
                    channelId: channelId,
                }),
            },
            client: {
                state: (clientId) => clientQueryService.ClientState({ clientId }),
                states: (paginationKey) => clientQueryService.ClientStates({
                    pagination: createPagination(paginationKey),
                }),
                allStates: async () => {
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ClientStates({
                            pagination: createPagination(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        clientStates: clientStates,
                    };
                },
                consensusState: (clientId, consensusHeight) => clientQueryService.ConsensusState(QueryConsensusStateRequest.fromPartial({
                    clientId: clientId,
                    revisionHeight: consensusHeight !== undefined
                        ? Long.fromNumber(consensusHeight, true)
                        : undefined,
                    latestHeight: consensusHeight === undefined,
                })),
                consensusStates: (clientId, paginationKey) => clientQueryService.ConsensusStates({
                    clientId: clientId,
                    pagination: createPagination(paginationKey),
                }),
                allConsensusStates: async (clientId) => {
                    const consensusStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ConsensusStates({
                            clientId: clientId,
                            pagination: createPagination(key),
                        });
                        consensusStates.push(...response.consensusStates);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        consensusStates: consensusStates,
                    };
                },
                params: () => clientQueryService.ClientParams({}),
                stateTm: async (clientId) => {
                    const response = await clientQueryService.ClientState({ clientId });
                    return decodeTendermintClientStateAny(response.clientState);
                },
                statesTm: async (paginationKey) => {
                    const { clientStates } = await clientQueryService.ClientStates({
                        pagination: createPagination(paginationKey),
                    });
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                },
                allStatesTm: async () => {
                    const clientStates = [];
                    let response;
                    let key;
                    do {
                        response = await clientQueryService.ClientStates({
                            pagination: createPagination(key),
                        });
                        clientStates.push(...response.clientStates);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return clientStates.map(({ clientState }) => decodeTendermintClientStateAny(clientState));
                },
                consensusStateTm: async (clientId, consensusHeight) => {
                    const response = await clientQueryService.ConsensusState(QueryConsensusStateRequest.fromPartial({
                        clientId: clientId,
                        revisionHeight: consensusHeight?.revisionHeight,
                        revisionNumber: consensusHeight?.revisionNumber,
                        latestHeight: consensusHeight === undefined,
                    }));
                    return decodeTendermintConsensusStateAny(response.consensusState);
                },
            },
            connection: {
                connection: async (connectionId) => connectionQueryService.Connection({
                    connectionId: connectionId,
                }),
                connections: async (paginationKey) => connectionQueryService.Connections({
                    pagination: createPagination(paginationKey),
                }),
                allConnections: async () => {
                    const connections = [];
                    let response;
                    let key;
                    do {
                        response = await connectionQueryService.Connections({
                            pagination: createPagination(key),
                        });
                        connections.push(...response.connections);
                        key = response.pagination?.nextKey;
                    } while (key);
                    return {
                        connections: connections,
                        height: response.height,
                    };
                },
                clientConnections: async (clientId) => connectionQueryService.ClientConnections({
                    clientId: clientId,
                }),
                clientState: async (connectionId) => connectionQueryService.ConnectionClientState({
                    connectionId: connectionId,
                }),
                consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(QueryConnectionConsensusStateRequest.fromPartial({
                    connectionId: connectionId,
                    revisionHeight: Long.fromNumber(revisionHeight, true),
                })),
            },
            proof: {
                // these keys can all be found here: https://github.com/cosmos/cosmos-sdk/blob/v0.41.1/x/ibc/core/24-host/keys.go
                // note some have changed since the v0.40 pre-release this code was based on
                channel: {
                    channel: async (portId, channelId, proofHeight) => {
                        // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120
                        const key = toAscii(`channelEnds/ports/${portId}/channels/${channelId}`);
                        const proven = await base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const channel = Channel.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            channel: channel,
                            proof: proof,
                            proofHeight,
                        };
                    },
                    // designed only for timeout, modify if we need actual value not just proof
                    // could not verify absence of key receipts/ports/transfer/channels/channel-5/sequences/2
                    receiptProof: async (portId, channelId, sequence, proofHeight) => {
                        const key = toAscii(`receipts/ports/${portId}/channels/${channelId}/sequences/${sequence}`);
                        const proven = await base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const proof = convertProofsToIcs23(proven.proof);
                        return proof;
                    },
                    packetCommitment: async (portId, channelId, sequence, proofHeight) => {
                        const key = toAscii(`commitments/ports/${portId}/channels/${channelId}/sequences/${sequence.toNumber()}`);
                        const proven = await base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const commitment = proven.value;
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            commitment: commitment,
                            proof: proof,
                            proofHeight: proofHeight,
                        };
                    },
                    packetAcknowledgement: async (portId, channelId, sequence, proofHeight) => {
                        const key = toAscii(`acks/ports/${portId}/channels/${channelId}/sequences/${sequence}`);
                        const proven = await base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const acknowledgement = proven.value;
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            acknowledgement: acknowledgement,
                            proof: proof,
                            proofHeight: proofHeight,
                        };
                    },
                    nextSequenceReceive: async (portId, channelId, proofHeight) => {
                        const key = toAscii(`nextSequenceRecv/ports/${portId}/channels/${channelId}`);
                        const proven = await base.queryRawProof('ibc', key, proofHeight.revisionHeight.toNumber());
                        const nextSequenceReceive = Long.fromBytesBE([...proven.value]);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            nextSequenceReceive: nextSequenceReceive,
                            proof: proof,
                            proofHeight: proofHeight,
                        };
                    },
                },
                client: {
                    state: async (clientId, proofHeight) => {
                        const key = `clients/${clientId}/clientState`;
                        const proven = await base.queryRawProof('ibc', toAscii(key), proofHeight.revisionHeight.toNumber());
                        const clientState = Any.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            clientState,
                            proof,
                            proofHeight,
                        };
                    },
                    consensusState: async (clientId, consensusHeight, proofHeight) => {
                        const height = heightQueryString(consensusHeight);
                        const key = `clients/${clientId}/consensusStates/${height}`;
                        const proven = await base.queryRawProof('ibc', toAscii(key), proofHeight.revisionHeight.toNumber());
                        const consensusState = Any.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            consensusState,
                            proof,
                            proofHeight,
                        };
                    },
                },
                connection: {
                    connection: async (connectionId, proofHeight) => {
                        const key = `connections/${connectionId}`;
                        const proven = await base.queryRawProof('ibc', toAscii(key), proofHeight.revisionHeight.toNumber());
                        const connection = ConnectionEnd.decode(proven.value);
                        const proof = convertProofsToIcs23(proven.proof);
                        return {
                            connection,
                            proof,
                            proofHeight,
                        };
                    },
                },
            },
        },
    };
}
function convertProofsToIcs23(ops) {
    const proofs = ops.ops.map((op) => CommitmentProof.decode(op.data));
    const resp = MerkleProof.fromPartial({
        proofs,
    });
    return MerkleProof.encode(resp).finish();
}
//# sourceMappingURL=data:application/json;base64,