// This file outputs some basic test functionality, and includes tests that they work
import { Bip39, Random } from '@cosmjs/crypto';
import { Bech32 } from '@cosmjs/encoding';
import { GasPrice } from '@cosmjs/launchpad';
import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing';
import { StargateClient } from '@cosmjs/stargate';
import sinon from 'sinon';
import { Order } from '../codec/ibc/core/channel/v1/channel';
import { IbcClient } from './ibcclient';
export class TestLogger {
    constructor(shouldLog = false) {
        const createSpy = (logFn) => sinon.spy(((message, meta) => {
            logFn(message, meta ? JSON.stringify(meta) : undefined);
            return this;
        }).bind(this));
        const createFake = (() => sinon.fake.returns(this)).bind(this);
        this.error = shouldLog ? createSpy(console.error) : createFake();
        this.warn = shouldLog ? createSpy(console.warn) : createFake();
        this.info = shouldLog ? createSpy(console.info) : createFake();
        this.verbose = shouldLog ? createSpy(console.log) : createFake();
        this.debug = createFake();
    }
}
export const simapp = {
    tendermintUrlWs: 'ws://localhost:26658',
    tendermintUrlHttp: 'http://localhost:26658',
    chainId: 'simd-testing',
    prefix: 'cosmos',
    denomStaking: 'umoo',
    denomFee: 'umuon',
    minFee: '0.025umuon',
    blockTime: 250,
    faucet: {
        mnemonic: 'economy stock theory fatal elder harbor betray wasp final emotion task crumble siren bottom lizard educate guess current outdoor pair theory focus wife stone',
        pubkey0: {
            type: 'tendermint/PubKeySecp256k1',
            value: 'A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ',
        },
        address0: 'cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6',
    },
    /** Unused account */
    unused: {
        pubkey: {
            type: 'tendermint/PubKeySecp256k1',
            value: 'ArkCaFUJ/IH+vKBmNRCdUVl3mCAhbopk9jjW4Ko4OfRQ',
        },
        address: 'cosmos1cjsxept9rkggzxztslae9ndgpdyt2408lk850u',
        accountNumber: 16,
        sequence: 0,
        balanceStaking: '10000000',
        balanceFee: '1000000000',
    },
};
export const wasmd = {
    tendermintUrlWs: 'ws://localhost:26659',
    tendermintUrlHttp: 'http://localhost:26659',
    chainId: 'testing',
    prefix: 'wasm',
    denomStaking: 'ustake',
    denomFee: 'ucosm',
    minFee: '0.025ucosm',
    blockTime: 250,
    faucet: {
        mnemonic: 'enlist hip relief stomach skate base shallow young switch frequent cry park',
        pubkey0: {
            type: 'tendermint/PubKeySecp256k1',
            value: 'A9cXhWb8ZpqCzkA8dQCPV29KdeRLV3rUYxrkHudLbQtS',
        },
        address0: 'wasm14qemq0vw6y3gc3u3e0aty2e764u4gs5lndxgyk',
    },
    unused: {
        pubkey: {
            type: 'tendermint/PubKeySecp256k1',
            value: 'ArkCaFUJ/IH+vKBmNRCdUVl3mCAhbopk9jjW4Ko4OfRQ',
        },
        address: 'wasm1cjsxept9rkggzxztslae9ndgpdyt240842kpxh',
        accountNumber: 16,
        sequence: 0,
        balanceStaking: '10000000',
        balanceFee: '1000000000',
    },
};
// constants for this transport protocol
// we assume src = simapp, dest = wasmd as returned by setup()
export const ics20 = {
    // we set a new port in genesis for simapp
    srcPortId: 'custom',
    destPortId: 'transfer',
    version: 'ics20-1',
    ordering: Order.ORDER_UNORDERED,
};
export async function queryClient(opts) {
    return StargateClient.connect(opts.tendermintUrlHttp);
}
export async function signingClient(opts, mnemonic, logger) {
    const signer = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, undefined, opts.prefix);
    const { address } = (await signer.getAccounts())[0];
    const options = {
        prefix: opts.prefix,
        gasPrice: GasPrice.fromString(opts.minFee),
        logger,
    };
    const client = await IbcClient.connectWithSigner(opts.tendermintUrlHttp, signer, address, options);
    return client;
}
export async function setup(logger) {
    // create apps and fund an account
    const mnemonic = generateMnemonic();
    const src = await signingClient(simapp, mnemonic, logger);
    const dest = await signingClient(wasmd, mnemonic, logger);
    await fundAccount(wasmd, dest.senderAddress, '4000000');
    await fundAccount(simapp, src.senderAddress, '4000000');
    return [src, dest];
}
export async function fundAccount(opts, rcpt, amount) {
    const client = await signingClient(opts, opts.faucet.mnemonic);
    const feeTokens = {
        amount,
        denom: GasPrice.fromString(opts.minFee).denom,
    };
    await client.sendTokens(rcpt, [feeTokens]);
}
export function generateMnemonic() {
    return Bip39.encode(Random.getBytes(16)).toString();
}
export function randomAddress(prefix) {
    const random = Random.getBytes(20);
    return Bech32.encode(prefix, random);
}
// Makes multiple transfers, one per item in amounts.
// Return a list of the block heights the packets were committed in.
export async function transferTokens(src, srcDenom, dest, destPrefix, channel, amounts, timeout) {
    const txHeights = [];
    const destRcpt = randomAddress(destPrefix);
    const destHeight = await dest.timeoutHeight(timeout ?? 500); // valid for 500 blocks or timeout if specified
    for (const amount of amounts) {
        const token = {
            amount: amount.toString(),
            denom: srcDenom,
        };
        const { height } = await src.transferTokens(channel.portId, channel.channelId, token, destRcpt, destHeight);
        txHeights.push(height);
    }
    return txHeights;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90ZXN0dXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEscUZBQXFGO0FBQ3JGLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxLQUFtQixNQUFNLE9BQU8sQ0FBQztBQUV4QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFN0QsT0FBTyxFQUFlLFNBQVMsRUFBb0IsTUFBTSxhQUFhLENBQUM7QUFHdkUsTUFBTSxPQUFPLFVBQVU7SUFPckIsWUFBWSxTQUFTLEdBQUcsS0FBSztRQUMzQixNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQWtELEVBQUUsRUFBRSxDQUN2RSxLQUFLLENBQUMsR0FBRyxDQUNQLENBQUMsQ0FBQyxPQUFlLEVBQUUsSUFBOEIsRUFBVSxFQUFFO1lBQzNELEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN4RCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDZCxDQUFDO1FBQ0osTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FB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