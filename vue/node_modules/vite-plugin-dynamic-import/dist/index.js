"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dynamicImport = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const walk = __importStar(require("acorn-walk"));
const glob_1 = __importDefault(require("glob"));
const utils_1 = require("./utils");
function dynamicImport(options = {}) {
    var _a;
    const name = 'vite-plugin-dynamic-import';
    const extensions = (_a = options.extensions) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_EXTENSIONS;
    const refConifg = { current: null };
    return {
        name,
        config(config) {
            refConifg.current = config;
        },
        transform(code, id) {
            var _a, _b;
            if (/node_modules/.test(id))
                return;
            if (!extensions.some(ext => id.endsWith(ext)))
                return;
            if ((0, utils_1.parsePathQuery)(id).query)
                return;
            if (!/import[\n\s]*?\(/g.test(code))
                return;
            try {
                // let code2 = id.endsWith('.vue') ? vtc.parseComponent(code).script.content : code
                let code2 = code;
                const ast = this.parse(code);
                const dirname = path_1.default.dirname(id);
                const aliasCtx = createAliasContext({ alias: (_b = (_a = refConifg.current) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.alias, cwd: dirname });
                const importRecords = [];
                let dynamicImportIndex = -1;
                const repleaceImports = [];
                walk.simple(ast, {
                    ImportExpression(node) {
                        const importRawArgument = code2.slice(node.source.start, node.source.end);
                        const aliasGlob = expressionToGlob(node.source);
                        let glob = null;
                        try {
                            glob = canBeAnalyzedGlob(aliasCtx.replace(aliasGlob), code2.substring(node.start, node.end));
                        }
                        catch (error) {
                            if (options.onmessage) {
                                options.onmessage('error', error);
                            }
                            else {
                                utils_1.message.info({
                                    plugin: name,
                                    filename: id,
                                    error,
                                });
                            }
                        }
                        if (!glob) {
                            // this was not a variable dynamic import
                            return;
                        }
                        const glob2 = glob.slice(0, glob.indexOf('/*')) + '/**/*';
                        const filepaths = glob_1.default.sync(glob2, { cwd: dirname });
                        for (let i = 0, l = filepaths.length; i < l; i++) {
                            const filepath = filepaths[i];
                            const stat = fs_1.default.statSync(path_1.default.join(dirname, filepath));
                            const isDirectory = stat.isDirectory();
                            const item = {
                                importRawArgument,
                                aliasGlob,
                                glob,
                                glob2,
                                filepath,
                                isDirectory,
                                realFile: filepath,
                                fileStat: (0, utils_1.detectFileExist)(filepath, { cwd: dirname }) || null,
                                id,
                            };
                            if (item.fileStat) {
                                // xxxx/index.(vue|js|jsx|mjs|json|ts|tsx)
                                item.realFile = path_1.default.join(item.filepath, item.fileStat.tail);
                            }
                            if (!extensions.some(ext => item.realFile.endsWith(ext))) {
                                // ignore non exist file
                                continue;
                            }
                            importRecords.push(item);
                        }
                        dynamicImportIndex += 1;
                        // expand import case
                        const importRecordsExplands = [];
                        for (let i = 0, l = importRecords.length; i < l; i++) {
                            const impt = importRecords[i];
                            if (impt.isDirectory) {
                                // glob2 模式下不需要对 isDirectory 加工
                                // importRecordsExplands.push(
                                //   { ...impt, expland: true, filepath: `${impt.filepath}/index` },
                                //   { ...impt, expland: true, filepath: `${impt.filepath}/${impt.fileStat.tail}` },
                                // )
                            }
                            else {
                                importRecordsExplands.push({ ...impt, expland: true, filepath: impt.filepath.replace(RegExp(`${impt.fileStat.ext}$`), '') });
                            }
                        }
                        const importVars = generateImportVars(importRecords.concat(importRecordsExplands), dynamicImportIndex);
                        const repleaceImport = `${importVars.name}(${aliasCtx.replace(importRawArgument, { raw: true })})`;
                        repleaceImports.push({
                            node,
                            repleaceImport,
                            importVars,
                        });
                    },
                });
                if (!repleaceImports.length)
                    return; // 可加可不加
                // execute replace import()
                for (let len = repleaceImports.length, i = len - 1; i >= 0; i--) {
                    const { node, repleaceImport } = repleaceImports[i];
                    code2 = code2.slice(0, node.start) + repleaceImport + code2.slice(node.end);
                }
                code2 += repleaceImports
                    .map(impt => impt.importVars.func)
                    .join('\n');
                return code2;
            }
            catch (error) {
                if (options.catch) {
                    options.catch(error, { filename: id });
                }
                else {
                    throw error;
                }
            }
        },
    };
}
exports.dynamicImport = dynamicImport;
function generateImportVars(imports, dynamicImportIndex) {
    const name = `__variableDynamicImportRuntime${dynamicImportIndex}__`;
    const func = `\nfunction ${name}(path) {
  switch (path) {
${imports.map((impt) => `    case '${impt.filepath}': return import('${impt.realFile}');`).join('\n')}
${`    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    });\n`}  }
}\n`;
    return { name, func };
}
function createAliasContext(options) {
    return { replace };
    function replace(importPath, opts = { /* with colon */ raw: false }) {
        if (!options.alias)
            return importPath;
        const startsWithColon = opts.raw
            ? (/^['"\`]/.test(importPath) ? importPath.slice(0, 1) : '')
            : null;
        if (startsWithColon) {
            importPath = importPath.slice(1);
        }
        const hitAlias = {};
        if (Array.isArray(options.alias)) {
            for (const alia of options.alias) {
                if (alia.find instanceof RegExp ? alia.find.test(importPath) : importPath.startsWith(`${alia.find}/`)) {
                    Object.assign(hitAlias, alia);
                    break;
                }
            }
        }
        else {
            for (const [find, replacement] of Object.entries(options.alias)) {
                if (importPath.startsWith(`${find}/`)) { // new RegExp(`^['"\`]?${alia}\/`).test(importPath)
                    Object.assign(hitAlias, { find, replacement });
                    break;
                }
            }
        }
        if (!hitAlias.find)
            return importPath;
        const leftHalf = path_1.default.join(path_1.default.relative(options.cwd, /* Only support absolute path */ hitAlias.replacement));
        const rightHalf = importPath.replace(hitAlias.find, '');
        const finalPath = path_1.default.join(leftHalf, rightHalf);
        return startsWithColon ? startsWithColon + finalPath : finalPath;
    }
}
// -------------------------- dynamic-import-vars  --------------------------
function canBeAnalyzedGlob(glob, sourceString) {
    if (!glob.includes('*')) {
        return null;
    }
    const glob2 = glob.replace(/\*\*/g, '*');
    const example = 'For example: import(`./foo/${bar}.js`).';
    if (glob2.startsWith('*')) {
        throw new Error(`invalid import "${sourceString}". It cannot be statically analyzed. Variable dynamic imports must start with ./ and be limited to a specific directory. ${example}`);
    }
    if (glob2.startsWith('/')) {
        throw new Error(`invalid import "${sourceString}". Variable absolute imports are not supported, imports must start with ./ in the static part of the import. ${example}`);
    }
    if (!glob2.startsWith('./') && !glob2.startsWith('../')) {
        throw new Error(`invalid import "${sourceString}". Variable bare imports are not supported, imports must start with ./ in the static part of the import. ${example}`);
    }
    return glob;
}
// https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars
function expressionToGlob(node) {
    switch (node.type) {
        case 'TemplateLiteral': // import(`@/pages/${path}`)
            return templateLiteralToGlob(node);
        case 'CallExpression': // import('@/pages/'.concat(path))
            return callExpressionToGlob(node);
        case 'BinaryExpression': // import('@/pages/' + path)
            return binaryExpressionToGlob(node);
        case 'Literal': // import('@/pages/path')
            return sanitizeString(node.value);
        default:
            return '*';
    }
}
function templateLiteralToGlob(node) {
    let glob = '';
    for (let i = 0, l = node.quasis.length; i < l; i++) {
        glob += sanitizeString(node.quasis[i].value.raw);
        if (node.expressions[i]) { // quasis 永远比 expressions 长一位
            glob += expressionToGlob(node.expressions[i]);
        }
    }
    return glob;
}
function callExpressionToGlob(node) {
    const { callee } = node;
    if (callee.type === 'MemberExpression' &&
        callee.property.type === 'Identifier' &&
        callee.property.name === 'concat') {
        return expressionToGlob(callee.object) + node.arguments.map(expressionToGlob).join('');
    }
    return '*';
}
function binaryExpressionToGlob(node) {
    if (node.operator !== '+') {
        throw new Error(`${node.operator} operator is not supported.`);
    }
    return expressionToGlob(node.left) + expressionToGlob(node.right);
}
function sanitizeString(str) {
    if (str.includes('*')) {
        throw new Error('A dynamic import cannot contain * characters.');
    }
    return str;
}
// -------------------------- dynamic-import-vars  --------------------------
