"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.message = exports.detectFileExist = exports.parsePathQuery = exports.isCommonjs = exports.DEFAULT_EXTENSIONS = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
exports.DEFAULT_EXTENSIONS = [
    '.mjs',
    '.js',
    '.ts',
    '.jsx',
    '.tsx',
    '.json',
    '.vue'
];
function isCommonjs(code) {
    return /\b(?:require|module|exports)\b/.test(code);
}
exports.isCommonjs = isCommonjs;
/**
 * { vue: true, type: 'template', 'lang.js': true }
 * { vue: true, type: 'style', index: '0', 'lang.less': true }
 * { vue: true, type: 'style', index: '0', scoped: 'true', 'lang.css': true }
 */
function parsePathQuery(querystring) {
    const [url, query] = querystring.split('?');
    try {
        const dict = [...new URLSearchParams(query).entries()].reduce((acc, [k, v]) => ({ ...acc, [k]: v === '' ? true : v }), { url, query });
        const { index, ...omit } = dict;
        return omit;
    }
    catch (error) {
        return {
            _error: error,
        };
    }
}
exports.parsePathQuery = parsePathQuery;
/**
 * 依次根据文件尾缀检测文件是否存在
 * @param filepath 绝对路径，或相对路径；相对路径时需要 cwd
 * @param options FileExistOptions
 * @returns FileExistStat | void
 */
function detectFileExist(filepath, options = {}) {
    var _a;
    const extensions = (_a = options.extensions) !== null && _a !== void 0 ? _a : exports.DEFAULT_EXTENSIONS;
    if (typeof options.cwd === 'string') {
        filepath = path_1.default.join(options.cwd, filepath);
    }
    // detect is a directory
    const exist = typeof options.exist === 'boolean' ? options.exist : fs_1.default.existsSync(filepath);
    const isDirectory = exist
        ? (typeof options.isDirectory === 'boolean' ? options.isDirectory : fs_1.default.statSync(filepath).isDirectory())
        : void 0;
    // ddetect is a file
    let ext;
    let tail;
    if (exist) {
        if (isDirectory) {
            ext = extensions.find(element => fs_1.default.existsSync(path_1.default.join(filepath, 'index') + element));
            tail = 'index' + ext;
        }
        else {
            ext = extensions.find(element => filepath.endsWith(element));
            tail = '';
        }
    }
    else {
        ext = extensions.find(element => fs_1.default.existsSync(filepath + element));
        tail = ext;
    }
    return ext
        ? ({
            ext,
            tail,
            filename: detectFileExist.join(filepath, { ext, tail, filename: '' }),
        })
        : void 0;
}
exports.detectFileExist = detectFileExist;
detectFileExist.join = function (filepath, stat) {
    if (stat.tail.includes('index')) {
        return path_1.default.join(filepath, stat.tail);
    }
    if (stat.tail === stat.ext) {
        return filepath + stat.tail;
    }
    // stat.tail === ''
    return filepath;
};
/**
 * Console log
 * @param arg0
 */
exports.message = {
    info(arg0) {
        console.log(`
    Plugin: ${arg0.plugin}
    File: ${arg0.filename}
    ${arg0.error}
  `);
    },
};
